<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件需求要点（NEU）</title>
      <link href="/2019/12/25/ruan-jian-xu-qiu-yao-dian-neu/"/>
      <url>/2019/12/25/ruan-jian-xu-qiu-yao-dian-neu/</url>
      
        <content type="html"><![CDATA[<h1 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h1><h2 id="软件开发的本质："><a href="#软件开发的本质：" class="headerlink" title="软件开发的本质："></a>软件开发的本质：</h2><p>1.70%的项目是失败的：质量差、超期、超预算、需求变更<br>2.软件本身是创造性开发行为的产品<br>3.软件开发的不变事实是：<br>    1.complexity复杂性<br>    2.conformity一致性：软件与平台、系统一致<br>    3.changeability（需求）可变性<br>    4.invisibility（代码）不可见性<br>1.可变的意外困难不会增加软件开发的复杂性<br>    1.社会问题<br>    2.提高软件的可适应性=可理解性+可维护性+可扩展性<br>1.软件开发的意外事件与三个因素相关<br>    1.stakeholder利益相关者：客户、开发者<br>    利益相关者指对系统产生影响或者被系统所影响的人，是在软件项目中存在利害关系的人<br>    2.software process过程：在软件开发和维护过程中定义的活动和组织排序<br>        1.迭代（迭代完发布新版本）增量（一次迭代的功能增加或减少）模型<br>            需要提前做好计划和控制，和预定义的设计框架一致<br>            1.螺旋模型：包含RUP、MDA、敏捷开发模型<br>            2.RUP（retional统一过程）：提供文本、概念和开发思路<br>            3.MDA（模型驱动的体系结构）<br>            4.敏捷开发过程<br>            5.面向方向的软件开发<br>        2.能力与成熟度模型（Capability Maturity Model，CMM）用于过程评估和改进的流行方法。<br>            1.第一级：走到哪算到哪，没有特定的规则，大部分都在第一级<br>            2.第二级：可重复级，靠经验每一次用相同的方法，东软<br>            3.第三级：定义级，已经定义好了规则，不到整个软件企业总量的10%<br>            4.第四级：管理级，对整个每一步的过程增加了监控，亚马逊<br>            5.第五级：优化级，对整个过程或标准优化的策略，基本是军方企业</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件需求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件需求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word中优雅的插入代码块</title>
      <link href="/2019/12/23/untitled/"/>
      <url>/2019/12/23/untitled/</url>
      
        <content type="html"><![CDATA[<p>打开  <a href="http://www.planetb.ca/syntax-highlight-word" target="_blank" rel="noopener">http://www.planetb.ca/syntax-highlight-word</a><br>将代码复制至code块里<br>选择编译语言，然后show highlights<br><img alt data-src="https://img-blog.csdnimg.cn/20191223140647422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>将新页面的代码复制至word即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkcore练习_2,各种算子的练习</title>
      <link href="/2019/12/19/sparkcore-lian-xi-2-ge-chong-suan-zi-de-lian-xi/"/>
      <url>/2019/12/19/sparkcore-lian-xi-2-ge-chong-suan-zi-de-lian-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据集<br><a href="http://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">http://grouplens.org/datasets/movielens/</a><br>MovieLens 1M Dataset<br>相关数据文件<br>users.dat<br>UserID::Gender::Age::Occupation::Zip-code<br> movies.dat<br> MovieID::Title::Genres<br> ratings.dat<br> UserID::MovieID::Rating::Timestamp<br> 通过Spark 计算看过“Lord of the Rings, The (1978)” 用户年龄和性别分布</p></blockquote><p>1.年龄段在“18-24” 的男性年轻人， 最喜欢看哪10部<br>2.得分最高的10部电影； 看过电影最多的前10个人；女性看多最多的10部电影；男性看过最多的10部电影<br>3.利用数据集SogouQ2012.mini.tar.gz 将数据按照访问次数进行排序， 求访问量前10的网站</p><p>没有使用join联合表，如果使用join，记得用distinc去重，不然有可能导致数据重复<br>1.年龄段在“18-24” 的男性年轻人， 最喜欢看哪10部</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-11 19:49 * */</span>object homework03 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework03"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext    val user_data<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\users.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    val user_id <span class="token operator">=</span> user_data<span class="token punctuation">.</span>filter<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      var tmp <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token operator">&lt;=</span><span class="token number">24</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">)</span>      tmp    <span class="token punctuation">}</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(userid,userid)</span>    val user_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>    val rate_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\ratings.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,mid)</span>    val movie_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\movies.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(mid,title)</span>    val res_mid <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val userId <span class="token operator">=</span> user_bc<span class="token punctuation">.</span>value      val arr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          arr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      arr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap<span class="token comment" spellcheck="true">//(mid,count)</span>    val resid_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>res_mid<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val moveisId <span class="token operator">=</span> resid_bc<span class="token punctuation">.</span>value      val resArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>moveisId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          resArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>moveisId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄段在“18-24” 的男性看多最多的10部电影:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"${line._2}位看过"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(title ,count),只输出title</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.得分最高的10部电影； 看过电影最多的前10个人；女性看多最多的10部电影；男性看过最多<br>的10部电影</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 16:45 * */</span>object homework04 <span class="token punctuation">{</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework04"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext  val user_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\users.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,gender)</span>  val rate_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\ratings.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(uid,mid,rate)</span>  val movie_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\movies.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(mid,title)</span>  def <span class="token function">ans1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val rate_data_1 <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>line<span class="token punctuation">.</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(mid,(rate1,rate2...))</span>    val res_mid <span class="token operator">=</span> rate_data_1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>info <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      var sum<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0</span>      var count<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0</span>      var avg<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0</span>      info<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> <span class="token keyword">case</span> rates <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> rates        count <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      avg <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token function">count</span>      <span class="token punctuation">(</span>info<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> avg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap <span class="token comment" spellcheck="true">//(mid,rate_avg)</span>    res_mid<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    val resmid_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>res_mid<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val movieId <span class="token operator">=</span> resmid_bc<span class="token punctuation">.</span>value      val resMIdArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Double<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>mid1<span class="token punctuation">,</span> title<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>movieId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span>          resMIdArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> movieId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      resMIdArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(title ,avg),只输出title</span>  <span class="token punctuation">}</span>  def <span class="token function">ans2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val rate_data_2 <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//(uid,1)</span>    rate_data_2<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(uid,count)</span>  <span class="token punctuation">}</span>  def <span class="token function">ans3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val user_data_3  <span class="token operator">=</span> user_data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token operator">==</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,F)</span>    val userId_3_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>user_data_3<span class="token punctuation">)</span>    val resMId_3  <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>line<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val uid_3 <span class="token operator">=</span> userId_3_bc<span class="token punctuation">.</span>value      val resMId_3Arr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uid_3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span>          resMId_3Arr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resMId_3Arr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap<span class="token comment" spellcheck="true">//(mid,count)</span>    val resMTitle_3bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>resMId_3<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val moveisId <span class="token operator">=</span> resMTitle_3bc<span class="token punctuation">.</span>value      val resArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>moveisId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          resArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>moveisId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(title ,count)</span>  <span class="token punctuation">}</span>  def <span class="token function">ans4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val user_data_3  <span class="token operator">=</span> user_data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,F)</span>    val userId_3_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>user_data_3<span class="token punctuation">)</span>    val resMId_3  <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>line<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val uid_3 <span class="token operator">=</span> userId_3_bc<span class="token punctuation">.</span>value      val resMId_3Arr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uid_3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span>          resMId_3Arr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resMId_3Arr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap<span class="token comment" spellcheck="true">//(mid,count)</span>    val resMTitle_3bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>resMId_3<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val moveisId <span class="token operator">=</span> resMTitle_3bc<span class="token punctuation">.</span>value      val resArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>moveisId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          resArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>moveisId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(title ,count)</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//val start = System.nanoTime()</span>    <span class="token function">ans1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得分最高的10部电影:"</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"平均得分为：${line._2}"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只输出title</span>    <span class="token function">ans2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看过电影最多的前10个人:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"看过${line._2}部电影"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">ans3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女性看多最多的10部电影:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"${line._2}位女性看过"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">ans4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男性看多最多的10部电影:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"${line._2}位男性看过"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//val end = System.nanoTime()</span>   <span class="token comment" spellcheck="true">// println("------------------------------------")</span>  <span class="token comment" spellcheck="true">//  println("程序运行时间:[" + (end - start) + "ns]")</span>  <span class="token comment" spellcheck="true">//  println("------------------------------------")</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.利用数据集SogouQ2012.mini.tar.gz 将数据按照访问次数进行排序， 求访问量前10的网站</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 21:12 * */</span>object homework05 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework05"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext    sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\SogouQ2012.mini.tar.gz"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问量前10的网站:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"访问量为${line._2}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea通过maven创建scala项目及编写spark</title>
      <link href="/2019/12/19/idea-tong-guo-maven-chuang-jian-scala-xiang-mu-ji-bian-xie-spark/"/>
      <url>/2019/12/19/idea-tong-guo-maven-chuang-jian-scala-xiang-mu-ji-bian-xie-spark/</url>
      
        <content type="html"><![CDATA[<p>file-&gt;new project-&gt;maven-&gt;<br><img alt data-src="https://img-blog.csdnimg.cn/20191212160139471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>填写gva：<br><img alt data-src="https://img-blog.csdnimg.cn/20191212160314683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>配置maven版本，如果配置了镜像则读取自己的setting.xml<br><img alt data-src="https://img-blog.csdnimg.cn/20191212160515667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>next-&gt;finish<br><img alt data-src="https://img-blog.csdnimg.cn/2019121216062313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h1 id="scala版本一定要对应"><a href="#scala版本一定要对应" class="headerlink" title="!!!!!!! scala版本一定要对应"></a>!!!!!!! scala版本一定要对应</h1><p><img alt data-src="https://img-blog.csdnimg.cn/20191212160715513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>改成自己安装的版本，dos模式：scala –version<br><img alt data-src="https://img-blog.csdnimg.cn/20191212160924135.png" class="lozad"><br>将自动生成的.scala文件删除：<br><img alt data-src="https://img-blog.csdnimg.cn/20191212161111742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>file-&gt;project structure<br><img alt data-src="https://img-blog.csdnimg.cn/20191212161838494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad">)<img alt data-src="https://img-blog.csdnimg.cn/20191212161912130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br><img alt data-src="https://img-blog.csdnimg.cn/20191212161939675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h2 id="spark-core的pom-xml"><a href="#spark-core的pom-xml" class="headerlink" title="spark_core的pom.xml"></a>spark_core的pom.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.neu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sparkCoreTraining<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inceptionYear</span><span class="token punctuation">></span></span>2008<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inceptionYear</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.11.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>scala-tools.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Scala-Tools Maven2 Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://scala-tools.org/repo-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>scala-tools.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Scala-Tools Maven2 Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://scala-tools.org/repo-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.0-M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-csv_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming-kafka_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/main/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">></span></span>src/test/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>args</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>-target:jvm-1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>args</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporting</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporting</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="spark-sql的pom-xml"><a href="#spark-sql的pom-xml" class="headerlink" title="spark_sql的pom.xml"></a>spark_sql的pom.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>zh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sparkSQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inceptionYear</span><span class="token punctuation">></span></span>2008<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inceptionYear</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.11.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  &lt;repositories>    &lt;repository>      &lt;id>scala-tools.org&lt;/id>      &lt;name>Scala-Tools Maven2 Repository&lt;/name>      &lt;url>http://scala-tools.org/repo-releases&lt;/url>    &lt;/repository>  &lt;/repositories>  &lt;pluginRepositories>    &lt;pluginRepository>      &lt;id>scala-tools.org&lt;/id>      &lt;name>Scala-Tools Maven2 Repository&lt;/name>      &lt;url>http://scala-tools.org/repo-releases&lt;/url>    &lt;/pluginRepository>  &lt;/pluginRepositories>--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.0-M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-hive_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-avro_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-csv_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/main/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">></span></span>src/test/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>args</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>-target:jvm-1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>args</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporting</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporting</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决rdd无法调用toDF及 value toDF is not a member of org.apache.spark.rdd.RDD[names]</title>
      <link href="/2019/12/19/jie-jue-rdd-wu-fa-diao-yong-todf-ji-value-todf-is-not-a-member-of-org-apache-spark-rdd-rdd-names/"/>
      <url>/2019/12/19/jie-jue-rdd-wu-fa-diao-yong-todf-ji-value-todf-is-not-a-member-of-org-apache-spark-rdd-rdd-names/</url>
      
        <content type="html"><![CDATA[<p>需加入隐式导入才能toDF</p><pre class=" language-java"><code class="language-java">  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"ch2homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_ <span class="token comment" spellcheck="true">//不加入隐式导入则不能toDF</span></code></pre><p>编译代码</p><pre class=" language-java"><code class="language-java">object homework01 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"ch2homework01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"ch2homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">names</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>count<span class="token operator">:</span>Int<span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_ <span class="token comment" spellcheck="true">//不加入隐式导入则不能toDF</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>     <span class="token function">names</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDF</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>出现</p><pre class=" language-java"><code class="language-java">Error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span> value toDF is not a member of org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span>names<span class="token punctuation">]</span></code></pre><p>解决：<br>将case class names(name:String,count:Int)放到需要用到names方法的方法体外</p><p><del>~</del>java<br>object homework01 {</p><p>  case class names(name:String,count:Int)</p><p>  def main(args: Array[String]): Unit = {<br>    val conf =  new SparkConf().setAppName(“ch2homework01”).setMaster(“local[4]”)<br>    val sc = new SparkContext(conf)<br>    val spark = SparkSession.builder().appName(“ch2homework1”).master(“local[4]”).getOrCreate()<br>    import spark.implicits._<br>    val data = sc.textFile(“file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz”).flatMap(_.split(“\n”)).map(line =&gt;<br>     names((line.split(“,”).reverse(0)), 1)).toDF()</p><pre><code>data.show()</code></pre><p>  }<br>}<br>~~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark中的map-side-join关联优化</title>
      <link href="/2019/12/19/spark-zhong-de-map-side-join-guan-lian-you-hua/"/>
      <url>/2019/12/19/spark-zhong-de-map-side-join-guan-lian-you-hua/</url>
      
        <content type="html"><![CDATA[<p>将多份数据进行关联是数据处理过程中非常普遍的用法，不过在分布式计算系统中，这个问题往往会变的非常麻烦，因为框架提供的 join 操作一般会将所有数据根据 key 发送到所有的 reduce 分区中去，也就是 shuffle 的过程。造成大量的网络以及磁盘IO消耗，运行效率极其低下，这个过程一般被称为 reduce-side-join。<br>如果其中有张表较小的话，我们则可以自己实现在 map 端实现数据关联，跳过大量数据进行 shuffle 的过程，运行时间得到大量缩短，根据不同数据可能会有几倍到数十倍的性能提升。</p><p>用于在海量数据中匹配少量特定数据</p><p>原理图<br><img alt data-src="https://img-blog.csdnimg.cn/20191210112545967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>代码说明</p><p>将少量的数据转化为Map进行广播，广播会将此 Map 发送到每个节点中，如果不进行广播，每个task执行时都会去获取该Map数据，造成了性能浪费。</p><pre class=" language-java"><code class="language-java">val people_info <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">,</span><span class="token string">"lsw"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>val people_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>people_info<span class="token punctuation">)</span></code></pre><p>对大数据进行遍历，使用mapPartition而不是map，因为mapPartition是在每个partition中进行操作，因此可以减少遍历时新建broadCastMap.value对象的空间消耗，同时匹配不到的数据也不会返回（）。</p><pre class=" language-java"><code class="language-java">val res <span class="token operator">=</span> student_all<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    val stuMap <span class="token operator">=</span> people_bc<span class="token punctuation">.</span>value    val arrayBuffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span>school<span class="token punctuation">,</span>sno<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stuMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> stuMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>idCard<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    arrayBuffer<span class="token punctuation">.</span>iterator<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>也可以使用 for 的守卫机制来实现上述代码</p><pre class=" language-java"><code class="language-java">val res1 <span class="token operator">=</span> student_all<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    val stuMap <span class="token operator">=</span> people_bc<span class="token punctuation">.</span>value    <span class="token keyword">for</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> school<span class="token punctuation">,</span> sno<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">-</span> iter        <span class="token keyword">if</span><span class="token punctuation">(</span>stuMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token function">yield</span> <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> stuMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>idCard<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>完整代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkContext<span class="token punctuation">,</span> SparkConf<span class="token punctuation">}</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBufferobject joinTest <span class="token keyword">extends</span> <span class="token class-name">App</span><span class="token punctuation">{</span>  val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * map-side-join   * 取出小表中出现的用户与大表关联后取出所需要的信息   * */</span>   <span class="token comment" spellcheck="true">//小表</span>  val small <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//大表</span>  val big <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"s1"</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"s2"</span><span class="token punctuation">,</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"s3"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"s2"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将需要关联的小表进行关联</span>  val smallbc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 使用mapPartition而不是用map，减少创建broadCastMap.value的空间消耗   * 同时匹配不到的数据也不需要返回（）   * */</span>  val res <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    val smallMap <span class="token operator">=</span> smallbc<span class="token punctuation">.</span>value    val arrayBuffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>belong<span class="token punctuation">,</span>no<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>smallMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> smallMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>belong<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    arrayBuffer<span class="token punctuation">.</span>iterator  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 使用另一种方式实现   * 使用for的守卫   * */</span>  val res1 <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    val smallMap <span class="token operator">=</span> smallbc<span class="token punctuation">.</span>value    <span class="token keyword">for</span><span class="token punctuation">{</span>      <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> school<span class="token punctuation">,</span> sno<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">-</span> iter      <span class="token keyword">if</span><span class="token punctuation">(</span>smallMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token function">yield</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> smallMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>belong<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span></code></pre><p>结果：</p><pre><code>1,a,s1</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark scala读取文件选取特定列</title>
      <link href="/2019/12/19/spark-scala-du-qu-wen-jian-xuan-qu-te-ding-lie/"/>
      <url>/2019/12/19/spark-scala-du-qu-wen-jian-xuan-qu-te-ding-lie/</url>
      
        <content type="html"><![CDATA[<p>spark scala读取文件选取特定列<br>wordcount.txt:</p><pre class=" language-txt"><code class="language-txt">a,1c,2a,1</code></pre><p>选取最后一列</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//选取特定列.</span><span class="token keyword">val</span> data<span class="token operator">=</span>sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"file:///E://table//wordcount.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//按换行符分割文件，把文件分成一行行的</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>    line<span class="token keyword">=></span>        <span class="token keyword">var</span> splits<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//把行按","分割，转置选取第一列即最后一列，</span>                                                <span class="token comment" spellcheck="true">//选取其他列例如第一列：line.split(",")(0) ，</span>                                                <span class="token comment" spellcheck="true">//选取多列map(line=>(line.split(",")(0),line.split(",")(18),line.split(",")(31))) </span>       <span class="token punctuation">(</span>splits<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkcore练习_1,RDD转化为RDD[LabelPoint]和map-side-join以及将结果（RDD/dataframe）输出到一个文件保存</title>
      <link href="/2019/12/19/sparkcore-lian-xi-1-rdd-zhuan-hua-wei-rdd-labelpoint-he-map-side-join-yi-ji-jiang-jie-guo-rdd-dataframe-shu-chu-dao-yi-ge-wen-jian-bao-cun/"/>
      <url>/2019/12/19/sparkcore-lian-xi-1-rdd-zhuan-hua-wei-rdd-labelpoint-he-map-side-join-yi-ji-jiang-jie-guo-rdd-dataframe-shu-chu-dao-yi-ge-wen-jian-bao-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据集net-gz为网络流量数据，-数据集每条记录展现每个连接的信息，-最后一列为攻击的标签"><a href="#1-数据集net-gz为网络流量数据，-数据集每条记录展现每个连接的信息，-最后一列为攻击的标签" class="headerlink" title="1. 数据集net.gz为网络流量数据， 数据集每条记录展现每个连接的信息， 最后一列为攻击的标签"></a>1. 数据集net.gz为网络流量数据， 数据集每条记录展现每个连接的信息， 最后一列为攻击的标签</h1><p> (1) 请统计， 出现的攻击类型对应的攻击次数<br> (2) 为了输入给算法， 请将RDD 类型转换为RDD[Labelpoint]<br>（ Labelpoint为Spark Vector）</p><h2 id="1-不使用labelpoint："><a href="#1-不使用labelpoint：" class="headerlink" title="(1)不使用labelpoint："></a>(1)不使用labelpoint：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 15:11 * */</span>object homework01 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"ch2homework01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//val spark = SparkSession.builder().appName("ch2homework1").master("local[4]").getOrCreate()</span>    <span class="token comment" spellcheck="true">//import spark.implicits._</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-使用labelpoint-机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签"><a href="#2-使用labelpoint-机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签" class="headerlink" title="(2)使用labelpoint,机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签"></a>(2)使用labelpoint,机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>mllib<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>Vectors<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>mllib<span class="token punctuation">.</span>regression<span class="token punctuation">.</span>LabeledPoint<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 15:11 * */</span>object homework01 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"ch2homework01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    val rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>     <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    var y<span class="token operator">:</span>Double<span class="token operator">=</span> <span class="token number">0</span>    val labeledPoint <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map <span class="token punctuation">{</span> x <span class="token operator">=</span><span class="token operator">></span>      y<span class="token operator">+=</span><span class="token number">1.0</span><span class="token comment" spellcheck="true">//标签每次加一</span>      <span class="token function">LabeledPoint</span><span class="token punctuation">(</span>        y<span class="token punctuation">,</span> Vectors<span class="token punctuation">.</span><span class="token function">dense</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    labeledPoint<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="2-数据集art-txt中存储id-和-姓名（-用制表符-t-分割）-，-art-alias-txt-存储正确ID-和错误ID-的对应关系，-编写程序，-将art-txt-中id-到art-alias-txt中匹配出正确的ID-并组成新的RDD-id-name-。"><a href="#2-数据集art-txt中存储id-和-姓名（-用制表符-t-分割）-，-art-alias-txt-存储正确ID-和错误ID-的对应关系，-编写程序，-将art-txt-中id-到art-alias-txt中匹配出正确的ID-并组成新的RDD-id-name-。" class="headerlink" title="2. 数据集art.txt中存储id 和 姓名（ 用制表符/t 分割） ， art_alias.txt 存储正确ID 和错误ID 的对应关系， 编写程序， 将art.txt 中id 到art_alias.txt中匹配出正确的ID,并组成新的RDD[(id,name)]。"></a>2. 数据集art.txt中存储id 和 姓名（ 用制表符/t 分割） ， art_alias.txt 存储正确ID 和错误ID 的对应关系， 编写程序， 将art.txt 中id 到art_alias.txt中匹配出正确的ID,并组成新的RDD[(id,name)]。</h1><p>  提示：在处理art.txt 数据集过程中会遇到数据不合规的问题， 合理使用Some 和 None 解决此问题。<br>  在实际情况中往往art.txt 数据集会随着系统的运行时间增长变得很大， 利用map side join 思想解决上面的的问题。</p><p>最开始没有想到用map-side-join导致运行时间及其长，非常不好</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 20:22 * */</span>object homework02 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    var arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不用map-side-join</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val alias <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_alias.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span><span class="token operator">-</span> data<span class="token punctuation">.</span>keySet<span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>cid <span class="token operator">&lt;</span><span class="token operator">-</span> alias<span class="token punctuation">.</span>keySet<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> alias<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span>          arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>用了map-side-join之后，速度直线上升。<br>map-side-join:<br>将少量的数据转化为Map进行广播，广播会将此 Map 发送到每个节点中，如果不进行广播，每个task执行时都会去获取该Map数据，造成了性能浪费。<br>对大数据进行遍历，使用mapPartition而不是map，因为mapPartition是在每个partition中进行操作，因此可以减少遍历时新建broadCastMap.value对象的空间消耗，同时匹配不到的数据也不会返回（）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 20:22 * */</span>object homework02 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map-side-join</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    val alias <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_alias.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//错误id做key，正确id做val</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val alias_bc<span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span>    val res <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val aliasMap <span class="token operator">=</span> alias_bc<span class="token punctuation">.</span>value      val arrayBuffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aliasMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>wid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>aliasMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>         arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      arrayBuffer<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":  文件被删除"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//saveAstextFile默认是将RDD输出到多个文件的，因此我们需要通过方法coalesce(1)来设置，从而将RDD输出到一个文件中。</span>    res<span class="token punctuation">.</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>另一种实现，for的守卫</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//另一种，用for的守卫实现</span>    val res1<span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val aliasMap1 <span class="token operator">=</span> alias_bc<span class="token punctuation">.</span>value      <span class="token keyword">for</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span>wid<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>iter        <span class="token keyword">if</span><span class="token punctuation">(</span>aliasMap1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>wid<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token function">yield</span> <span class="token punctuation">(</span>aliasMap1<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res1<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span></code></pre><h1 id="将RDD输出到一个文件"><a href="#将RDD输出到一个文件" class="headerlink" title="将RDD输出到一个文件"></a>将RDD输出到一个文件</h1><p>saveAstextFile默认是将RDD输出到多个文件的，因此我们需要通过方法coalesce(1)来设置，从而将RDD输出到一个文件中。</p><pre class=" language-java"><code class="language-java">    res<span class="token punctuation">.</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span></code></pre><h1 id="将dataframe保存到一个csv"><a href="#将dataframe保存到一个csv" class="headerlink" title="将dataframe保存到一个csv"></a>将dataframe保存到一个csv</h1><p>dataframe保存到一个文件格式为‘csv’，repartition(1)将之前分区的多个输出重新合并到一个分区</p><pre class=" language-java"><code class="language-java">   df<span class="token punctuation">.</span><span class="token function">repartition</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"E://table//local_22_out//"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark运行模式的区别</title>
      <link href="/2019/12/19/spark-yun-xing-mo-shi-de-qu-bie/"/>
      <url>/2019/12/19/spark-yun-xing-mo-shi-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>local    ：就是单机，jobs都在这台机器上运行。<br>standalone：就是说多台机器组成一个集群，然后jobs可以分在多台机器上运行<br>yarn：就是说spark程序运行在yarn上<br>client ：就是Jobs在不同机器运行，然后结果返回到这台机器上。<br>cluster ： 就是说jobs在不同机器上运行，结果返回到集群中的某一台机器上。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala一行代码实现wordcount解析</title>
      <link href="/2019/12/19/scala-yi-xing-dai-ma-shi-xian-wordcount-jie-xi/"/>
      <url>/2019/12/19/scala-yi-xing-dai-ma-shi-xian-wordcount-jie-xi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-scala"><code class="language-scala"> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"/data/wordcount.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>word<span class="token keyword">=></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></code></pre><p> 这个file读的是hdfs文件,<a href="https://blog.csdn.net/qq_42400267/article/details/103417238" target="_blank" rel="noopener">读文件的区别</a></p><pre class=" language-scala"><code class="language-scala">sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"/data/wordcount.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//读取这个变量地址指定的文件</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//把文件中每一行按空格分割并转成多行</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//把上面转成多行中的每一项转换成一组一组的数据，每组数据为自身加1的组合，等价于(_,1)、word=>(word,1)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//把每组数据的value值进行累加，也就是把每组数据的所有1进行累加，求出每组key的总数。等价于(_+_)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token number">.2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//按上一步每组的累加值进行排序,等价于(_,_2)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//收集一个弹性分布式数据集RDD的所有元素到一个数组中</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></code></pre><p>在scala中如果函数中只有一个变量那可以不写，或者使用匿名变量<br>代码里的(, 1) 这个就是逗号前面有个匿名变量,<br>_.2 这个 就是代表元组的第2个值 可以写成这样的形式f =&gt; {f._2} 那这个f和_就是一个意思了 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读取文件时，读取hdfs集群的文件和本机文件的scala代码写法</title>
      <link href="/2019/12/19/du-qu-wen-jian-shi-du-qu-hdfs-ji-qun-de-wen-jian-he-ben-ji-wen-jian-de-scala-dai-ma-xie-fa/"/>
      <url>/2019/12/19/du-qu-wen-jian-shi-du-qu-hdfs-ji-qun-de-wen-jian-he-ben-ji-wen-jian-de-scala-dai-ma-xie-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="读取hdfs集群的文件"><a href="#读取hdfs集群的文件" class="headerlink" title="读取hdfs集群的文件"></a>读取hdfs集群的文件</h1><p>val file=sc.textFile(“/data/wordcount.txt”)<br>spark默认是在hdfs目录读取所以可以不写hdfs<br>也可以写成：val file=sc.textFile(“hdfs://nn:9000/path/file”)</p><h1 id="读取本机文件"><a href="#读取本机文件" class="headerlink" title="读取本机文件"></a>读取本机文件</h1><p>val file=sc.textFile(“<strong>file://</strong>/data/wordcount.txt”)</p><h1 id="文本文件-TextInputFormat"><a href="#文本文件-TextInputFormat" class="headerlink" title="文本文件 TextInputFormat"></a>文本文件 TextInputFormat</h1><p>sc.textFile(“file.txt”) // 将本地文本文件加载成 RDD<br>sc.textFile(“directory/*.txt”) // 将某类文本文件加载成 RDD<br>sc.textFile(“hdfs://nn:9000/path/file”) // hdfs 文件或目录</p><h1 id="sequenceFile文件-SequenceFileInputFormat"><a href="#sequenceFile文件-SequenceFileInputFormat" class="headerlink" title="sequenceFile文件 SequenceFileInputFormat"></a>sequenceFile文件 SequenceFileInputFormat</h1><p>sc.sequenceFile(“file.txt”) //将本地二进制文件加载成RDD<br>sc.sequenceFile[String, Int] (“hdfs://nn:9000/path/file”)</p><h1 id="使用任意自定义的Hadoop-InputFormat"><a href="#使用任意自定义的Hadoop-InputFormat" class="headerlink" title="使用任意自定义的Hadoop InputFormat"></a>使用任意自定义的Hadoop InputFormat</h1><p>sc.hadoopFile(path, inputFmt, keyClass, valClass)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea通过maven创建scala项目，自动生成的App.scala报错</title>
      <link href="/2019/12/19/jie-jue-idea-tong-guo-maven-chuang-jian-scala-xiang-mu-zi-dong-sheng-cheng-de-app-scala-bao-cuo/"/>
      <url>/2019/12/19/jie-jue-idea-tong-guo-maven-chuang-jian-scala-xiang-mu-zi-dong-sheng-cheng-de-app-scala-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="直接删除自动生成的scala文件"><a href="#直接删除自动生成的scala文件" class="headerlink" title="直接删除自动生成的scala文件"></a>直接删除自动生成的scala文件</h1><p>main里有一个<br>test里有两个<br>删了然后新建即可</p><p><strong>如果还不行，注意版本号</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea编写spark程序时，import org.apache.spark报错</title>
      <link href="/2019/12/19/jie-jue-idea-bian-xie-spark-cheng-xu-shi-import-org-apache-spark-bao-cuo/"/>
      <url>/2019/12/19/jie-jue-idea-bian-xie-spark-cheng-xu-shi-import-org-apache-spark-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>导入spark程序时，spark显示不能识别此符号<br><img alt data-src="https://img-blog.csdnimg.cn/20191205175818179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h1 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h1><p><img alt data-src="https://img-blog.csdnimg.cn/20191205180140799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br><img alt data-src="https://img-blog.csdnimg.cn/20191205180228633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>去官网下载对应spark版本的压缩包，<a href="http://archive.apache.org/dist/spark/" target="_blank" rel="noopener">链接</a><br>解压，既有jars目录<br>或者pom.xml加入</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-csv_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming-kafka_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言第五次实训,dplyr 、tidyr和lubridate处理数据</title>
      <link href="/2019/12/19/r-yu-yan-di-wu-ci-shi-xun-dplyr-tidyr-he-lubridate-chu-li-shu-ju/"/>
      <url>/2019/12/19/r-yu-yan-di-wu-ci-shi-xun-dplyr-tidyr-he-lubridate-chu-li-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="题目1："><a href="#题目1：" class="headerlink" title="题目1："></a>题目1：</h1><p>1.数据处理【只用SY-20150401.csv】<br>将数据处理成每条数据处于一天中的第几个5分钟（说明： 00:00:01在第一个5分钟内， 00:10:13<br>在第三个5分钟内），由于一天可能多次乘坐地铁，根据卡号和进站时间，查询最近出站的时间，<br>作为本次出站时间。参考函数lubridate::hms， lubridate:: period_to_seconds。<br>处理的最终结果： dataframe(名称trade.metro.in.out )<br>字段 字段说明<br><img alt data-src="https://img-blog.csdnimg.cn/20191205163004682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>提交的表格按照card.id排序。<br>Notebook中展示输出结果为<br>head(trade.metro.in.out,10)<br>并输出本地文件<br>shmetro_line_in_out.csv</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>读数据：</p><pre class=" language-python"><code class="language-python">setwd<span class="token punctuation">(</span><span class="token string">"E://table"</span><span class="token punctuation">)</span>library<span class="token punctuation">(</span>data<span class="token punctuation">.</span>table<span class="token punctuation">)</span>dt<span class="token operator">=</span>fread<span class="token punctuation">(</span><span class="token string">'SY-20150401.csv'</span><span class="token punctuation">)</span></code></pre><p>重命名：</p><pre class=" language-python"><code class="language-python">names<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'card_id'</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">,</span><span class="token string">'time'</span><span class="token punctuation">,</span><span class="token string">'station'</span><span class="token punctuation">,</span><span class="token string">'vehicle'</span><span class="token punctuation">,</span><span class="token string">'money'</span><span class="token punctuation">,</span><span class="token string">'property'</span><span class="token punctuation">)</span>dt</code></pre><p>选取是地铁的数据</p><pre class=" language-python"><code class="language-python">sy<span class="token operator">&lt;</span><span class="token operator">-</span>dt<span class="token punctuation">[</span>dt$vehicle<span class="token operator">==</span><span class="token string">'地铁'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>sy</code></pre><p>将station分成2个字段line和station，利用‘号线’来分割；处理每5分钟一段，并按M5排序（化为秒÷300向上取整）</p><pre class=" language-python"><code class="language-python">library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>library<span class="token punctuation">(</span>tidyr<span class="token punctuation">)</span>sy_split<span class="token operator">&lt;</span><span class="token operator">-</span>subset<span class="token punctuation">(</span>sy<span class="token punctuation">,</span>select <span class="token operator">=</span> c<span class="token punctuation">(</span>card_id<span class="token punctuation">,</span>time<span class="token punctuation">,</span>station<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">,</span>na<span class="token punctuation">.</span>rm<span class="token operator">=</span>TRUE<span class="token punctuation">)</span>sy_split<span class="token operator">&lt;</span><span class="token operator">-</span>separate<span class="token punctuation">(</span>sy_split<span class="token punctuation">,</span><span class="token string">'station'</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token string">'line'</span><span class="token punctuation">,</span><span class="token string">'station'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'号线'</span><span class="token punctuation">,</span>remove<span class="token operator">=</span>TRUE<span class="token punctuation">)</span>sy_split$M5<span class="token operator">&lt;</span><span class="token operator">-</span>ceiling<span class="token punctuation">(</span><span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>period_to_seconds<span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>hms<span class="token punctuation">(</span>sy_split$time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">300</span><span class="token punctuation">)</span>sy_split<span class="token operator">&lt;</span><span class="token operator">-</span>sy_split<span class="token punctuation">[</span>order<span class="token punctuation">(</span>sy_split$M5<span class="token punctuation">)</span><span class="token punctuation">]</span>sy_split</code></pre><p>统计进站数据</p><pre class=" language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span> <span class="token operator">&lt;</span><span class="token operator">-</span> subset<span class="token punctuation">(</span>sy_split<span class="token punctuation">,</span>money<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span>select<span class="token operator">=</span><span class="token operator">-</span>c<span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span>names<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'card.id'</span><span class="token punctuation">,</span><span class="token string">'time.in'</span><span class="token punctuation">,</span><span class="token string">'line.in'</span><span class="token punctuation">,</span><span class="token string">'station.in'</span><span class="token punctuation">,</span><span class="token string">'M5.in'</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span></code></pre><p>统计出站数据</p><pre class=" language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>sy_split<span class="token punctuation">[</span>money<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span>names<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'card.id'</span><span class="token punctuation">,</span><span class="token string">'time.out'</span><span class="token punctuation">,</span><span class="token string">'line.out'</span><span class="token punctuation">,</span><span class="token string">'station.out'</span><span class="token punctuation">,</span><span class="token string">'money'</span><span class="token punctuation">,</span><span class="token string">'M5.out'</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out</code></pre><p>根据card.id将5和6合并；并计算乘车时长；将乘车时长大于0的取出来</p><pre class=" language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>merge<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">,</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span class="token punctuation">,</span>by<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">'card.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out$duration<span class="token operator">=</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>period_to_seconds<span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>hms<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out$time<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>period_to_seconds<span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>hms<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out$time<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>subset<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span>duration<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out</code></pre><p>通过card.id, M5.in来统计出某个card.id的最短的乘车时长<br>然后通过duration==duration_min，将最近出站时间，找出来<br>再将中间的统计量去掉，也可以dplyr中的管道%&gt;%实现</p><pre class=" language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">[</span><span class="token punctuation">,</span>duration<span class="token punctuation">.</span>min<span class="token punctuation">:</span><span class="token operator">=</span>min<span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>id<span class="token punctuation">,</span>M5<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">]</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>outtrade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>subset<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span>duration<span class="token operator">==</span>duration<span class="token punctuation">.</span>min<span class="token punctuation">,</span>select <span class="token operator">=</span> <span class="token operator">-</span>c<span class="token punctuation">(</span>duration<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out</code></pre><p>按照card.id来排序，并展示前10条</p><pre class=" language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">[</span>order<span class="token punctuation">(</span>card<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>head<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>将处理后的数据输出</p><pre class=" language-python"><code class="language-python">write<span class="token punctuation">.</span>csv<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token string">'shmetro_line_in_out.csv'</span><span class="token punctuation">,</span>row<span class="token punctuation">.</span>names <span class="token operator">=</span> FALSE<span class="token punctuation">)</span></code></pre><p>利用1中的处理结果，按照station.in,station.out来分组，统计各组的数量<br>按照进出站的流量排序，取出前10个<br>展示前6个</p><pre class=" language-python"><code class="language-python">cus_nums<span class="token operator">&lt;</span><span class="token operator">-</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">(</span>cusnums<span class="token operator">=</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">(</span>station<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">,</span>station<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">]</span>cus_nums<span class="token operator">&lt;</span><span class="token operator">-</span>cus_nums<span class="token punctuation">[</span>order<span class="token punctuation">(</span>cusnums<span class="token punctuation">,</span>decreasing <span class="token operator">=</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">]</span>cus_nums<span class="token operator">&lt;</span><span class="token operator">-</span>cus_nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span>head<span class="token punctuation">(</span>cus_nums<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言第六次实训,leaflet绘制地铁线路图</title>
      <link href="/2019/12/19/r-yu-yan-di-liu-ci-shi-xun-leaflet-hui-zhi-di-tie-xian-lu-tu/"/>
      <url>/2019/12/19/r-yu-yan-di-liu-ci-shi-xun-leaflet-hui-zhi-di-tie-xian-lu-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>数据请到我的主页看我的上传资源</p><ol><li>使用leaflet绘制地铁线路图，要求<br>1） 图中绘制地铁线路<br>2） 各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，<br>并且提示线路、站点、流量的具体数值。<br>Shenyang &lt;- leaflet() %&gt;%<br>setView(lng=123.44,lat=41.81,zoom = 11) %&gt;% addProviderTiles(“CartoDB.Positron”)</li><li>使用plotly绘制（17:00:00-17:05:00） 出站流量最多的五个站点的出站流量(柱状图)</li></ol><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><h3 id="第一步，读文件获取数据，编写辅助函数绘图"><a href="#第一步，读文件获取数据，编写辅助函数绘图" class="headerlink" title="第一步，读文件获取数据，编写辅助函数绘图"></a>第一步，读文件获取数据，编写辅助函数绘图</h3><pre class=" language-python"><code class="language-python">library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>library<span class="token punctuation">(</span>leaflet<span class="token punctuation">)</span>library<span class="token punctuation">(</span>data<span class="token punctuation">.</span>table<span class="token punctuation">)</span>setwd<span class="token punctuation">(</span><span class="token string">"E://table"</span><span class="token punctuation">)</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"systation.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stations <span class="token operator">&lt;</span><span class="token operator">-</span> arrange<span class="token punctuation">(</span>stations<span class="token punctuation">,</span>line<span class="token punctuation">,</span>line_id<span class="token punctuation">)</span>lines_color <span class="token operator">&lt;</span><span class="token operator">-</span> data<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">"line"</span><span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"color"</span><span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"#00008B"</span><span class="token punctuation">,</span><span class="token string">"#000000"</span><span class="token punctuation">,</span><span class="token string">"#000000"</span><span class="token punctuation">,</span><span class="token string">"#000000"</span><span class="token punctuation">,</span><span class="token string">"#823094"</span><span class="token punctuation">,</span><span class="token string">"#CF047A"</span><span class="token punctuation">,</span><span class="token string">"#F3560F"</span><span class="token punctuation">,</span><span class="token string">"#008CC1"</span><span class="token punctuation">,</span><span class="token string">"#91C5DB"</span><span class="token punctuation">,</span><span class="token string">"#C7AFD3"</span><span class="token punctuation">,</span><span class="token string">"#8C2222"</span><span class="token punctuation">,</span><span class="token string">"#007a61"</span><span class="token punctuation">,</span><span class="token string">"#ec91cc"</span><span class="token punctuation">,</span><span class="token string">"#32D2CA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pal <span class="token operator">&lt;</span><span class="token operator">-</span> colorFactor<span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">.</span>character<span class="token punctuation">(</span>lines_color$color<span class="token punctuation">)</span><span class="token punctuation">,</span> domain <span class="token operator">=</span> stations$line<span class="token punctuation">)</span>Shenyang <span class="token operator">&lt;</span><span class="token operator">-</span> leaflet<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>setView<span class="token punctuation">(</span>lng<span class="token operator">=</span><span class="token number">123.44</span><span class="token punctuation">,</span>lat<span class="token operator">=</span><span class="token number">41.81</span><span class="token punctuation">,</span>zoom <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span> addProviderTiles<span class="token punctuation">(</span><span class="token string">"CartoDB.Positron"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 辅助函数绘制线路</span>draw_line_add <span class="token operator">&lt;</span><span class="token operator">-</span> function<span class="token punctuation">(</span>l_no<span class="token punctuation">,</span>line_s_id<span class="token operator">=</span>NULL<span class="token punctuation">)</span><span class="token punctuation">{</span>  line_color <span class="token operator">&lt;</span><span class="token operator">-</span> lines_color<span class="token punctuation">[</span>lines_color$line<span class="token operator">==</span>l_no<span class="token punctuation">,</span><span class="token punctuation">]</span>$color  line_data <span class="token operator">&lt;</span><span class="token operator">-</span> stations<span class="token punctuation">[</span>stations$line<span class="token operator">==</span>l_no<span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">is</span><span class="token punctuation">.</span>null<span class="token punctuation">(</span>line_s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  draw_lines <span class="token operator">&lt;</span><span class="token operator">-</span> Shenyang <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>    addPolylines<span class="token punctuation">(</span>lat<span class="token operator">=</span>line_data$gps_lat<span class="token punctuation">,</span>lng<span class="token operator">=</span>line_data$gps_lon<span class="token punctuation">,</span>color<span class="token operator">=</span>line_color<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    draw_lines <span class="token operator">&lt;</span><span class="token operator">-</span> Shenyang <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>      addPolylines<span class="token punctuation">(</span>lat<span class="token operator">=</span>line_data$gps_lat<span class="token punctuation">[</span>line_s_id<span class="token punctuation">]</span><span class="token punctuation">,</span>lng<span class="token operator">=</span>line_data$gps_lon<span class="token punctuation">[</span>line_s_id<span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span>line_color<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>draw_lines<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="第二步，添加地铁站名字"><a href="#第二步，添加地铁站名字" class="headerlink" title="第二步，添加地铁站名字"></a>第二步，添加地铁站名字</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span><span class="token punctuation">(</span>l <span class="token keyword">in</span> unique<span class="token punctuation">(</span>stations$line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  line_length <span class="token operator">&lt;</span><span class="token operator">-</span> nrow<span class="token punctuation">(</span>stations<span class="token punctuation">[</span>stations$line<span class="token operator">==</span>l<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  Shenyang<span class="token operator">&lt;</span><span class="token operator">-</span> draw_line_add<span class="token punctuation">(</span>l_no<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span>stations_no <span class="token operator">&lt;</span><span class="token operator">-</span> nrow<span class="token punctuation">(</span>stations<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">:</span>stations_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>  s <span class="token operator">&lt;</span><span class="token operator">-</span> stations$station<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  stations$lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">-</span> paste<span class="token punctuation">(</span>stations<span class="token punctuation">[</span>stations$station<span class="token operator">==</span>s<span class="token punctuation">,</span><span class="token punctuation">]</span>$line<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>collapse<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#添加地铁站名</span>Shenyang<span class="token operator">&lt;</span><span class="token operator">-</span> Shenyang<span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>  addCircleMarkers<span class="token punctuation">(</span>stations$gps_lon<span class="token punctuation">,</span> stations$gps_lat<span class="token punctuation">,</span> popup <span class="token operator">=</span>paste<span class="token punctuation">(</span>stations$station<span class="token punctuation">,</span>stations$lines<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color <span class="token operator">=</span> pal<span class="token punctuation">(</span>stations$line<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>  addLegend<span class="token punctuation">(</span>pal<span class="token operator">=</span>pal<span class="token punctuation">,</span>values <span class="token operator">=</span> stations$line<span class="token punctuation">)</span>Shenyang </code></pre><p><img alt="结果" data-src="https://img-blog.csdnimg.cn/20191205161238766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h2 id="第三步，各站点展示进站流量（08-00-00-08-05-00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。"><a href="#第三步，各站点展示进站流量（08-00-00-08-05-00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。" class="headerlink" title="第三步，各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。"></a>第三步，各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##(2)各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。</span>library<span class="token punctuation">(</span>lubridate<span class="token punctuation">)</span>library<span class="token punctuation">(</span>data<span class="token punctuation">.</span>table<span class="token punctuation">)</span>library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>library<span class="token punctuation">(</span>sqldf<span class="token punctuation">)</span>library<span class="token punctuation">(</span>leaflet<span class="token punctuation">)</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//systation.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//SY-20150401.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata$se<span class="token operator">&lt;</span><span class="token operator">-</span>period_to_seconds<span class="token punctuation">(</span>hms<span class="token punctuation">(</span>stadata$V3<span class="token punctuation">)</span><span class="token punctuation">)</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token keyword">as</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>table<span class="token punctuation">(</span>stadata<span class="token punctuation">)</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>filter<span class="token punctuation">(</span>stadata<span class="token punctuation">,</span>V6<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;</span> se<span class="token operator">>=</span><span class="token number">28800</span> <span class="token operator">&amp;</span> se<span class="token operator">&lt;=</span><span class="token number">29100</span><span class="token punctuation">)</span>getR <span class="token operator">&lt;</span><span class="token operator">-</span> function<span class="token punctuation">(</span>quakes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sapply<span class="token punctuation">(</span>quakes$count<span class="token punctuation">,</span> function<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    count<span class="token operator">/</span><span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>substring<span class="token punctuation">(</span>stadata<span class="token punctuation">[</span><span class="token string">'V4'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>data<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token string">'station'</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>stations<span class="token punctuation">[</span>order<span class="token punctuation">(</span>stations$station<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>count<span class="token operator">&lt;</span><span class="token operator">-</span>sqldf<span class="token punctuation">(</span><span class="token string">"select station, count(*) from stad group by station"</span><span class="token punctuation">)</span>s<span class="token operator">&lt;</span><span class="token operator">-</span>merge<span class="token punctuation">(</span>count<span class="token punctuation">,</span>stations<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"station"</span><span class="token punctuation">)</span>names<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span>Shenyang <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span> addCircleMarkers<span class="token punctuation">(</span>s$gps_lon<span class="token punctuation">,</span> s$gps_lat<span class="token punctuation">,</span> popup <span class="token operator">=</span>paste<span class="token punctuation">(</span>s$station<span class="token punctuation">,</span>s$line<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color <span class="token operator">=</span> pal<span class="token punctuation">(</span>s$line<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span>getR<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token keyword">as</span><span class="token punctuation">.</span>character<span class="token punctuation">(</span>s$count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span> addTiles<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img alt="结果" data-src="https://img-blog.csdnimg.cn/20191205161411475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h2 id="第四步，使用plotly绘制（17-00-00-17-05-00）出站流量最多的五个站点的出站流量"><a href="#第四步，使用plotly绘制（17-00-00-17-05-00）出站流量最多的五个站点的出站流量" class="headerlink" title="第四步，使用plotly绘制（17:00:00-17:05:00）出站流量最多的五个站点的出站流量"></a>第四步，使用plotly绘制（17:00:00-17:05:00）出站流量最多的五个站点的出站流量</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##使用plotly绘制（17:00:00-17:05:00）出站流量最多的五个站点的出站流量。</span>library<span class="token punctuation">(</span>lubridate<span class="token punctuation">)</span>library<span class="token punctuation">(</span>sqldf<span class="token punctuation">)</span>library<span class="token punctuation">(</span>plotly<span class="token punctuation">)</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//systation.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//SY-20150401.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata$se<span class="token operator">&lt;</span><span class="token operator">-</span>period_to_seconds<span class="token punctuation">(</span>hms<span class="token punctuation">(</span>stadata$V3<span class="token punctuation">)</span><span class="token punctuation">)</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>filter<span class="token punctuation">(</span>stadata<span class="token punctuation">,</span>V6<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;</span> se<span class="token operator">>=</span><span class="token number">61200</span> <span class="token operator">&amp;</span> se<span class="token operator">&lt;=</span><span class="token number">61500</span><span class="token punctuation">)</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>substring<span class="token punctuation">(</span>stadata<span class="token punctuation">[</span><span class="token string">'V4'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>data<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token string">'station'</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>stations<span class="token punctuation">[</span>order<span class="token punctuation">(</span>stations$station<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>count<span class="token operator">&lt;</span><span class="token operator">-</span>sqldf<span class="token punctuation">(</span><span class="token string">"select station, count(*) from stad group by station"</span><span class="token punctuation">)</span>s<span class="token operator">&lt;</span><span class="token operator">-</span>merge<span class="token punctuation">(</span>count<span class="token punctuation">,</span>stations<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"station"</span><span class="token punctuation">)</span>names<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>st<span class="token operator">&lt;</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>st<span class="token operator">&lt;</span><span class="token operator">-</span>st<span class="token punctuation">[</span>order<span class="token punctuation">(</span><span class="token operator">-</span>s$count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>st<span class="token operator">&lt;</span><span class="token operator">-</span>st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>plot_ly<span class="token punctuation">(</span>st<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token operator">~</span>station<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token operator">~</span>count<span class="token punctuation">)</span></code></pre><p><img alt="结果" data-src="https://img-blog.csdnimg.cn/20191205161500783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command line is too long. Shorten command line for OOP or also for Application default configuration</title>
      <link href="/2019/12/19/command-line-is-too-long-shorten-command-line-for-oop-or-also-for-application-default-configuration/"/>
      <url>/2019/12/19/command-line-is-too-long-shorten-command-line-for-oop-or-also-for-application-default-configuration/</url>
      
        <content type="html"><![CDATA[<p>idea运行代码时出现<br><img alt data-src="https://img-blog.csdnimg.cn/20191214163545223.png" class="lozad"><br>解决：<br>在.idea文件夹里的workspace.xml中的</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PropertiesComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>标签下添加：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamic.classpath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><img alt data-src="https://img-blog.csdnimg.cn/20191214163643841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkSQL练习，分析篮球运动员数据</title>
      <link href="/2019/12/19/sparksql-lian-xi-fen-xi-lan-qiu-yun-dong-yuan-shu-ju/"/>
      <url>/2019/12/19/sparksql-lian-xi-fen-xi-lan-qiu-yun-dong-yuan-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="注：玄学编程，在第二题时设置local-4-时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age-count数量减少！淦！玄学"><a href="#注：玄学编程，在第二题时设置local-4-时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age-count数量减少！淦！玄学" class="headerlink" title="注：玄学编程，在第二题时设置local[4]时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age count数量减少！淦！玄学"></a>注：玄学编程，在第二题时设置local[4]时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age count数量减少！淦！玄学</h2><h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><p><img alt data-src="https://img-blog.csdnimg.cn/20191216142022899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br><img alt data-src="https://img-blog.csdnimg.cn/20191216142038310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br><img alt data-src="https://img-blog.csdnimg.cn/20191216142053781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h1 id="1-分析2016年-①②③④-属性-z-score-排名"><a href="#1-分析2016年-①②③④-属性-z-score-排名" class="headerlink" title="(1) 分析2016年 ①②③④ 属性 z-score 排名"></a>(1) 分析2016年 ①②③④ 属性 z-score 排名</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> zh<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 15:18 * */</span>object homework1 <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">nba</span><span class="token punctuation">(</span>Age<span class="token operator">:</span>Int<span class="token punctuation">,</span>`FG<span class="token operator">%</span>`<span class="token operator">:</span>Double<span class="token punctuation">,</span>`FT<span class="token operator">%</span>`<span class="token operator">:</span>Double<span class="token punctuation">,</span>`3P13`<span class="token operator">:</span>Double<span class="token punctuation">,</span>TRB<span class="token operator">:</span>Double<span class="token punctuation">,</span>Player<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不使用 `FG%`则会报错</span>  val root<span class="token operator">=</span><span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  val nbaPerdata_1 <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token string">"leagues_NBA_2016_per_game_per_game.csv"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"Age"</span><span class="token punctuation">,</span><span class="token string">"FG%"</span><span class="token punctuation">,</span><span class="token string">"FT%"</span><span class="token punctuation">,</span><span class="token string">"3P13"</span><span class="token punctuation">,</span><span class="token string">"TRB"</span><span class="token punctuation">)</span>  val nbas <span class="token operator">=</span> nbaPerdata_1<span class="token punctuation">.</span>as<span class="token punctuation">[</span>nba<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//抽取其中的"Player","Age","FG%","FT%","3P13","TRB"保存到dataset</span>  def <span class="token function">ans1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//FG%的z-score排名</span>    val `perAvgFG<span class="token operator">%</span>`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"FG%"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(FG%)` as perAvgFG"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgFG"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null值默认为最大,通过处理放到最后，若z-score相同则按照名字排序</span>    val avgFG <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`FG%`) as `avgFG%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有球员的FG%平均值</span>    val stdFG<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`FG%`) as `stdFG%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有球员的FG%的标准差</span>    `perAvgFG<span class="token operator">%</span>`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgFG - ${avgFG})/${stdFG} as `FG_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgFG排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvgFT<span class="token operator">%</span>`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"FT%"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(FT%)` as perAvgFT"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgFT"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avgFT <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`FT%`) as `avgFT%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val stdFT<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`FT%`) as `stdFT%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvgFT<span class="token operator">%</span>`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgFT - ${avgFT})/${stdFT} as `FT_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgFT排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvg3P13`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"3P13"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(3P13)` as perAvg3P13"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvg3P13"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avg3P13 <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`3P13`) as `avg3P13`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val std3P13<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`3P13`) as `std3P13`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvg3P13`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvg3P13 - ${avg3P13})/${std3P13} as `3P_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvg3P13排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvgTRB`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"TRB"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(TRB)` as perAvgTRB"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgTRB"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avgTRB <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`TRB`) as `avgTRB`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val stdTRB<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`TRB`) as `stdTRB`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvgTRB`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgTRB - ${avgTRB})/${stdTRB} as `TRB_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgTRB排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">ans1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为FG%的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为FT%的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为3P的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为TRB的z-score前10排名"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="2-分析自1980年以来每个年龄段参赛的数目"><a href="#2-分析自1980年以来每个年龄段参赛的数目" class="headerlink" title="(2) 分析自1980年以来每个年龄段参赛的数目"></a>(2) 分析自1980年以来每个年龄段参赛的数目</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> zh<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token punctuation">{</span>FileSystem<span class="token punctuation">,</span> Path<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token punctuation">{</span>DataFrame<span class="token punctuation">,</span> SparkSession<span class="token punctuation">}</span><span class="token keyword">import</span> zh<span class="token punctuation">.</span>homework1<span class="token punctuation">.</span><span class="token punctuation">{</span>root<span class="token punctuation">,</span> spark<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * * @author SmallHeroic * @Date 2019-12-16 10:44 * */</span>object homework2 <span class="token punctuation">{</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext  val root<span class="token operator">=</span><span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>  val TMP_PATH <span class="token operator">=</span> <span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\tmp\\basketball\\"</span>  val fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>TMP_PATH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">1980</span> to <span class="token number">2016</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    val yearStats <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span>s<span class="token string">"${root}leagues_NBA_$i*"</span><span class="token punctuation">)</span>    yearStats<span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span>s<span class="token string">"${TMP_PATH}/BasketballStatsWithYear/$i/"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val ageCount <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>s<span class="token string">"${TMP_PATH}/BasketballStatsWithYear/*"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>读取符合条件的所有文件      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"Age"</span><span class="token punctuation">.</span>asc_nulls_last<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>获取Age，<span class="token function">count</span><span class="token punctuation">(</span>Age<span class="token punctuation">)</span>    ageCount<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为自1980年以来每个年龄段参赛的数目"</span><span class="token punctuation">)</span>    <span class="token operator">/</span><span class="token operator">/</span>另一种实现 <span class="token operator">/</span><span class="token operator">*</span>  val DATA_PATH <span class="token operator">=</span> <span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>    var df<span class="token operator">:</span>DataFrame <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>第一行数据为列名      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>这是自动推断属性列的数据类型。      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>DATA_PATH <span class="token operator">+</span> <span class="token string">"leagues_NBA_1980_per_game_per_game.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>na<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">1981</span> to <span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      var tmp<span class="token operator">=</span>spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>第一行数据为列名        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>这是自动推断属性列的数据类型。        <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>DATA_PATH <span class="token operator">+</span> <span class="token string">"leagues_NBA_"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"_per_game_per_game.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>na<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      df<span class="token operator">=</span>df<span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    val result<span class="token operator">=</span>df<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea编写spark时过滤掉运行时的INFO信息</title>
      <link href="/2019/12/18/idea-bian-xie-spark-shi-guo-lu-diao-yun-xing-shi-de-info-xin-xi/"/>
      <url>/2019/12/18/idea-bian-xie-spark-shi-guo-lu-diao-yun-xing-shi-de-info-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>编写spark程序时，INFO信息导致过多 导致输出非常不好找，因此给他过滤掉</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>在代码中加入</p><pre class=" language-java"><code class="language-java">val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContextsc<span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//log中只会出现error级别的信息</span><span class="token comment" spellcheck="true">//sc.setLogLevel("WARN") //log中会出现warn和error级别的信息</span></code></pre><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><p>此方法需要把resources加入source Folder，如果没有在src/main/下新建folder：resources然后：<br><img alt data-src="https://img-blog.csdnimg.cn/20191217150420544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>在spark安装目录下的conf文件夹下找到log4j.properties.template复制到项目目录下的src/main/resources下并改名为log4j.properties，并修改将</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">INFO, console</span></code></pre><p>改成(改成WARN则log中会出现warn和error级别的信息）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">ERROR, console</span></code></pre><p><img alt data-src="https://img-blog.csdnimg.cn/20191217150030868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea中创建scala项目中插件无法加载的问题</title>
      <link href="/2019/12/05/jie-jue-idea-zhong-chuang-jian-scala-xiang-mu-zhong-cha-jian-wu-fa-jia-zai-de-wen-ti/"/>
      <url>/2019/12/05/jie-jue-idea-zhong-chuang-jian-scala-xiang-mu-zhong-cha-jian-wu-fa-jia-zai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>先创建<br><img alt data-src="https://pic.superbed.cn/item/5de8b48cf1f6f81c50c35a28.jpg" class="lozad"><br>在用idea时由于自己使用的是老师给的pom，出现了<br><img alt data-src="https://pic3.superbed.cn/item/5de8b337f1f6f81c50c320dd.jpg" class="lozad"><br>始终飘红，无法下载</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在依赖下载中加上</p><pre class=" language-{Xml}"><code class="language-{Xml}"><!-- https://mvnrepository.com/artifact/org.scala-tools/maven-scala-plugin -->    <dependency>      <groupid>org.scala-tools</groupid>      <artifactid>maven-scala-plugin</artifactid>      <version>2.11</version>    </dependency>    <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-eclipse-plugin -->    <dependency>      <groupid>org.apache.maven.plugins</groupid>      <artifactid>maven-eclipse-plugin</artifactid>      <version>2.5.1</version>    </dependency></code></pre><p>即先将这两个依赖下载，然后就不报错了（一定要对应scala Sdk版本）<br>也可以在<a href="https://mvnrepository.com/中找到这俩下载到本地maven仓库中。" target="_blank" rel="noopener">https://mvnrepository.com/中找到这俩下载到本地maven仓库中。</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-keysPoints</title>
      <link href="/2019/11/24/java-keyspoints/"/>
      <url>/2019/11/24/java-keyspoints/</url>
      
        <content type="html"><![CDATA[<h1 id="list、set、map："><a href="#list、set、map：" class="headerlink" title="list、set、map："></a>list、set、map：</h1><p>Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。<br>Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。Map不能包含重复的key，但是可以包含相同的value。</p><h1 id="数组排序："><a href="#数组排序：" class="headerlink" title="数组排序："></a>数组排序：</h1><p>法一：Arrays.sort()<br>Arrays.sort()排序方法在java中是最简单且最常用的排序方法</p><pre class=" language-Java"><code class="language-Java">int []arr1= {45,34,59,55};  Arrays.sort(arr1);//调用方法排序即可</code></pre><p>法二：冒泡排序<br>简单来说，冒泡排序就是重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p><pre class=" language-Java"><code class="language-Java">//array[]为待排序数组，n为数组长度void BubbleSort(int array[], int n){        int i, j, k;        for(i=0; i<n-1; i++)            for(j=0; j<n-1-i; j++)            {                            if(array[j]>array[j+1])                            {                                    k=array[j];                                    array[j]=array[j+1];                                    array[j+1]=k;                            }                    }}</code></pre><p>法三：选择排序<br>先找到最小元素所在位置的索引，然后将该元素与第一位上的元素进行交换。</p><pre class=" language-Java"><code class="language-Java">int arr3[]= {23,12,48,56,45};    for(int i=0;i<arr3.length;i++) {           int tem=i;//将数组中从i开始的最小的元素所在位置的索引赋值给tem         for(int j=i;j<arr3.length;j++) {                    if(arr3[j]<arr3[tem]) {                         tem=j;                      }               }           //上面获取了数组中从i开始的最小值的位置索引为tem，利用该索引将第i位上的元素与其进行交换         int temp1=arr3[i];          arr3[i]=arr3[tem];          arr3[tem]=temp1;    }</code></pre><p>法四：反转排序<br>将原数组按逆序排列</p><pre class=" language-Java"><code class="language-Java">//将数组第i位上的元素与第arr.length-i-1位上的元素进行交换int []arr4={23,12,48,56,45};   for(int i=0;i<arr4.length/2;i++) {          int tp=arr4[i];         arr4[i]=arr4[arr4.length-i-1];          arr4[arr4.length-i-1]=tp;   }</code></pre><p>法五：直接插入排序</p><pre class=" language-Java"><code class="language-Java">int []arr5={23,12,48,56,45};    for (int i = 1; i < arr5.length; i++) {         for (int j = i; j > 0; j--) {                   if (arr5[j - 1] > arr5[j]) {            //大的放后面                         int tmp = arr5[j - 1];                          arr5[j - 1] = arr5[j];                          arr5[j] = tmp;                      }               }   }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala-keypoints</title>
      <link href="/2019/11/17/quick-study-scala/"/>
      <url>/2019/11/17/quick-study-scala/</url>
      
        <content type="html"><![CDATA[<h1 id="一二章"><a href="#一二章" class="headerlink" title="一二章"></a>一二章</h1><p>a+b是a.+(b)的简写<br>通常来说，可以使用 <strong>a 方法 b</strong> 来简写 <strong>a.方法(b)</strong><br>scala不提供++，– 使用+=，-=。<br>不同于java，可自定义操作符<br>如果方法没有参数，不需要使用括号，如 “Bannan”.sorted 。<br>scala通配符为”_”,java”*”。<br>val s=”hello” s(4) 。此处是()而不是[]。（映射map）<br>res变量是val<br>用BigInt计算2的1024次方： BigInt(2).pow(1024)<br>不能x=y=1，x会为（）。<br>scala函数没有break和continue语句来结束循环。如需使用可以</p><ul><li>使用布尔型变量</li><li>使用嵌套函数，在其中return</li><li>使用breaks对象中的break方法，import scala.util.control.Breaks.__</li></ul><p>1 to 5 返回整数区间，不是参数seq序列，（1 to 5:<em>*)则返回参数序列,用(:</em><em>)转化为参数序列，(args:Int</em>)可变长度参数列表<br>没有返回值即返回值为unit的函数称为过程<br>throw表达式返回值类型为Nothing，在if/else表达式中，如果一个表达式的分支是Nothing，则它的类型就是另一分支的类型。<br>Scala赋值语句的值是unit类型，因此x=y=1结果为x=（）。</p><h2 id="1-probablePrime-6-Random"><a href="#1-probablePrime-6-Random" class="headerlink" title="1.probablePrime(6,Random)"></a>1.probablePrime(6,Random)</h2><p>Random是scala.util._中的包<br>probablePrime是scala.math.BigInt._伴生对象中的方法：<br>probablePrime(a,Random)<br>官方文档这么说的：Returns a positive BigInt that is probably prime, with the specified bitLength.但是翻译过来却让人不好理解，<br>实际上参数的意义是随机地从2^a和2^(a-1)之间的选取一个素数。</p><h2 id="2-BigInt-Random-nextInt-toString-36"><a href="#2-BigInt-Random-nextInt-toString-36" class="headerlink" title="2. BigInt(Random.nextInt).toString(36)"></a>2. BigInt(Random.nextInt).toString(36)</h2><p>随机获取一个值，并将它转成“36进制”的字符串。<br>36进制就是10个数字0-9加上a-z 26个字母组成的。就是在36个字符中随机选取几个组成串（正负也是随机的）。不信的话可以试试toString(11)，只会出现字母a别的不会出现。<br>测试时候打印出来的串多是6位也有5位的。</p><h2 id="3-Scala的”-”符号"><a href="#3-Scala的”-”符号" class="headerlink" title="3.Scala的”_”符号"></a>3.Scala的”_”符号</h2><ul><li>1、作为“通配符”，类似Java中的*。如import scala.math._</li><li>2、(<code>:_*</code>)作为一个整体，告诉编译器你希望将某个参数当作参数序列处理！例如val s = sum(1 to 5:_*)就是将1 to 5当作参数序列处理。</li><li><strong>3、指代一个集合中的每个元素</strong>。例如我们要在一个Array a中筛出偶数，并乘以2，可以用以下办法：a.foreach(2<em><code>_</code>),a.filter(<code>_</code>%2==0).map(2</em><code>_</code>)。又如要对缓冲数组ArrayBuffer b排序，可以这样：val bSorted = b.sorted(_)</li><li>4、在元组中，可以用方法_1, _2, _3访问组员。如a._2。其中句点可以用空格替代。</li><li>5、使用模式匹配可以用来获取元组的组员，例如val (first, second, third) = t但如果不是所有的部件都需要，那么可以在不需要的部件位置上使用_。比如上一例中val (first, second,<code>_</code>) = t</li><li>6、还有一点，下划线_代表的是某一类型的默认值。对于Int来说，它是0。对于Double来说，它是0.0。对于引用类型，它是null。</li></ul><h2 id="和-分别代表什么"><a href="#和-分别代表什么" class="headerlink" title="_ 和 _*分别代表什么"></a><code>_</code> 和 _*分别代表什么</h2><p>将函数 赋值给一个变量，注意语法</p><pre class=" language-java"><code class="language-java">val max4 <span class="token operator">=</span> max3 _</code></pre><p>如果函数的参数，函数体（右边），有且仅使用一次，参数可以使用下划线_代替</p><pre class=" language-java"><code class="language-java"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--litter--"</span><span class="token punctuation">)</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"litter"</span><span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>作为函数的参数<br>一个匿名的函数传递给一个方法或者函数的时候，scala会尽量推断出参数类型。例如一个完整的匿名函数作为参数可以写为</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> def <span class="token function">compute</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>Double<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>compute<span class="token operator">:</span> <span class="token punctuation">(</span>f<span class="token operator">:</span> Double <span class="token operator">=</span><span class="token operator">></span> Double<span class="token punctuation">)</span>Double<span class="token comment" spellcheck="true">//传递一个匿名函数作为compute的参数</span>scala<span class="token operator">></span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>res1<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">6.0</span></code></pre><p>如果参数x在=&gt;右侧只出现一次，可以用_替代这个参数，简写为</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> _<span class="token punctuation">)</span>res2<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">6.0</span></code></pre><p>更常见的使用方式为</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>res0<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>IndexedSeq<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>res1<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>IndexedSeq<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span></code></pre><p>以上所说的为一元函数，那么对于二元函数，即有两个参数x和y的函数，是如何使用_的？可以参考sortWith方法def sortWith(lt: (T, T) ⇒ Boolean): Array[T]法的参数官方解释为</p><pre><code>the comparison function which tests whether its first argument precedes its second argument in the desired ordering.</code></pre><p>这个方法需要的参数是一个二元函数，而且函数参数的类型为T，例如</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortWith</span><span class="token punctuation">(</span>_ <span class="token operator">&lt;</span> _<span class="token punctuation">)</span>res0<span class="token operator">:</span> List<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>可以用_分别表示二元函数中的参数x和y。</p><p>作为标识符<br>例如定义一个变量val _num = 123</p><p>作为通配符<br>import语句<br>例如import scala.math._<br>case语句<br>例如</p><pre class=" language-java"><code class="language-java">object MatchTest <span class="token keyword">extends</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>  def <span class="token function">matchTest</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> x match <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"one"</span>    <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"two"</span>    <span class="token keyword">case</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"many"</span>  <span class="token punctuation">}</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">matchTest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>元组（tuple）<br>例如</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以定义一个tuple</span>scala<span class="token operator">></span> val t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">)</span>t<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Double<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span>Fred<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以用_1，_2，_3访问这个元组</span>scala<span class="token operator">></span> t<span class="token punctuation">.</span>_1res3<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>scala<span class="token operator">></span> t<span class="token punctuation">.</span>_2res4<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3.14</span>scala<span class="token operator">></span> t<span class="token punctuation">.</span>_3res5<span class="token operator">:</span> String <span class="token operator">=</span> Fred</code></pre><p>可以通过模式匹配获取元组的元素，当不需要某个值的时候可以使用_替代，例如</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> val t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">)</span>t<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Double<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span>Fred<span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token function">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> tfirst<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>second<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3.14</span>scala<span class="token operator">></span> <span class="token function">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token operator">=</span> tfirst<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span></code></pre><p>下划线和其他符号组合的使用方式<br>下划线与等号（_=）<br>自定义setter方法，请参见《Overriding def with var in Scala》</p><p>下划线与星号（_*）<br>1.变长参数<br>例如定义一个变长参数的方法sum，然后计算1-5的和，可以写为</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> def <span class="token function">sum</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Int<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token operator">|</span> var result <span class="token operator">=</span> <span class="token number">0</span>     <span class="token operator">|</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>arg <span class="token operator">&lt;</span><span class="token operator">-</span> args<span class="token punctuation">)</span> result <span class="token operator">+=</span> arg     <span class="token operator">|</span> result     <span class="token operator">|</span> <span class="token punctuation">}</span>sum<span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> Int<span class="token operator">*</span><span class="token punctuation">)</span>Intscala<span class="token operator">></span> val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>s<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">15</span></code></pre><p>但是如果使用这种方式就会报错</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span> error<span class="token operator">:</span> type mismatch<span class="token punctuation">;</span> found   <span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Range<span class="token punctuation">.</span>Inclusive required<span class="token operator">:</span> Int       val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span>                     <span class="token operator">^</span></code></pre><p>这种情况必须在后面写上: _*将1 to 5转化为参数序列</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">15</span></code></pre><p>2.变量声明中的模式<br>例如，下面代码分别将arr中的第一个和第二个值赋给first和second</p><pre class=" language-java"><code class="language-java">scala<span class="token operator">></span> val arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>arr<span class="token operator">:</span> Array<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>scala<span class="token operator">></span> val <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> _<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> arrscala<span class="token operator">></span> val <span class="token function">Array</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> _<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> arrfirst<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>second<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2</span></code></pre><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><pre class=" language-Scala"><code class="language-Scala">var a:Array = Array[Int](4)var b:ArrayBuffer = ArrayBuffer[Int]() //长度可变,可以对数组排序，不可以对数组缓冲排序a.toBufferb.toArraya.indices//获取下标//遍历数组，两个元素一跳0 until a.length by 2//遍历数组，从尾端开始0 until a.length by -1 //也可以用转置reserve//数组转换for...yield..或filter...map...var c = for(i <- a) yield 2*ivar d = a.filter(_%2==0).map(2*_)</code></pre><p>创建一个由Java.util.TimeZone.getAvailableIDs返回的时区集合，判断条件是它们在美洲。去掉”America/“前缀并排序</p><pre class=" language-Scala"><code class="language-Scala">def main (args: Array[String])= {　　val a=TimeZone()　　a.foreach(println)}def TimeZone()={　　val arr=java.util.TimeZone.getAvailableIDs()　　val tmp=for(ele <-arr if ele.startsWith("America/")) yield {　　　　ele.drop("America/".length)　　}　　scala.util.Sorting.quickSort(tmp)　　tmp}</code></pre><p>比较数组是否相等：</p><pre class=" language-Scala"><code class="language-Scala">val a = Array(1,2,3)val b = Array(1,2,3)a==b //返回false，没法接受我也没法解释a sameElements b //返回true。也可写成 a.sameElements(b)</code></pre><h1 id="四-Map"><a href="#四-Map" class="headerlink" title="四 Map"></a>四 Map</h1><p>如果想要按照插入顺序访问所有键，则使用scala.collection.mutable.LinkedHashMap<a href=""></a><br>若只是使用scala.collection.mutable.Map<a href=""></a>,访问则会根据键的哈希码来划定位置,访问顺序无法确定。<br>若想要按顺序依次访问映射中的键，可以用scala.collection.mutable.SortedMap<a href=""></a><br>元组: 用_1,_2,_3…访问元组<br>元组的下标是从1开始的,而list是从0开始的</p><pre class=" language-Scala"><code class="language-Scala">val t = (1,"e",4.6) //t的类型为Tuple3[Int,String,Double]val second=t._2 //将second设置为"e",也可以写成t _2。用空格不是句号,空格不可省略</code></pre><p>while和do…while..没有返回值，如需使用返回值则应加入变量，如果在其中需要递归则应加入return使其有返回值。<br>只有被private或者fianl修饰的方法 才能使用注解检验是否尾递归 @scala.annotation.tailrec<br>隐式转换函数是以implicit关键字作用于带有单个参数的函数上。这种函数将会自动应用，将值从一种类型转换为另外一种类型。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop实验</title>
      <link href="/2019/11/07/hadoop-1-homework/"/>
      <url>/2019/11/07/hadoop-1-homework/</url>
      
        <content type="html"><![CDATA[<h1 id="hadoop实验"><a href="#hadoop实验" class="headerlink" title="hadoop实验"></a>hadoop实验</h1><h1 id="hive实验"><a href="#hive实验" class="headerlink" title="hive实验"></a>hive实验</h1><h1 id="hbase实验"><a href="#hbase实验" class="headerlink" title="hbase实验"></a>hbase实验</h1><p><a href="https://gitee.com/smallheroic/blog/tree/master/hadoop%E5%AE%9E%E9%AA%8C" target="_blank">下载链接</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/09/11/hello-world/"/>
      <url>/2019/09/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Hello-hexo！！"><a href="#Hello-hexo！！" class="headerlink" title="Hello hexo！！"></a>Hello hexo！！</h3><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
