<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java常见RuntimeException</title>
      <link href="/20200506/61661.html"/>
      <url>/20200506/61661.html</url>
      
        <content type="html"><![CDATA[<h1 id="java常见RuntimeException及原因"><a href="#java常见RuntimeException及原因" class="headerlink" title="java常见RuntimeException及原因"></a>java常见RuntimeException及原因</h1><p>1） <strong>java.lang.NullPointerException</strong> 空指针异常；出现原因：调用了未经初始化的对象或者是不存在的对象。<br>2） <strong>java.lang.ClassNotFoundException</strong> 指定的类找不到；出现原因：类的名称和路径加载错误；通常都是程序试图通过字符串来加载某个类时可能引发异常。<br>3） <strong>java.lang.NumberFormatException</strong> 字符串转换为数字异常；出现原因：字符型数据中包含非数字型字符。<br>4） <strong>java.lang.IndexOutOfBoundsException</strong> 数组角标越界异常，常见于操作数组对象时发生。<br>5） <strong>java.lang.IllegalArgumentException</strong> 方法传递参数错误。<br>6） <strong>java.lang.ClassCastException</strong> 数据类型转换异常。<br>7） <strong>java.lang.NoClassDefFoundException</strong> 未找到类定义错误。<br>8） <strong>SQLException SQL</strong> 异常，常见于操作数据库时的 SQL 语句错误。<br>9） <strong>java.lang.InstantiationException</strong> 实例化异常。<br>10） <strong>java.lang.NoSuchMethodException</strong> 方法不存在异常。  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识整理</title>
      <link href="/20200505/20414.html"/>
      <url>/20200505/20414.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="抽象类可以不包含抽象方法-包含抽象方法的类一定是抽象类。"><a href="#抽象类可以不包含抽象方法-包含抽象方法的类一定是抽象类。" class="headerlink" title="抽象类可以不包含抽象方法, 包含抽象方法的类一定是抽象类。"></a>抽象类可以不包含抽象方法, 包含抽象方法的类一定是抽象类。</h3><h3 id="String-、-StringBuilder-、-StringBuffer-的区别？"><a href="#String-、-StringBuilder-、-StringBuffer-的区别？" class="headerlink" title="String 、 StringBuilder 、 StringBuffer 的区别？"></a>String 、 StringBuilder 、 StringBuffer 的区别？</h3><p>Java 平台提供了两种类型的字符串： String 和 StringBuffer/StringBuilder，它们都可以储存和操作字符串， 区别<br>如下。<br>1） String 是只读字符串，也就意味着 String 引用的字符串内容是不能被改变的。 初学者可能会有这样的误解：</p><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> “abc”；str <span class="token operator">=</span> “bcd”<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如上，字符串 str 明明是可以改变的呀！其实不然， str 仅仅是一个引用对象，它指向一个字符串对象“abc”。第<br>二行代码的含义是让 str 重新指向了一个新的字符串“bcd”对象，而“abc”对象并没有任何改变，只不过该对象已<br>经成为一个不可及对象罢了。<br>2） StringBuffer/StringBuilder 表示的字符串对象可以直接进行修改。<br>3） StringBuilder 是 Java5 中引入的，它和 StringBuffer 的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方法都没有被 synchronized 修饰，因此它的效率理论上也比 StringBuffer 要高。  </p><p>StringBuffer 和 StringBuilder 的功能基本一样，只是<strong>StringBuffer 是线程安全的，而 StringBuilder 不是线程安全的</strong>。因此， StringBuilder 的效率会更高。  </p><h3 id="Vector-ArrayList-LinkedList的区别"><a href="#Vector-ArrayList-LinkedList的区别" class="headerlink" title="Vector,ArrayList,LinkedList的区别"></a>Vector,ArrayList,LinkedList的区别</h3><p>1.<strong>ArrayList</strong>是最常用的List实现类，内部是通过<strong>数组</strong>实现的，它允许对元素进行<strong>快速随机访问</strong>。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。当从ArrayList的中间位置插入或者删除元素时，<strong>需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</strong><br>2.<strong>Vector</strong>与ArrayList一样，也是通过数组实现的，<strong>不同的是它支持线程的同步</strong>，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。<br>3.LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈主要包含两个操作，主要是入栈和出栈（插入和读取并删除）操作。<br>栈既可以用数组实现，也可以用链表实现，用数组实现的栈称为顺序栈，用链表实现的栈称为链式栈。</p><h4 id="利用栈实现浏览器的前进后退功能"><a href="#利用栈实现浏览器的前进后退功能" class="headerlink" title="利用栈实现浏览器的前进后退功能"></a>利用栈实现浏览器的前进后退功能</h4><p>使用两个栈 X 和 Y，把首次浏览的页面依次压入栈 X，当点击后退按钮时，再依次从栈 X 中出栈，并将出栈的数据依次放入栈 Y。当点击前进按钮时，依次从栈 Y 中取出数据，放入栈 X 中。当栈 X 中没有数据时，那就说明没有页面可以继续后退浏览了。当栈 Y 中没有数据，那就说明没有页面可以点击前进按钮浏览了。</p><h3 id="int和Integer的区别"><a href="#int和Integer的区别" class="headerlink" title="int和Integer的区别"></a>int和Integer的区别</h3><p>1.int是基本数据类型，Integer是int的包装类就是将int类型包装成Object对象；<br>2.Integer变量必须实例化后才能使用；int变量不需要；<br>3.Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ；<br>4.Integer的默认值是null；int的默认值是0。</p><p>深入：</p><ul><li><strong>两个通过new生成的Integer变量永远是不相等的。因为new生成的是两个对象，其内存地址不同。</strong></li><li><strong>Integer与new Integer不会相等</strong>。因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同。 </li><li><strong>两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false。</strong><ul><li>java在编译Integer i = 127的时候,被翻译成 Integer i = Integer.valueOf(127);  java API中对Integer类型的valueOf的定义如下，对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127这个Integer对象进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了。</li></ul></li><li><strong>Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true。</strong>（因为包装类Integer和基本数据类型int比较时，java会自动拆箱为int，然后进行比较，实际上就变为两个int变量的比较）</li></ul><h3 id="为什么有了int还要Integer"><a href="#为什么有了int还要Integer" class="headerlink" title="为什么有了int还要Integer"></a>为什么有了int还要Integer</h3><ul><li>对象封装有很多好处，可以把属性也就是数据跟处理这些数据的方法结合在一起，比如Integer就有parseInt()等方法来专门处理int型相关的数据。　　</li><li>另一个非常重要的原因就是在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList集合类就只能以类作为他的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。所以Integer的存在是很必要的</li></ul><h3 id="char类型不使用内置函数转换成int（char-‘0’"><a href="#char类型不使用内置函数转换成int（char-‘0’" class="headerlink" title="char类型不使用内置函数转换成int（char-‘0’)"></a>char类型不使用内置函数转换成int（char-‘0’)</h3><pre><code>char a = '9';int res = a-'0';必须要进行这一操作才能转化res才会等于9</code></pre><h2 id="hashMap底层实现原理及面试问题"><a href="#hashMap底层实现原理及面试问题" class="headerlink" title="hashMap底层实现原理及面试问题"></a>hashMap底层实现原理及面试问题</h2><ol><li>hashmap的工作原理：</li></ol><p>HashMap的数据结构为 数组+链表（jdk7)/数组+链表+红黑树（jdk8)</p><p>为什么采用这种结构来存储元素呢？数组的特点：查询效率高，插入，删除效率低。链表的特点：查询效率低，插入删除效率高。在HashMap底层使用数组加（链表或红黑树）的结构完美的解决了数组和链表的问题，使得查询和插入，删除的效率都很高。</p><p><strong>HashMap基于hashing原理，通过put()、get()存储和获取对象。当我们将键值传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，然后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会储存在链表的下一个节点中。 HashMap在每个链表节点中储存键值对对象。</strong></p><p>当两个不同的键对象的hashcode相同时会发生什么？ 它们会储存在同一个bucket位置的链表中。键对象的equals()方法用来找到键值对。</p><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><p>1.最好情况最坏情况平均情况：</p><p>快速排序的<strong>时间性能</strong>取决于快速排序递归的深度，可以用递归树来描述递归算法的执行情况。如图9‐9‐7所示，它是{50,10,90,30, 70,40,80,60,20}在快速排序过程中的递归过程。由于我们的第一个关键字是50，正好是待排序的序列的中间值，因此递归树是平衡的，此时性能也比较好。</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505172050.jpg" alt="cafd6b26763a392ad0fbef50aa12d620.jpeg"></p><p><strong>在最优情况下</strong>，Partition每次都划分得很均匀，如果排序n个关键字，其递归树的深度就为[log2n]+1（[x]表示不大于x的最大整数），即仅需递归log2n次，需要时间为T（n）的话，第一次Partiation应该是需要对整个数组扫描一遍，做n次比较。然后，获得的枢轴将数组一分为二，那么各自还需要T（n/2）的时间（注意是最好情况，所以平分两半）。于是不断地划分下去，我们就有了下面的不等式推断。<br>T（n）≤2T（n/2）&nbsp;+n，T（1）=0 &nbsp;<br>T（n）≤2（2T（n/4）+n/2）&nbsp;+n=4T（n/4）+2n &nbsp;<br>T（n）≤4（2T（n/8）+n/4）&nbsp;+2n=8T（n/8）+3n &nbsp;<br>…… &nbsp;<br>T（n）≤nT（1）+（log2n）×n=&nbsp;O(nlogn)&nbsp;<br>也就是说，在最优的情况下，快速排序算法的时间复杂度为O(nlogn)。<br><strong>在最坏的情况下</strong>，待排序的序列为正序或者逆序，每次划分只得到一个比上一次划分少一个记录的子序列，注意另一个为空。如果递归树画出来，它就是一棵斜树。此时需要执行n‐1次递归调用，且第i次划分需要经过n‐i次关键字的比较才能找到第i个记录，也就是枢轴的位置，因此比较次数为<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505172641.png" alt="019df2dc2b2d692086a68b3e7bf8fbac.png"></p><p>&nbsp;，最终其时间复杂度为O(n2)。<br><strong>平均情况</strong>，，设枢轴的关键字应该在第k的位置（1≤k≤n），那么：<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505172244.jpg" alt="ee1956b6600ee3e40e2b0a8624fdbcba.jpeg"><br>&nbsp;由数学归纳法可证明，其数量级为O(nlogn)。</p><p>就<strong>空间复杂度</strong>来说，主要是递归造成的栈空间的使用，<br>最好情况，递归树的深度为log2n，其空间复杂度也就为O(logn)，<br>最坏情况，需要进行n‐1递归调用，其空间复杂度为O(n)，<br>平均情况，空间复杂度也为O(logn)。<br>可惜的是，由于关键字的比较和交换是跳跃进行的，因此，快速排序是一种不稳定的排序方法。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="1-JVM运行时区域："><a href="#1-JVM运行时区域：" class="headerlink" title="1.JVM运行时区域："></a>1.JVM运行时区域：</h3><p>Java虚拟机的运行时区域构成图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505172828.png" alt=""></p><p>线程共享区域：</p><p>Java堆：<br>（1）Java堆是java虚拟机所管理的内存中最大的一块；<br>（2）被所有线程共享区域，在虚拟机启动时创建，唯一目的存放对象实例，<strong>存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)，jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身；</strong><br>（3）堆区是gc的主要区域，通常情况下分为两个区块年轻代和年老代。更细一点年轻代又分为Eden区最要放新创建对象，From survivor 和 To survivor 保存gc后幸存下的对象，默认情况下各自占比 8:1:1。 进一步划分的目的是为了更还的内存回收或者更快的内存分配；<br>（4）会有异常OutOfMemoneyError；</p><p>方法区：<br><strong>又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。</strong><br>（1）被所有线程共享区域，用于存放已被虚拟机加载的类信息，常量，静态变量等数据。被Java虚拟机描述为堆的一个逻辑部分。习惯是也叫它永久代（仅仅是因为HotSpot虚拟机选择把GC分代收集扩展至方法区）；<br>（2）垃圾回收很少光顾这个区域，不过也是需要回收的，主要针对常量池回收，类型卸载。<br>（3）会有异常OutOfMemoneyError；</p><p>线程私有区域：</p><p>程序计数器：<br>（1）当前线程所执行的字节码指令的行号指示器，如分支、跳转、循环、异常处理、线程恢复都依赖程序计数器实现；<br>（2）Java多线程是通过线程轮流切换并分配CPU时间片来执行的，为了线程切换后能恢复到正确的位置，所以每个线程都有一个单独的程序计数器，所以程序计数器是私有的；<br>（3）Jvm没有规定OutOfMemory的区块；</p><p>栈：<br><strong>每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中；每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。；栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。</strong><br>1.Java虚拟机栈：<br>（1）为执行Java方法服务‘<br>（2）当线程创建的时候，为线程分配一块内存区域，在线程执行的过程中，每个方法的执行都会创建一个栈帧，用于存放局部变量表、操作栈、动态链接，方法出口等。每个方法从被调用，直到被执行完。对应着一个栈帧在虚拟机中从入栈到出栈的过程；<br>（3）会有两种异常StackOverFlowError和 OutOfMemoneyError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoneyError；<br>（4）它是线程私有的，生命周期与线程相同；<br>2.本地方法栈：<br>（1）与java虚拟机栈所发挥的作用非常相似，它们之间的区别在于java虚拟机栈执行java方法服务的，本地方法栈是执行本地方法服务的</p><h3 id="程序运行顺序"><a href="#程序运行顺序" class="headerlink" title="程序运行顺序"></a>程序运行顺序</h3><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505173024.png" alt="2a57dc92f06be337261541033f712803.png"></p><h3 id="为什么main方法是静态的（static）"><a href="#为什么main方法是静态的（static）" class="headerlink" title="为什么main方法是静态的（static）"></a>为什么main方法是静态的（static）</h3><ul><li>正因为main方法是静态的，JVM调用这个方法就不需要创建任何包含这个main方法的实例。</li><li>因为C和C++同样有类似的main方法作为程序执行的入口。</li><li>如果main方法不声明为静态的，JVM就必须创建main类的实例，因为构造器可以被重载，JVM就没法确定调用哪个main方法。</li><li>静态方法和静态数据加载到内存就可以直接调用而不需要像实例方法一样创建实例后才能调用，如果main方法是静态的，那么它就会被加载到JVM上下文中成为可执行的方法。<h3 id="为什么main方法是公有的（public）"><a href="#为什么main方法是公有的（public）" class="headerlink" title="为什么main方法是公有的（public）"></a>为什么main方法是公有的（public）</h3> Java指定了一些可访问的修饰符如：private、protected、public，任何方法或变量都可以声明为public，Java可以从该类之外的地方访问。因为main方法是公共的，JVM就可以轻松的访问执行它。</li></ul><h3 id="为什么main方法没有返回值（Void）"><a href="#为什么main方法没有返回值（Void）" class="headerlink" title="为什么main方法没有返回值（Void）"></a>为什么main方法没有返回值（Void）</h3><p>   因为main返回任何值对程序都没任何意义，所以设计成void，意味着main不会有任何值返回</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="在java中有哪些锁？该如何进行分类呢？"><a href="#在java中有哪些锁？该如何进行分类呢？" class="headerlink" title="在java中有哪些锁？该如何进行分类呢？"></a>在java中有哪些锁？该如何进行分类呢？</h3><p>1.共享锁/排他锁<br>  共享锁和排他锁是从同一时刻是否允许多个线程持有该锁的角度来划分。<br>  共享锁允许同一时刻多个线程进入持有锁，访问临界区资源。而排他锁就是通常意义上的锁，同一时刻只允许一个线程访问临界资源。对于共享锁，主要是指对数据库读操作中的读锁，在读写资源的时候如果没有线程持有写锁和请求写锁，则此时允许多个线程持有读锁。<br>2.乐观锁/悲观锁<br>  主要用于数据库数据的操作中，而对于线程锁中较为少见。<br>  悲观锁和乐观锁是一种加锁思想。<br>  对于乐观锁，在进行数据读取的时候不会加锁，而在进行写入操作的时候会判断一下数据是否被其它线程修改过，如果修改则更新数据，如果没有则继续进行数据写入操作。乐观锁不是系统中自带的锁，而是一种数据读取写入思想。应用场景例如：在向数据库中插入数据的时候，先从数据库中读取记录修改版本标识字段，如果该字段没有发生变化（没有其他线程对数据进行写操作）则执行写入操作，如果发生变化则重新计算数据。<br>  对于悲观锁，无论是进行读操作还是进行写操作都会进行加锁操作。对于悲观锁，如果并发量较大则比较耗费资源，当然保证了数据的安全性。<br>3.可复入锁/不可复入<br>  这两个概念是从同一个线程在已经持有锁的前提下能否再次持有锁的角度来区分的。<br>  对于可重入锁，如果该线程已经获取到锁且未释放的情况下允许再次获取该锁访问临界区资源。此种情况主要是用在递归调用的情况下和不同的临界区使用相同的锁的情况下。<br>  对于不可重入锁，则不允许同一线程在持有锁的情况下再次获取该锁并访问临界区资源。对于不可重入锁，使用的时候需要小心以免造成死锁。<br>4.公平锁/非公平锁<br>  这两个概念主要使用线程获取锁的顺序角度来区分的。<br>  对于公平锁，所有等待的线程按照按照请求锁的先后循序分别依次获取锁。<br>  对于非公平锁，等待线程的线程获取锁的顺序和请求的先后不是对应关系。有可能是随机的获取锁，也有可能按照其他策略获取锁，总之不是按照FIFO的顺序获取锁。<br>  在使用ReentrantLock的时候可以通过构造方法主动选择是实现公平锁还是非公平锁。<br>5.自旋锁/非自旋锁<br>  这两种概念是从线程等待的处理机制来区分的。<br>  自旋锁在进行锁请求等待的时候不进行wait挂起，不释放CPU资源，执行while空循环。直至获取锁访问临界区资源。适用于等待锁时间较短的情景，如果等待时间较长，则会耗费大量的CPU资源。而如果等待时间较短则可以节约大量的线程切换资源。<br>  非自旋锁在进行锁等待的时候会释放CPU资源，可以通多sleep wait 或者CPU中断切换上下文，切换该线程。在线程等待时间较长的情况下可以选择此种实现机制。<br>  除此之外还有一种介于两者之间的锁机制——自适应自旋锁。当线程进行等待的时候先进性自旋等待，在自旋一定时间(次数)之后如果依旧没有持有锁则挂起等待。在jvm中synchronized锁已经使用该机制进行处理锁等待的情况。<br>6.也可以通过信号量实现锁</p><h3 id="什么是CAS？"><a href="#什么是CAS？" class="headerlink" title="什么是CAS？"></a>什么是CAS？</h3><p>  CAS是compare and swap的缩写，即我们所说的比较交换。cas是一种基于锁的操作，而且是乐观锁。在java中锁分为乐观锁和悲观锁。悲观锁是将资源锁住，等一个之前获得锁的线程释放锁之后，下一个线程才可以访问。而乐观锁采取了一种宽泛的态度，通过某种方式不加锁来处理资源，比如通过给记录加version来获取数据，性能较悲观锁有很大的提高。<br>　　 CAS操作包含三个操作数 ——内存位置（V）、预期原值（A）和新值(B)。如果内存地址里面的值和A的值是一样的，那么就将内存里面的值更新成B。CAS是通过无限循环来获取数据的，若果在第一轮循环中，a线程获取地址里面的值被b线程修改了，那么a线程需要自旋，到下次循环才有可能机会执行。java.util.concurrent.atomic 包下的类大多是使用CAS操作来实现的( AtomicInteger,AtomicBoolean,AtomicLong)。</p><h3 id="CAS的问题？"><a href="#CAS的问题？" class="headerlink" title="CAS的问题？"></a>CAS的问题？</h3><p>1）CAS容易造成ABA问题。一个线程a将数值改成了b，接着又改成了a，此时CAS认为是没有变化，其实是已经变化过了，而这个问题的解决方案可以使用版本号标识，每操作一次version加1。在java5中，已经提供了AtomicStampedReference来解决问题。<br>2） 不能保证代码块的原子性，CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用synchronized了。<br>3）CAS造成CPU利用率增加。之前说过了CAS里面是一个循环判断的过程，如果线程一直没有获取到状态，cpu资源会一直被占用。</p><h3 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h3><p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。重排序分3种类型，分别为编译器优化重排序、指令级并行重排序、内存系统重排序。</p><p>1）编译器优化的重排序。<br>编译器在不改变单线程程序语义的前提下，可以重新安排语句 的执行顺序。</p><p>2）指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p><p>3）内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="数据可靠性保证"><a href="#数据可靠性保证" class="headerlink" title="数据可靠性保证"></a>数据可靠性保证</h3><p>当Producer向Leader发送数据时，可以通过acks参数设置数据可靠性的级别<br>0: 不论写入是否成功，server不需要给Producer发送Response，如果发生异常，server会终止连接，触发Producer更新meta数据；<br>1: Leader写入成功后即发送Response，此种情况如果Leader fail，会丢失数据，<strong>默认设置</strong><br>-1: 等待所有ISR接收到消息后再给Producer发送Response，这是最强保证<br>（ISR全称是“In-Sync Replicas”，也就是保持同步的副本，他的含义就是，跟Leader始终保持同步的Follower有哪些）<br><em>仅设置acks=-1也不能保证数据不丢失，当Isr列表中只有Leader时，同样有可能造成数据丢失。要保证数据不丢除了设置acks=-1, 还要保证ISR的大小大于等于2，具体参数设置：</em><br>request.required.acks：设置为-1 等待所有ISR列表中的Replica接收到消息后采算写成功；min.insync.replicas: 设置为大于等于2，保证ISR中至少有两个Replica</p><p>Producer要在吞吐率和数据可靠性之间做一个权衡</p><h3 id="数据一致性保证"><a href="#数据一致性保证" class="headerlink" title="数据一致性保证"></a>数据一致性保证</h3><p>一致性定义：若某条消息对client可见，那么即使Leader挂了，在新Leader上数据依然可以被读到<br>  HW-HighWaterMark: client可以从Leader读到的最大msg offset，即对外可见的最大offset， HW=max(replica.offset)<br>  对于Leader新收到的msg，client不能立刻消费，Leader会等待该消息被所有ISR中的replica同步后，更新HW，此时该消息才能被client消费，这样就保证了如果Leader fail，该消息仍然可以从新选举的Leader中获取。<br>  对于来自内部Broker的读取请求，没有HW的限制。同时，Follower也会维护一份自己的HW，Folloer.HW = min(Leader.HW, Follower.offset)</p><h3 id="Kafka为什么吞吐量达，速度快"><a href="#Kafka为什么吞吐量达，速度快" class="headerlink" title="Kafka为什么吞吐量达，速度快"></a>Kafka为什么吞吐量达，速度快</h3><p>Kafka虽然是基于磁盘做的数据存储，但却具有高性能、高吞吐、低延时的特点，其吞吐量动辄几万、几十上百万。</p><h4 id="1-顺序读写："><a href="#1-顺序读写：" class="headerlink" title="1.顺序读写："></a>1.顺序读写：</h4><p>Kafka就是使用了磁盘顺序读写来提升的性能。Kafka的message是不断追加到本地磁盘文件末尾的，而不是随机的写入，这使得Kafka写入吞吐量得到了显著提升 。</p><h4 id="2-Page-Cache："><a href="#2-Page-Cache：" class="headerlink" title="2.Page Cache："></a>2.Page Cache：</h4><p>通过操作系统的Page Cache，Kafka的读写操作基本上是基于内存的，读写速度得到了极大的提升。<br> 为了优化读写性能，Kafka利用了操作系统本身的Page Cache，就是利用操作系统自身的内存而不是JVM空间内存。这样做的好处有：<br>  1）避免Object消耗：如果是使用 Java 堆，Java对象的内存消耗比较大，通常是所存储数据的两倍甚至更多。<br>  2）避免GC问题：随着JVM中数据不断增多，垃圾回收将会变得复杂与缓慢，使用系统缓存就不会存在GC问题</p><h4 id="3-零拷贝："><a href="#3-零拷贝：" class="headerlink" title="3.零拷贝："></a>3.零拷贝：</h4><p>linux操作系统 “零拷贝” 机制使用了sendfile方法， 允许操作系统将数据从Page Cache 直接发送到网络，只需要最后一步的copy操作将数据复制到 NIC 缓冲区， 这样避免重新复制数据 。</p><p>通过这种 “零拷贝” 的机制，Page Cache 结合 sendfile 方法，Kafka消费端的性能也大幅提升。这也是为什么有时候消费端在不断消费数据时，我们并没有看到磁盘io比较高，此刻正是操作系统缓存在提供数据。</p><h4 id="4-分区分段-索引"><a href="#4-分区分段-索引" class="headerlink" title="4.分区分段+索引"></a>4.分区分段+索引</h4><p><strong>Kafka的message是按topic分类存储的，topic中的数据又是按照一个一个的partition即分区存储到不同broker节点。每个partition对应了操作系统上的一个文件夹，partition实际上又是按照segment分段存储的。这也非常符合分布式系统分区分桶的设计思想。</strong><br>通过这种分区分段的设计，<strong>Kafka的message消息实际上是分布式存储在一个一个小的segment中的</strong>，每次文件操作也是直接操作的segment。为了进一步的查询优化，Kafka又默认为分段后的数据文件建立了索引文件，就是文件系统上的.index文件。这种分区分段+索引的设计，不仅提升了数据读取的效率，同时也提高了数据操作的并行度。</p><h4 id="5-批量读写"><a href="#5-批量读写" class="headerlink" title="5.批量读写"></a>5.批量读写</h4><p>假设网络带宽为10MB/S，一次性传输10MB的消息比传输1KB的消息10000万次显然要快得多。</p><h4 id="6-批量压缩"><a href="#6-批量压缩" class="headerlink" title="6.批量压缩"></a>6.批量压缩</h4><p>如果每个消息都压缩，但是压缩率相对很低，所以Kafka使用了批量压缩，即将多个消息一起压缩而不是单个消息压缩<br>Kafka允许使用递归的消息集合，批量的消息可以通过压缩的形式传输并且在日志中也可以保持压缩格式，直到被消费者解压缩<br>Kafka支持多种压缩协议，包括Gzip和Snappy压缩协议</p><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505173714.png" alt=""></p><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><h4 id="HDFS中的block、packet、chunk"><a href="#HDFS中的block、packet、chunk" class="headerlink" title="HDFS中的block、packet、chunk"></a>HDFS中的block、packet、chunk</h4><p>block<br>文件上传前需要分块，这个块就是block，一般为128MB。它是最大的一个单位。</p><p>packet<br>packet是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。</p><p>chunk<br>chunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）</p><p>例如，在client端向DataNode传数据的时候，HDFSOutputStream会有一个chunk buff，写满一个chunk后，会计算校验和并写入当前的chunk。之后再把带有校验和的chunk写入packet，当一个packet写满后，packet会进入dataQueue队列，其他的DataNode就是从这个dataQueue获取client端上传的数据并存储的。同时一个DataNode成功存储一个packet后之后会返回一个ack packet，放入ack Queue中。</p><h4 id="HDFS写流程"><a href="#HDFS写流程" class="headerlink" title="HDFS写流程"></a>HDFS写流程</h4><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505173817.png" alt="3c9d415adbb29d3c21ce0f3eafa70d37.png"><br>1.client向NameNode发出写文件请求。<br>2.NameNode检查是否已存在文件、检查权限。若通过检查，直接先将操作写入EditLog，并返回输出流对象。<br>（注：WAL，write ahead log，先写Log，再写内存，因为EditLog记录的是最新的HDFS客户端执行所有的写操作。如果后续真实写操作失败了，由于在真实写操作之前，操作就被写入EditLog中了，故EditLog中仍会有记录，我们不用担心后续client读不到相应的数据块，因为在第5步中DataNode收到块后会有一返回确认信息，若没写成功，发送端没收到确认信息，会一直重试，直到成功）<br>3.client端按128MB的块切分文件。<br>4.client将NameNode返回的分配的可写的DataNode列表和Data数据一同发送给最近的第一个DataNode节点，此后client端和NameNode分配的多个DataNode构成pipeline管道，client端向输出流对象中写数据。client每向第一个DataNode写入一个packet，这个packet便会直接在pipeline里传给第二个、第三个…DataNode。<br>（注：并不是写好一个块或一整个文件后才向后分发）<br>5.每个DataNode写完一个packet后，会返回acks确认信息。<br>6.写完数据，关闭输出流。<br>7.client发送完成信号给NameNode。<br>（注：发送完成信号的时机取决于集群是强一致性还是最终一致性，强一致性则需要所有DataNode写完后才向NameNode汇报。最终一致性则其中任意一个DataNode写完后就能单独向NameNode汇报，HDFS一般情况下都是强调强一致性）</p><h4 id="HDFS读流程"><a href="#HDFS读流程" class="headerlink" title="HDFS读流程"></a>HDFS读流程</h4><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505173955.png" alt="6277e32d9c8cdf998116b59ecaf87fc8.png"><br>1.client访问NameNode，查询元数据信息，获得这个文件的数据块位置列表，返回输入流对象。<br>2.client就近挑选一台datanode服务器，请求建立输入流 。<br>3.DataNode向输入流中中写数据，以packet为单位来校验。<br>4.关闭输入流</p><h4 id="读写过程中数据完整性保证"><a href="#读写过程中数据完整性保证" class="headerlink" title="读写过程中数据完整性保证"></a>读写过程中数据完整性保证</h4><p>通过校验和。因为每个chunk中都有一个校验位，一个个chunk构成packet，一个个packet最终形成block，故可在block上求校验和。</p><p>HDFS 的client端即实现了对 HDFS 文件内容的校验和 (checksum) 检查。当客户端创建一个新的HDFS文件时候，分块后会计算这个文件每个数据块的校验和，此校验和会以一个隐藏文件形式保存在同一个 HDFS 命名空间下。当client端从HDFS中读取文件内容后，它会检查分块时候计算出的校验和（隐藏文件里）和读取到的文件块中校验和是否匹配，如果不匹配，客户端可以选择从其他 Datanode 获取该数据块的副本。</p><h3 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h3><h4 id="数据倾斜发生时的现象："><a href="#数据倾斜发生时的现象：" class="headerlink" title="数据倾斜发生时的现象："></a>数据倾斜发生时的现象：</h4><p>1、绝大多数task执行得都非常快，但个别task执行的极慢。<br>2、原本能正常执行的Spark作业，某天突然爆出OOM（内存溢出）异常。观察异常栈，是我们写的业务代码造成的</p><h4 id="数据倾斜发生的原理"><a href="#数据倾斜发生的原理" class="headerlink" title="数据倾斜发生的原理 :"></a>数据倾斜发生的原理 :</h4><p>在进行shuffle的时候，必须将各个节点上相同的Key拉取到某个节点上的一个task来进行处理，比如按照key进行聚合或者join操作。如果某个key对应的数据量特别大的话，会发生数据倾斜。比如大部分key对应的10条数据，但个别key却对应了100万条数据，那么大部分task会只分配到10条数据，而个别task可能会分配了100万数据。整个spark作业的运行进度是由运行时间最长的那个task决定的。<br>因此出现数据倾斜的时候，spark作业看起来会运行得非常缓慢，甚至可能因为某个task处理的数据量过大导致OOM。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title=" 解决方案"></a><u> 解决方案</u></h4><p>1、<strong>增加jvm内存</strong>,这适用于第一种情况(唯一值非常少，极少数值有非常多的记录值(唯一值少于几千)),这种情况下,往往只能通过硬件的手段来进行调优,增加jvm内存可以显著的提高运行效率。</p><p>2、<strong>增加reduce的个数</strong>,这适用于第二种情况(唯一值比较多，这个字段的某些值有远远多于其他值的记录数，但是它的占比也小于百分之一或千分之一),我们知道,这种情况下,最容易造成的结果就是大量相同key被partition到一个分区,从而一个reduce执行了大量的工作,而如果我们增加了reduce的个数,这种情况相对来说会减轻很多,毕竟计算的节点多了,就算工作量还是不均匀的,那也要小很多。</p><p>3、<strong>自定义分区</strong>,这需要用户自己继承partition类,指定分区策略,这种方式效果比较显著。</p><p>4、<strong>重新设计key</strong>,有一种方案是在map阶段时给key加上一个随机数,有了随机数的key就不会被大量的分配到同一节点(小几率),待到reduce后再把随机数去掉即可。</p><p>5、<strong>使用combinner合并</strong>,combinner是在map阶段,reduce之前的一个中间阶段,在这个阶段可以选择性的把大量的相同key数据先进行一个合并,可以看做是local reduce,然后再交给reduce来处理,这样做的好处很多,即减轻了map端向reduce端发送的数据量(减轻了网络带宽),也减轻了map端和reduce端中间的shuffle阶段的数据拉取数量(本地化磁盘IO速率),推荐使用这种方法。</p><h4 id="如何定位发生数据倾斜的代码"><a href="#如何定位发生数据倾斜的代码" class="headerlink" title="如何定位发生数据倾斜的代码"></a>如何定位发生数据倾斜的代码</h4><p>1、<strong>数据倾斜只会发生在shuffle中</strong>，下面是常用的可能会触发shuffle操作的算子：distinct、groupByKey、reduceByKey、aggregateByKey、join、cogroup、repartition等。出现数据倾斜时，可能就是代码中使用了这些算子的原因 </p><p>2、通过观察spark UI的节目定位数据倾斜发生在第几个stage中，如果是用yarn-client模式提交，那么本地是可以直接看到log的，可以在log中找到当前运行到了第几个stage;如果用yarn-cluster模式提交，可以通过Spark Web UI 来查看当前运行到了第几个stage。此外，无论是使用了yarn-client模式还是yarn-cluster模式，我们都可以在Spark Web UI 上深入看一下当前这个stage各个task分配的数据量，从而进一步确定是不是task分配的数据不均匀导致了数据倾斜。 </p><p>3、根据之前学的stage的划分算法定位到极有可能发生数据倾斜的代码</p><h4 id="详细解决方案"><a href="#详细解决方案" class="headerlink" title="详细解决方案"></a>详细解决方案</h4><h5 id="一、使用Hive-ETL-Extraction-Transformation-Loading-提取、转换和加载-预处理数据"><a href="#一、使用Hive-ETL-Extraction-Transformation-Loading-提取、转换和加载-预处理数据" class="headerlink" title="一、使用Hive ETL(Extraction-Transformation-Loading:提取、转换和加载) 预处理数据"></a>一、使用Hive ETL(Extraction-Transformation-Loading:提取、转换和加载) 预处理数据</h5><p>方案使用场景：<br>导致数据倾斜的是Hive表。如果该Hive表中的数据本身很不均匀，而且业务场景需要频繁的使用Spark对Hive表执行某个分析操作，那么比较适合使用这种技术方案。 </p><p>思路：<br>此时可以评估，是否可以通过Hive来进行数据预处理。即通过Hive ETL 预先对数据按照Key进行聚合，或者是预先和其他表进行join，然后再Spark作业中针对的数据源就是预处理后的Hive表。此时由于数据已经预先进行过聚合或者join操作了，那么在Spark作业中也就不需要使用原先的shuffle类算子执行这类操作了。 </p><p>原理：<br>从根源上解决了数据倾斜，因为彻底避免了在Spark中执行shuffle类算子。<br>但是因为毕竟数据本身就存在分布不均匀的问题，所以在Hive ETL中进行groubBy或者join等shuffle操作时，还是会发生数据倾斜，导致Hive ETL速度很慢。只是避免了Spark程序发生数据倾斜。 </p><p>经验：<br>在一些Java系统与Spark结合使用的项目中，会出现Java代码频繁调用Spark作业的场景，而且对Spark作业的执行性能要求很高，就比较适合使用这种方案。将数据倾斜提前到上游的Hive ETL，每天仅执行一次，只有那一次是比较慢的，而之后每次Java调用Spark作业时，执行速度都会很快，能够提供更好的用户体验。</p><h5 id="二、过滤少数导致倾斜的key"><a href="#二、过滤少数导致倾斜的key" class="headerlink" title="二、过滤少数导致倾斜的key"></a>二、过滤少数导致倾斜的key</h5><p>方案使用场景：<br>若发现导致倾斜的key就少数几个，并且对计算本身的影响并不大。比如99%的key对应10条数据，但只有一个key对应100万数据。 </p><p>思路：<br>若判断少数几个数据量特别多的key对作业的执行和计算结果不是那么特别重要，可以直接过滤掉那几个key。如在Spark SQL中就可以使用where子句过滤掉这些key,或者在Spark Core 中对RDD执行filter算子过滤掉这些key。如果需要每次作业执行时，动态判定哪些key的数据量最多然后过滤，可以使用sample算子对RDD进行采样，然后计算每个key的数量，取数据量最多的key过滤即可。 </p><p>缺点：<br>适用场景不多，大多数情况下，导致倾斜的key还是很多的，并不是只有少数几个。</p><h5 id="三、提高shuffle操作的并行度"><a href="#三、提高shuffle操作的并行度" class="headerlink" title="三、提高shuffle操作的并行度"></a>三、提高shuffle操作的并行度</h5><p>方案使用场景：<br>若我们必须要面对数据倾斜问题，要这么使用。 </p><p>思路：<br>在对RDD执行shuffle算子时，给shuffle算子传入一个参数，如reduceByKey（1000），该参数设置了这个shuffle算子执行时shuffle read task 的数量。对于Spark SQL中的shuffle类语句，如 groupBy 、join 等需要设置一个参数，即spark.sql.shuffle.partitions。该参数代表了shuffle read task 的并行度，默认值是200。 </p><p>原理：<br>增加shuffle read task 的数量，可以让原本分配给一个task的多个key分配给多个task，从而让每个task处理比原来更少的数据。举例来说，如果原本有5个key，每个key对应10条数据，这5个key都是分配给一个task的，那么这个task就要处理50条数据。而增加了shuffle read task以后，每个task就分配到一个key，即每个task就处理10条数据，那么自然每个task的执行时间都会变短了。 </p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174103.png" alt=""></p><p>实现起来比较简单，可以有效缓解和减轻数据倾斜的影响。<br>只是缓解了数据倾斜而已，没有彻底根除问题，根据实践经验来看，其效果有限。</p><h5 id="四、两阶段聚合（局部聚合-全局聚合）"><a href="#四、两阶段聚合（局部聚合-全局聚合）" class="headerlink" title="四、两阶段聚合（局部聚合+全局聚合）"></a>四、两阶段聚合（局部聚合+全局聚合）</h5><p>方案使用场景：<br>对RDD执行reduceByKey等聚合类shuffle算子或者在Spark SQL中使用group by语句进行分组聚合时，比较适用这种方案。 </p><p>思路：<br>这个方案的核心实现思路就是进行两阶段聚合。第一次是局部聚合，先给每个key都打上一个随机数，比如10以内的随机数，此时原先一样的key就变成不一样的了，比如(hello, 1) (hello, 1) (hello, 1) (hello, 1)，就会变成(1_hello, 1) (1_hello, 1) (2_hello, 1) (2_hello, 1)。接着对打上随机数后的数据，执行reduceByKey等聚合操作，进行局部聚合，那么局部聚合结果，就会变成了(1_hello, 2) (2_hello, 2)。然后将各个key的前缀给去掉，就会变成(hello,2)(hello,2)，再次进行全局聚合操作，就可以得到最终结果了，比如(hello, 4)。 </p><p>方案优点：<br>对于聚合类的shuffle操作导致的数据倾斜，效果是非常不错的。通常都可以解决掉数据倾斜，或者至少是大幅度缓解数据倾斜，将Spark作业的性能提升数倍以上。 </p><p>方案缺点：<br>仅仅适用于聚合类的shuffle操作，适用范围相对较窄。如果是join类的shuffle操作，还得用其他的解决方案。</p><h5 id="五、将reduce-join-转为map-join"><a href="#五、将reduce-join-转为map-join" class="headerlink" title="五、将reduce join 转为map join"></a>五、将reduce join 转为map join</h5><p>方案使用场景：<br>在对RDD使用join类操作，或者是在Spark SQL中使用join语句时，而且join操作中的一个RDD<br>或表的数据量比较小（几百M或者一两G）。 </p><p>实现思路：<br>不使用join算子进行连接操作，而使用Broadcast变量与map类算子实现join操作，进而完全规避掉shuffle类操作，彻底避免数据倾斜的发生和出现。将较小RDD中的数据直接通过collect算子拉取到Driver端的内存中来，然后对其创建一个Broadcast变量；接着对另外RDD执行map类算子，在算子函数内，从Broadcast变量中获取较小RDD 的全量数据，与当前RDD的每一条数据按照连接key进行比对，如果连接key相同的话，那么就将两个RDD的数据用你需要的方式连接起来。 </p><p>实现原理：<br>普通的join是会走shuffle过程的，而一旦shuffle，就相当于会将相同key的数据拉取到一个shuffle read task中再进行join，此时就是reduce join。但是如果一个RDD是比较小的，则可以采用广播小RDD全量数据+map算子来实现与join同样的效果，也就是mao join ，而此时不会发生shuffle操作，也就不会发生数据倾斜。 </p><p>方案优点：<br>对join操作导致的数据倾斜，效果非常好，因为根本就不会发生shuffle，也就根本不会发生数据倾斜。 </p><p>方案缺点：<br>适用场景较少，因为这个方案只适用于一个大表和一个小表的情况。毕竟我们需要将小表进行广播，此时会比较消耗内存资源，driver和每个Executor内存中都会驻留一份小RDD的全量数据。如果我们广播出去的RDD数据比较大，比如10G以上，那么就可能发生内存溢出了。因此并不适合两个都是大表的情况。</p><h5 id="六、采样倾斜key并分拆join操作"><a href="#六、采样倾斜key并分拆join操作" class="headerlink" title="六、采样倾斜key并分拆join操作"></a>六、采样倾斜key并分拆join操作</h5><p>方案使用场景:<br>两个RDD/Hive表进行join的时候，如果数据量都比较大，无法采用上第五点解决方案，那么此时可以看一下两个RDD/Hive表中key的分布情况，若出现数据倾斜，是因为其中某一个RDD/Hive表中的少数几个key的数据量过大，而另一个中的所有key都分布比较均匀，那么采用这个解决方案是比较合适的。 </p><p>实现思路:<br>对包含少数几个数据量过大的key的那个RDD，通过sample算子采样出一份样本来，然后统计一下每个key的数据量，计算出数据量最大的是哪几个key。<br>然后将这几个key对应数据从原来的RDD中拆分出来，形成一个单独的RDD，并给每个key打上n以内的随机数作为前缀，而不会导致倾斜的大部分key形成另外一个RDD。</p><p>接着将需要join的另一个RDD，也就是过滤出来的那几个倾斜key对应的数据并形成一个单独的RDD，将每条数据膨胀成n条数据，这n条数据都按顺序附加一个0~n的前缀，不会导致倾斜的大部分key也形成另外一个RDD<br>（此时一共生存了四个RDD：两个key有倾斜的RDD，两个正常RDD）<br>再将附加了随机前缀的独立RDD与另一个膨胀n倍的独立RDD进行join，此时就可以将原先相同的key打散成n份，分散到多个task中去进行join。<br>而另外两普通的RDD就照常join即可。<br>最后将两次join的结果使用union算子合并起来即可。<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174207.png" alt=""><br>原理：<br>对于join导致的数据倾斜，如果只是某几个key导致了倾斜，可以将少数几个key拆分为独立RDD，并附加随机前缀打散成n份去进行join，此时这几个key对于的数据就不会集中在少数几个task上，而是分散到多个task进行join。 </p><p>优点:<br>对于join导致的数据倾斜，如果只是某几个key导致了倾斜，此方法可以用最有效的方式打散key进行join，且只需要针对少数倾斜的key对应的数据进行扩容n倍，不需要对全量数据进行扩容，避免占用过多内存。 </p><p>缺点:<br>若key特别多，则不合适。</p><h5 id="七、使用随机前缀和扩容RDD进行join"><a href="#七、使用随机前缀和扩容RDD进行join" class="headerlink" title="七、使用随机前缀和扩容RDD进行join"></a>七、使用随机前缀和扩容RDD进行join</h5><p>方案使用场景:<br>若在进行join操作时，RDD中有大量的key导致数据倾斜的时候。 </p><p>思路:<br>首先查看RDD／Hive表中的数据分布情况，找到造成数据倾斜的RDD/Hive表，比如有多个key都对应了万条数据。<br>然后将该RDD 的每条数据都打上一个n以内的随即前缀。<br>同时对另外一个正常的RDD进行扩容，将每条数据都扩容成n条数据，扩容出来的每条数据都依次打上一个0~n的前缀<br>最后将两个处理后的RDD进行join即可。 </p><p>原理:<br>将原先一样的key通过附加前缀变成不一样的key，然后就看可以将这些处理后的“不同的key”分散到多个task中那个去处理，而不是让一个task去处理大量相同的key。此方法与方法六的区别在于，有大量倾斜key的情况，没法将部分key拆分出来单独处理，因此只能对整个RDD 进行数据扩容，对资源要求很高。 </p><p>缺点:<br>更多的是缓解数据倾斜，而不是彻底避免，而且需要对整个RDD进行扩容，对内存资源要求较高。</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><strong>MySQL中的索引的存储类型有两种：B+TREE、HASH</strong>,hash索引适合单值查询，b+tree索引既适合单值查询又适合范围查询</p><h4 id="MySQL中索引的优点和缺点和使用原则"><a href="#MySQL中索引的优点和缺点和使用原则" class="headerlink" title="MySQL中索引的优点和缺点和使用原则　　　"></a>MySQL中索引的优点和缺点和使用原则　　　</h4><p>优点：　　　<br>1、所有的MySql列类型(字段类型)都可以被索引，也就是可以给任意字段设置索引　　　<br>2、大大加快数据的查询速度　　　<br>缺点：　　　<br>1、创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加　　　<br>2、索引也需要占空间，我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上线值　　　<br>3、当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度。<br>使用原则：　　　<br>通过上面说的优点和缺点，我们应该可以知道，并不是每个字段度设置索引就好，也不是索引越多越好，而是需要自己合理的使用。　　　<br>1、对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引，　　　2、数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果。　　　<br>3、在一同值少的列上(字段上)不要建立索引，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，在一个字段上不同值较多可以建立索引。</p><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><p><strong>索引是在存储引擎中实现的，也就是说不同的存储引擎，会使用不同的索引</strong></p><p>1.索引我们分为四类来讲 单列索引(普通索引，唯一索引，主键索引)、组合索引、全文索引、空间索引、　　      </p><ul><li><p>1.1、单列索引：一个索引只包含单个列，但一个表中可以有多个单列索引。</p><ul><li>1.1.1、普通索引：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。　　　　   </li><li>1.1.2、唯一索引：索引列中的值必须是唯一的，但是允许为空值，　　　　   </li><li>1.1.3、主键索引：是一种特殊的唯一索引，不允许有空值。　　      </li></ul></li><li><p>1.2、组合索引:在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。</p><ul><li>1.3、全文索引:全文索引，只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有”你是个靓仔，靓女 …” 通过靓仔，可能就可以找到该条记录。这里说的是可能，因为全文索引的使用涉及了很多细节，我们只需要知道这个大概意思，如果感兴趣进一步深入使用它，那么看下面测试该索引时，会给出一个博文，供大家参考。　  </li><li>1.4、空间索引:空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有四种，GEOMETRY、POINT、LINESTRING、POLYGON。在创建空间索引时，使用SPATIAL关键字。要求，引擎为MyISAM，创建空间索引的列，必须将其声明为NOT NULL。</li></ul><h4 id="联合索引最左匹配原则"><a href="#联合索引最左匹配原则" class="headerlink" title="联合索引最左匹配原则"></a>联合索引最左匹配原则</h4><p>索引的底层是一颗B+树，那么联合索引当然还是一颗B+树，只不过联合索引的健值数量不是一个，而是多个。构建一颗B+树只能根据一个值来构建，因此数据库依据联合索引最左的字段来构建B+树。<br>例子：假如创建一个（a,b)的联合索引，那么它的索引树是这样的<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174240.png" alt="ea26ec6f5e83b7dbeed1287b44210a8b.png"></p></li></ul><p>可以看到a的值是有顺序的，1，1，2，2，3，3，而b的值是没有顺序的1，2，1，4，1，2。所以b = 2这种查询条件没有办法利用索引，因为联合索引首先是按a排序的，b是无序的。</p><p>同时我们还可以发现在a值相等的情况下，b值又是按顺序排列的，但是这种顺序是相对的。所以最左匹配原则遇上范围查询就会停止，剩下的字段都无法使用索引。例如a = 1 and b = 2 a,b字段都可以使用索引，因为在a值确定的情况下b是相对有序的，而a&gt;1and b=2，a字段可以匹配上索引，但b值不可以，因为a的值是一个范围，在这个范围中b是无序的。</p><p><strong>最左匹配原则：最左优先，以最左边的为起点任何连续的索引都能匹配上。同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配。</strong></p><p> 假如建立联合索引（a,b,c）</p><p>1 全值匹配查询时</p><pre><code>select * from table_name where a = '1' and b = '2' and c = '3' select * from table_name where b = '2' and a = '1' and c = '3' select * from table_name where c = '3' and b = '2' and a = '1' ......</code></pre><p>用到了索引</p><p>where子句几个搜索条件顺序调换不影响查询结果，因为Mysql中有查询优化器，会自动优化查询顺序 </p><p>2 匹配左边的列时</p><pre><code>select * from table_name where a = '1' select * from table_name where a = '1' and b = '2'  select * from table_name where a = '1' and b = '2' and c = '3'</code></pre><p>都从最左边开始连续匹配，用到了索引</p><pre><code>select * from table_name where  b = '2' select * from table_name where  c = '3'select * from table_name where  b = '1' and c = '3' </code></pre><p>这些没有从最左边开始，最后查询没有用到索引，用的是全表扫描 </p><pre><code>select * from table_name where a = '1' and c = '3' </code></pre><p>如果不连续时，只用到了a列的索引，b列和c列都没有用到 </p><p> 3 匹配列前缀</p><p>如果列是字符型的话它的比较规则是先比较字符串的第一个字符，第一个字符小的哪个字符串就比较小，如果两个字符串第一个字符相通，那就再比较第二个字符，第二个字符比较小的那个字符串就比较小，依次类推，比较字符串。</p><p>如果a是字符类型，那么前缀匹配用的是索引，后缀和中缀只能全表扫描了</p><pre><code>select * from table_name where a like 'As%'; //前缀都是排好序的，走索引查询select * from table_name where  a like '%As'//全表查询select * from table_name where  a like '%As%'//全表查询</code></pre><p>4 匹配范围值</p><pre><code>select * from table_name where  a &gt; 1 and a &lt; 3</code></pre><p>可以对最左边的列进行范围查询</p><pre><code>select * from table_name where  a &gt; 1 and a &lt; 3 and b &gt; 1;</code></pre><p>多个列同时进行范围查找时，只有对索引最左边的那个列进行范围查找才用到B+树索引，也就是只有a用到索引，在1&lt;a&lt;3的范围内b是无序的，不能用索引，找到1&lt;a&lt;3的记录后，只能根据条件 b &gt; 1继续逐条过滤</p><p> 5 精确匹配某一列并范围匹配另外一列</p><p>如果左边的列是精确查找的，右边的列可以进行范围查找</p><pre><code>select * from table_name where  a = 1 and b &gt; 3;</code></pre><p> a=1的情况下b是有序的，进行范围查找走的是联合索引</p><p>6 排序</p><p>一般情况下，我们只能把记录加载到内存中，再用一些排序算法，比如快速排序，归并排序等在内存中对这些记录进行排序，有时候查询的结果集太大不能在内存中进行排序的话，还可能暂时借助磁盘空间存放中间结果，排序操作完成后再把排好序的结果返回客户端。Mysql中把这种再内存中或磁盘上进行排序的方式统称为文件排序。文件排序非常慢，但如果order子句用到了索引列，就有可能省去文件排序的步骤</p><pre><code>select * from table_name order by a,b,c limit 10;</code></pre><p>因为b+树索引本身就是按照上述规则排序的，所以可以直接从索引中提取数据，然后进行回表操作取出该索引中不包含的列就好了</p><p>order by的子句后面的顺序也必须按照索引列的顺序给出，比如</p><pre><code>select * from table_name order by b,c,a limit 10;</code></pre><p> 这种颠倒顺序的没有用到索引</p><pre><code>select * from table_name order by a limit 10;select * from table_name order by a,b limit 10;</code></pre><p>这种用到部分索引</p><pre><code>select * from table_name where a =1 order by b,c limit 10;</code></pre><p>联合索引左边列为常量，后边的列排序可以用到索引</p><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><p>（1）条件是or,如果还想让or条件生效，给or每个字段加上索引</p><p>（2）like查询，以%开头</p><p>（3）内部函数</p><p>（4）对索引列进行计算</p><p>（5）is null不会用，is not null 会用</p><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><ul><li>INNER JOIN（内连接，或等值连接）：获取两个表中字段匹配关系的记录；</li><li>LEFT JOIN（左连接）：获取左表中的所有记录，即使在右表没有对应匹配的记录；</li><li>RIGHT JOIN（右连接）：与 LEFT JOIN 相反，用于获取右表中的所有记录，即使左表没有对应匹配的记录。</li></ul><p>现有两个表，本节后续的用法示例，均是对这两个表进行操作的，表的信息如下：</p><pre><code>mysql&gt; select * from roles;+---------+------------+----------+| role_id | occupation | camp     |+---------+------------+----------+|       1 | warrior    | alliance ||       2 | paladin    | alliance ||       3 | rogue      | Horde    |+---------+------------+----------+3 rows in set (0.01 sec)mysql&gt; mysql&gt; select * from mount_info;+----------+------------+---------+| mount_id | mount_name | role_id |+----------+------------+---------+|        1 | horse      |       1 ||        2 | sheep      |       1 ||        3 | sheep      |       4 |+----------+------------+---------+3 rows in set (0.01 sec)</code></pre><h4 id="INNER-JOIN-join"><a href="#INNER-JOIN-join" class="headerlink" title="INNER JOIN=join"></a>INNER JOIN=join</h4><pre><code>mysql&gt; SELECT a.role_id, a.occupation, a.camp, b.mount_name FROM roles a INNER JOIN mount_info b ON a.role_id = b.role_id;//等价于：SELECT a.role_id, a.occupation, a.camp, b.mount_name FROM roles a, mount_info b WHERE a.role_id = b.role_id;+---------+------------+----------+------------+| role_id | occupation | camp     | mount_name |+---------+------------+----------+------------+|       1 | warrior    | alliance | horse      ||       1 | warrior    | alliance | sheep      |+---------+------------+----------+------------+2 rows in set (0.01 sec)</code></pre><p>INNER JOIN 的表关联模型如下：<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174315.png" alt="941fde446161f80e9ba1c451eac1b34b.png"><br>上图中绿色的部分，为两表的内关联结果。</p><h4 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h4><pre><code>mysql&gt; SELECT a.role_id, a.occupation, a.camp, b.mount_name FROM roles a LEFT JOIN mount_info b ON a.role_id = b.role_id;+---------+------------+----------+------------+| role_id | occupation | camp     | mount_name |+---------+------------+----------+------------+|       1 | warrior    | alliance | horse      ||       1 | warrior    | alliance | sheep      ||       2 | paladin    | alliance | NULL       ||       3 | rogue      | Horde    | NULL       |+---------+------------+----------+------------+4 rows in set (0.01 sec)在上述结果中能够看到，上面执行的SQL语句读取左边的数据表 roles 的所有的（SELECT）字段数据，即使在右侧表 mount_info 中没有对应的 role_id 字段值。</code></pre><p>LEFT JOIN 的表关联模型如下：<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174351.png" alt="1074641fc4c57c943698d87aad585be4.png"><br>上图中绿色的部分，为两表的左关联结果。</p><h4 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h4><pre><code>mysql&gt; SELECT a.role_id, a.occupation, a.camp, b.mount_name FROM roles a RIGHT JOIN mount_info b ON a.role_id = b.role_id;+---------+------------+----------+------------+| role_id | occupation | camp     | mount_name |+---------+------------+----------+------------+|       1 | warrior    | alliance | horse      ||       1 | warrior    | alliance | sheep      ||    NULL | NULL       | NULL     | sheep      |+---------+------------+----------+------------+3 rows in set (0.01 sec)在上述结果中能够看到，上面执行的SQL语句读取右侧的数据表 mount_info 的所有的（SELECT）字段数据，即使在左侧表 roles 中没有对应的 role_id 字段值。</code></pre><p>RIGHT JOIN 的表关联模型如下：<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174642.png" alt="46d3f71aeacf5f75815dbc2901dc0fd1.png"><br>上图中绿色的部分，为两表的右关联结果。</p><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>union 缺省在合并结果集后消除重复项,</p><p>union all 指定在合并结果集后保留重复项, </p><pre><code>比如A表的数据是 A{ 1,4,5,9} B{2,3,4,5}那我执行此语句 select * from A union select * from B 那结果是{1,2,3,4,5,9}如果执行select * from A union all select * from B 结果是{1,2,3,4,4,5,5,9}</code></pre><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>1.共享锁/排他锁<br>  共享锁和排他锁是从同一时刻是否允许多个线程持有该锁的角度来划分。<br>  共享锁允许同一时刻多个线程进入持有锁，访问临界区资源。而排他锁就是通常意义上的锁，同一时刻只允许一个线程访问临界资源。对于共享锁，主要是指对数据库读操作中的读锁，在读写资源的时候如果没有线程持有写锁和请求写锁，则此时允许多个线程持有读锁。<br>2.乐观锁/悲观锁<br>  主要用于数据库数据的操作中，而对于线程锁中较为少见。<br>  悲观锁和乐观锁是一种加锁思想。<br>  对于乐观锁，在进行数据读取的时候不会加锁，而在进行写入操作的时候会判断一下数据是否被其它线程修改过，如果修改则更新数据，如果没有则继续进行数据写入操作。乐观锁不是系统中自带的锁，而是一种数据读取写入思想。应用场景例如：在向数据库中插入数据的时候，先从数据库中读取记录修改版本标识字段，如果该字段没有发生变化（没有其他线程对数据进行写操作）则执行写入操作，如果发生变化则重新计算数据。<br>  对于悲观锁，无论是进行读操作还是进行写操作都会进行加锁操作。对于悲观锁，如果并发量较大则比较耗费资源，当然保证了数据的安全性。</p><h3 id="Mysql事务四大特性"><a href="#Mysql事务四大特性" class="headerlink" title="Mysql事务四大特性"></a>Mysql事务四大特性</h3><p><code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持久性</code>，下面再对这事务的四大特性做一个描述</p><ul><li><code>原子性(Atomicity)</code>: 原子性指的就是 MySQL 中的包含事务的操作要么<code>全部成功</code>、要么全部<code>失败回滚</code>，因此事务的操作如果成功就必须要全部应用到数据库，如果操作失败则不能对数据库有任何影响。</li></ul><blockquote><p>“</p><p>这里涉及到一个概念，什么是 MySQL 中的事务？</p><p>事务是一组操作，组成这组操作的各个单元，要不全都成功要不全都失败，这个特性就是事务。</p><p>在 MySQL 中，事务是在引擎层实现的，只有使用 <code>innodb</code> 引擎的数据库或表才支持事务。</p></blockquote><ul><li><code>一致性(Consistency)</code>：一致性指的是一个事务在执行前后其状态一致。比如 A 和 B 加起来的钱一共是 1000 元，那么不管 A 和 B 之间如何转账，转多少次，事务结束后两个用户的钱加起来还得是 1000，这就是事务的一致性。</li><li><code>持久性(Durability)</code>: 持久性指的是一旦事务提交，那么发生的改变就是永久性的，即使数据库遇到特殊情况比如故障的时候也不会产生干扰。</li><li><code>隔离性(Isolation)</code>：隔离性需要重点说一下，当多个事务同时进行时，就有可能出现<code>脏读(dirty read)</code>、<code>不可重复读(non-repeatable read)</code>、<code>幻读(phantom read)</code> 的情况，为了解决这些并发问题，提出了隔离性的概念。</li></ul><blockquote><p>“</p><p>脏读：事务 A 读取了事务 B 更新后的数据，但是事务 B 没有提交，然后事务 B 执行回滚操作，那么事务 A 读到的数据就是脏数据</p><p>不可重复读：事务 A 进行多次读取操作，事务 B 在事务 A 多次读取的过程中执行更新操作并提交，提交后事务 A 读到的数据不一致。</p><p>幻读：事务 A 将数据库中所有学生的成绩由 A -&gt; B，此时事务 B 手动插入了一条成绩为 A 的记录，在事务 A 更改完毕后，发现还有一条记录没有修改，那么这种情况就叫做出现了幻读。</p></blockquote><h3 id="SQL隔离级别"><a href="#SQL隔离级别" class="headerlink" title="SQL隔离级别"></a>SQL隔离级别</h3><p>SQL的隔离级别有四种，它们分别是<code>读未提交(read uncommitted)</code>、<code>读已提交(read committed)</code>、<code>可重复读(repetable read)</code> 和 <code>串行化(serializable)</code>。下面分别来解释一下。</p><p>读未提交：读未提交指的是一个事务在提交之前，它所做的修改就能够被其他事务所看到。</p><p>读已提交：读已提交指的是一个事务在提交之后，它所做的变更才能够让其他事务看到。</p><p>可重复读：可重复读指的是一个事务在执行的过程中，看到的数据是和启动时看到的数据是一致的。未提交的变更对其他事务不可见。</p><p>串行化：顾名思义是对于同一行记录，<code>写</code>会加<code>写锁</code>，<code>读</code>会加<code>读锁</code>。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p><p>这四个隔离级别可以解决脏读、不可重复读、幻象读这三类问题。总结如下</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200509104419.jpg" alt=""></p><p>其中隔离级别由低到高是：读未提交 &lt; 读已提交 &lt; 可重复读 &lt; 串行化</p><p>隔离级别越高，越能够保证数据的完整性和一致性，但是对并发的性能影响越大。大多数数据库的默认级别是<code>读已提交(Read committed)</code>，比如 Sql Server、Oracle ，但是 MySQL 的默认隔离级别是 <code>可重复读(repeatable-read)</code>。</p><h3 id="MySQL-常见存储引擎的区别"><a href="#MySQL-常见存储引擎的区别" class="headerlink" title="MySQL 常见存储引擎的区别"></a>MySQL 常见存储引擎的区别</h3><p>MySQL 常见的存储引擎，可以使用</p><pre><code>SHOW ENGINES</code></pre><p>命令，来列出所有的存储引擎</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJznoR5W4Rxsh0whBL1ls2BtrxR4GgwRndwMbEy7GSy8dicaCCFuNqQJg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>可以看到，InnoDB 是 MySQL 默认支持的存储引擎，支持<strong>事务、行级锁定和外键</strong>。</p><h4 id="MyISAM-存储引擎的特点"><a href="#MyISAM-存储引擎的特点" class="headerlink" title="MyISAM 存储引擎的特点"></a>MyISAM 存储引擎的特点</h4><p>在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM 并发性比较差，使用的场景比较少，主要特点是</p><ul><li><p>不支持<code>事务</code>操作，ACID 的特性也就不存在了，这一设计是为了性能和效率考虑的。</p></li><li><p>不支持<code>外键</code>操作，如果强行增加外键，MySQL 不会报错，只不过外键不起作用。</p></li><li><p>MyISAM 默认的锁粒度是<code>表级锁</code>，所以并发性能比较差，加锁比较快，锁冲突比较少，不太容易发生死锁的情况。</p></li><li><p>MyISAM 会在磁盘上存储三个文件，文件名和表名相同，扩展名分别是 <code>.frm(存储表定义)</code>、<code>.MYD(MYData,存储数据)</code>、<code>MYI(MyIndex,存储索引)</code>。这里需要特别注意的是 MyISAM 只缓存<code>索引文件</code>，并不缓存数据文件。</p></li><li><p>MyISAM 支持的索引类型有 <code>全局索引(Full-Text)</code>、<code>B-Tree 索引</code>、<code>R-Tree 索引</code></p><p>Full-Text 索引：它的出现是为了解决针对文本的模糊查询效率较低的问题。</p><p>B-Tree 索引：所有的索引节点都按照平衡树的数据结构来存储，所有的索引数据节点都在叶节点</p><p>R-Tree索引：它的存储方式和 B-Tree 索引有一些区别，主要设计用于存储空间和多维数据的字段做索引,目前的 MySQL 版本仅支持 geometry 类型的字段作索引，相对于 BTREE，RTREE 的优势在于范围查找。</p></li><li><p>数据库所在主机如果宕机，MyISAM 的数据文件容易损坏，而且难以恢复。</p></li><li><p>增删改查性能方面：SELECT 性能较高，适用于查询较多的情况</p></li></ul><h4 id="InnoDB-存储引擎的特点"><a href="#InnoDB-存储引擎的特点" class="headerlink" title="InnoDB 存储引擎的特点"></a>InnoDB 存储引擎的特点</h4><p>自从 MySQL 5.1 之后，默认的存储引擎变成了 InnoDB 存储引擎，相对于 MyISAM，InnoDB 存储引擎有了较大的改变，它的主要特点是</p><ul><li>支持事务操作，具有事务 ACID 隔离特性，默认的隔离级别是<code>可重复读(repetable-read)</code>、通过MVCC（并发版本控制）来实现的。能够解决<code>脏读</code>和<code>不可重复读</code>的问题。</li><li>InnoDB 支持外键操作。</li><li>InnoDB 默认的锁粒度<code>行级锁</code>，并发性能比较好，会发生死锁的情况。</li><li>和 MyISAM 一样的是，InnoDB 存储引擎也有 <code>.frm文件存储表结构</code> 定义，但是不同的是，InnoDB 的表数据与索引数据是存储在一起的，都位于 B+ 数的叶子节点上，而 MyISAM 的表数据和索引数据是分开的。</li><li>InnoDB 有安全的日志文件，这个日志文件用于恢复因数据库崩溃或其他情况导致的数据丢失问题，保证数据的一致性。</li><li>InnoDB 和 MyISAM 支持的索引类型相同，但具体实现因为文件结构的不同有很大差异。</li><li>增删改查性能方面，如果执行大量的增删改操作，推荐使用 InnoDB 存储引擎，它在删除操作时是对行删除，不会重建表。</li></ul><h4 id="MyISAM-和-InnoDB-存储引擎的对比"><a href="#MyISAM-和-InnoDB-存储引擎的对比" class="headerlink" title="MyISAM 和 InnoDB 存储引擎的对比"></a>MyISAM 和 InnoDB 存储引擎的对比</h4><ul><li><code>锁粒度方面</code>：由于锁粒度不同，InnoDB 比 MyISAM 支持更高的并发；InnoDB 的锁粒度为行锁、MyISAM 的锁粒度为表锁、行锁需要对每一行进行加锁，所以锁的开销更大，但是能解决脏读和不可重复读的问题，相对来说也更容易发生死锁</li><li><code>可恢复性上</code>：由于 InnoDB 是有事务日志的，所以在产生由于数据库崩溃等条件后，可以根据日志文件进行恢复。而 MyISAM 则没有事务日志。</li><li><code>查询性能上</code>：MyISAM 要优于 InnoDB，因为 InnoDB 在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而 MyISAM 可以直接定位到数据所在的内存地址，可以直接找到数据。</li><li><code>表结构文件上</code>：MyISAM 的表结构文件包括：.frm(表结构定义),.MYI(索引),.MYD(数据)；而 InnoDB 的表数据文件为:.ibd和.frm(表结构定义)；</li></ul><h3 id="MySQL-基础架构"><a href="#MySQL-基础架构" class="headerlink" title="MySQL 基础架构"></a>MySQL 基础架构</h3><p>这道题应该从 MySQL 架构来理解，我们可以把 MySQL 拆解成几个零件，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJ13HiclXviaTmLpxK5X6jAb1fd52iaMg70YuvzRoH2cfIudw3PGgyAp7AA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>大致上来说，MySQL 可以分为 <code>Server</code>层和 <code>存储引擎</code>层。</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器，包括大多数 MySQL 中的核心功能，所有跨存储引擎的功能也在这一层实现，包括 <strong>存储过程、触发器、视图等</strong>。</p><p>存储引擎层包括 MySQL 常见的存储引擎，包括 <strong>MyISAM、InnoDB 和 Memory</strong> 等，最常用的是 InnoDB，也是现在 MySQL 的默认存储引擎。存储引擎也可以在创建表的时候手动指定，比如下面</p><pre><code>CREATE TABLE t (i INT) ENGINE = &lt;Storage Engine&gt;;</code></pre><p>然后我们就可以探讨 MySQL 的执行过程了</p><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>首先需要在 MySQL 客户端登陆才能使用，所以需要一个<code>连接器</code>来连接用户和 MySQL 数据库，我们一般是使用</p><pre><code>mysql -u 用户名 -p 密码</code></pre><p>来进行 MySQL 登陆，和服务端建立连接。在完成 <code>TCP 握手</code> 后，连接器会根据你输入的用户名和密码验证你的登录身份。如果用户名或者密码错误，MySQL 就会提示 <strong>Access denied for user</strong>，来结束执行。如果登录成功后，MySQL 会根据权限表中的记录来判定你的权限。</p><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>连接完成后，你就可以执行 SQL 语句了，这行逻辑就会来到第二步：查询缓存。</p><p>MySQL 在得到一个执行请求后，会首先去 <code>查询缓存</code> 中查找，是否执行过这条 SQL 语句，之前执行过的语句以及结果会以 <code>key-value</code> 对的形式，被直接放在内存中。key 是查询语句，value 是查询的结果。如果通过 key 能够查找到这条 SQL 语句，就直接返回 SQL 的执行结果。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果就会被放入查询缓存中。可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，效率会很高。</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJ8ySdarxhtAj94LvDoJuRK8O2MnZ6CzRBbyXDc8Z5vMqRk5GgFb23xg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p><strong>但是查询缓存不建议使用</strong></p><p>为什么呢？因为只要在 MySQL 中对某一张表执行了更新操作，那么所有的查询缓存就会失效，对于更新频繁的数据库来说，查询缓存的命中率很低。</p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>如果没有命中查询，就开始执行真正的 SQL 语句。</p><ul><li>首先，MySQL 会根据你写的 SQL 语句进行解析，分析器会先做 <code>词法分析</code>，你写的 SQL 就是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串是什么，代表什么。</li><li>然后进行 <code>语法分析</code>，根据词法分析的结果， 语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果 SQL 语句不正确，就会提示 <strong>You have an error in your SQL syntax</strong></li></ul><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>经过分析器的词法分析和语法分析后，你这条 SQL 就<code>合法</code>了，MySQL 就知道你要做什么了。但是在执行前，还需要进行优化器的处理，优化器会判断你使用了哪种索引，使用了何种连接，优化器的作用就是确定效率最高的执行方案。</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>MySQL 通过分析器知道了你的 SQL 语句是否合法，你想要做什么操作，通过优化器知道了该怎么做效率最高，然后就进入了执行阶段，开始执行这条 SQL 语句</p><p>在执行阶段，MySQL 首先会判断你有没有执行这条语句的权限，没有权限的话，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。对于有索引的表，执行的逻辑也差不多。</p><p>至此，MySQL 对于一条语句的执行过程也就完成了。</p><h3 id="SQL-的执行顺序"><a href="#SQL-的执行顺序" class="headerlink" title="SQL 的执行顺序"></a>SQL 的执行顺序</h3><p>我们在编写一个查询语句的时候</p><pre><code>SELECT DISTINCT    &lt; select_list &gt;FROM    &lt; left_table &gt; &lt; join_type &gt;JOIN &lt; right_table &gt; ON &lt; join_condition &gt;WHERE    &lt; where_condition &gt;GROUP BY    &lt; group_by_list &gt;HAVING    &lt; having_condition &gt;ORDER BY    &lt; order_by_condition &gt;LIMIT &lt; limit_number &gt;</code></pre><p>它的执行顺序你知道吗？这道题就给你一个回答。</p><h4 id="FROM-连接"><a href="#FROM-连接" class="headerlink" title="FROM 连接"></a>FROM 连接</h4><p>首先，对 SELECT 语句执行查询时，对<code>FROM</code> 关键字两边的表执行连接，会形成<code>笛卡尔积</code>，这时候会产生一个<code>虚表VT1(virtual table)</code></p><blockquote><p>“</p><p>首先先来解释一下什么是<code>笛卡尔积</code></p><p>现在我们有两个集合 A = {0,1} , B = {2,3,4}</p><p>那么，集合 A * B 得到的结果就是</p><p>A * B = {(0,2)、(1,2)、(0,3)、(1,3)、(0,4)、(1,4)};</p><p>B * A = {(2,0)、{2,1}、{3,0}、{3,1}、{4,0}、(4,1)};</p><p>上面 A * B 和 B * A 的结果就可以称为两个集合相乘的 <code>笛卡尔积</code></p><p>我们可以得出结论，A 集合和 B 集合相乘，包含了集合 A 中的元素和集合 B 中元素之和，也就是 A 元素的个数 * B 元素的个数</p></blockquote><p>再来解释一下什么是虚表</p><blockquote><p>“</p><p>在 MySQL 中，有三种类型的表</p><p>一种是<code>永久表</code>，永久表就是创建以后用来长期保存数据的表</p><p>一种是<code>临时表</code>，临时表也有两类，一种是和永久表一样，只保存临时数据，但是能够长久存在的；还有一种是临时创建的，SQL 语句执行完成就会删除。</p><p>一种是<code>虚表</code>，虚表其实就是<code>视图</code>，数据可能会来自多张表的执行结果。</p></blockquote><h4 id="ON-过滤"><a href="#ON-过滤" class="headerlink" title="ON 过滤"></a>ON 过滤</h4><p>然后对 FROM 连接的结果进行 ON 筛选，创建 VT2，把符合记录的条件存在 VT2 中。</p><h4 id="JOIN-连接"><a href="#JOIN-连接" class="headerlink" title="JOIN 连接"></a>JOIN 连接</h4><p>第三步，如果是 <code>OUTER JOIN(left join、right join)</code> ，那么这一步就将添加外部行，如果是 left join 就把 ON 过滤条件的左表添加进来，如果是 right join ，就把右表添加进来，从而生成新的虚拟表 VT3。</p><h4 id="WHERE-过滤"><a href="#WHERE-过滤" class="headerlink" title="WHERE 过滤"></a>WHERE 过滤</h4><p>第四步，是执行 WHERE 过滤器，对上一步生产的虚拟表引用 WHERE 筛选，生成虚拟表 VT4。</p><p>WHERE 和 ON 的区别</p><ul><li>如果有外部列，ON 针对过滤的是关联表，主表(保留表)会返回所有的列;</li><li>如果没有添加外部列，两者的效果是一样的;</li></ul><p>应用</p><ul><li>对主表的过滤应该使用 WHERE;</li><li>对于关联表，先条件查询后连接则用 ON，先连接后条件查询则用 WHERE;</li></ul><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>根据 group by 字句中的列，会对 VT4 中的记录进行分组操作，产生虚拟机表 VT5。果应用了group by，那么后面的所有步骤都只能得到的 VT5 的列或者是聚合函数（count、sum、avg等）。</p><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>紧跟着 GROUP BY 字句后面的是 HAVING，使用 HAVING 过滤，会把符合条件的放在 VT6</p><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>第七步才会执行 SELECT 语句，将 VT6 中的结果按照 SELECT 进行刷选，生成 VT7</p><h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h4><p>在第八步中，会对 TV7 生成的记录进行去重操作，生成 VT8。事实上如果应用了 group by 子句那么 distinct 是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>应用 order by 子句。按照 order_by_condition 排序 VT8，此时返回的一个游标，而不是虚拟表。sql 是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。</p><p>SQL 语句执行的过程如下</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJk3dNXRhX7iaSe3hwYebNbtBmic8xcSbJia2y4NA4gmPfezluyBtYMrEAA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h3 id="什么是临时表，何时删除临时表"><a href="#什么是临时表，何时删除临时表" class="headerlink" title="什么是临时表，何时删除临时表"></a>什么是临时表，何时删除临时表</h3><p>什么是临时表？MySQL 在执行 SQL 语句的过程中，通常会临时创建一些<code>存储中间结果集</code>的表，临时表只对当前连接可见，在连接关闭时，临时表会被删除并释放所有表空间。</p><p>临时表分为两种：一种是<code>内存临时表</code>，一种是<code>磁盘临时表</code>，什么区别呢？内存临时表使用的是 MEMORY 存储引擎，而临时表采用的是 MyISAM 存储引擎。</p><blockquote><p>“</p><p>MEMORY 存储引擎：<code>memory</code> 是 MySQL 中一类特殊的存储引擎，它使用存储在内容中的内容来创建表，而且<strong>数据全部放在内存中</strong>。每个基于 MEMORY 存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为 <code>frm</code> 类型。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于 MEMORY 的表的生命周期很短，一般是一次性的。</p></blockquote><p>MySQL 会在下面这几种情况产生临时表</p><ul><li>使用 UNION 查询：UNION 有两种，一种是<code>UNION</code> ，一种是 <code>UNION ALL</code> ，它们都用于联合查询；区别是 使用 UNION 会去掉两个表中的重复数据，相当于对结果集做了一下<code>去重(distinct)</code>。使用 UNION ALL，则不会排重，返回所有的行。使用 UNION 查询会产生临时表。</li><li>使用 <code>TEMPTABLE 算法</code>或者是 UNION 查询中的视图。TEMPTABLE 算法是一种创建临时表的算法，它是将结果放置到临时表中，意味这要 MySQL 要先创建好一个临时表，然后将结果放到临时表中去，然后再使用这个临时表进行相应的查询。</li><li>ORDER BY 和 GROUP BY 的子句不一样时也会产生临时表。</li><li>DISTINCT 查询并且加上 ORDER BY 时；</li><li>SQL 用到 SQL_SMALL_RESULT 选项时；如果查询结果比较小的时候，可以加上 SQL_SMALL_RESULT 来优化，产生临时表</li><li>FROM 中的子查询；</li><li>EXPLAIN 查看执行计划结果的 Extra 列中，如果使用 <code>Using Temporary</code> 就表示会用到临时表。</li></ul><h3 id="MySQL-常见索引类型"><a href="#MySQL-常见索引类型" class="headerlink" title="MySQL 常见索引类型"></a>MySQL 常见索引类型</h3><p>索引是存储在一张表中特定列上的<code>数据结构</code>，索引是在列上创建的。并且，索引是一种数据结构。</p><p>在 MySQL 中，主要有下面这几种索引</p><ul><li><code>全局索引(FULLTEXT)</code>：全局索引，目前只有 MyISAM 引擎支持全局索引，它的出现是为了解决针对文本的模糊查询效率较低的问题。</li><li><code>哈希索引(HASH)</code>：哈希索引是 MySQL 中用到的唯一 key-value 键值对的数据结构，很适合作为索引。HASH 索引具有一次定位的好处，不需要像树那样逐个节点查找，但是这种查找适合应用于查找单个键的情况，对于范围查找，HASH 索引的性能就会很低。</li><li><code>B-Tree 索引</code>：B 就是 Balance 的意思，BTree 是一种平衡树，它有很多变种，最常见的就是 B+ Tree，它被 MySQL 广泛使用。</li><li><code>R-Tree 索引</code>：R-Tree 在 MySQL 很少使用，仅支持 geometry 数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种，相对于 B-Tree 来说，R-Tree 的优势在于范围查找。</li></ul><h3 id="varchar-和-char-的区别和使用场景"><a href="#varchar-和-char-的区别和使用场景" class="headerlink" title="varchar 和 char 的区别和使用场景"></a>varchar 和 char 的区别和使用场景</h3><p>MySQL 中没有 nvarchar 数据类型，所以直接比较的是 varchar 和 char 的区别</p><p><code>char</code> ：表示的是<code>定长</code>的字符串，当你输入小于指定的数目，比如你指定的数目是 <code>char(6)</code>，当你输入小于 6 个字符的时候，char 会在你最后一个字符后面补空值。当你输入超过指定允许最大长度后，MySQL 会报错</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJm96bLeofaq25BJWSKzfxN0rnAO5YRkibp6NlSMW1b9uEHXxaSEoVbibg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p><code>varchar</code>：varchar 指的是长度为 n 个字节的可变长度，并且是<code>非Unicode</code>的字符数据。n 值是介于 1 - 8000 之间的数值。存储大小为实际大小。</p><blockquote><p>“</p><p>Unicode 是一种字符编码方案，它为每种语言中的每个字符都设定了统一唯一的二进制编码，以实现跨语言、跨平台进行文本转换、处理的要求</p></blockquote><p>使用 char 存储定长的数据非常方便、char 检索效率高，无论你存储的数据是否到了 10 个字节，都要去占用 10 字节的空间</p><p>使用 varchar 可以存储变长的数据，但存储效率没有 char 高。</p><h3 id="什么是-内连接、外连接、交叉连接、笛卡尔积"><a href="#什么是-内连接、外连接、交叉连接、笛卡尔积" class="headerlink" title="什么是 内连接、外连接、交叉连接、笛卡尔积"></a>什么是 内连接、外连接、交叉连接、笛卡尔积</h3><p>连接的方式主要有三种：<strong>外连接、内链接、交叉连接</strong></p><ul><li><p><code>外连接(OUTER JOIN)</code>：外连接分为三种，分别是<code>左外连接(LEFT OUTER JOIN 或 LEFT JOIN)</code> 、<code>右外连接(RIGHT OUTER JOIN 或 RIGHT JOIN)</code> 、<code>全外连接(FULL OUTER JOIN 或 FULL JOIN)</code></p><p>左外连接：又称为左连接，这种连接方式会显示左表不符合条件的数据行，右边不符合条件的数据行直接显示 NULL</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJvTwOVia8Zk44uShjLiaOQsja6R50xSVTqtQOicsnyQEnCHN1SomT7rw8g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>  右外连接：也被称为右连接，他与左连接相对，这种连接方式会显示右表不   符合条件的数据行，左表不符合条件的数据行直接显示 NULL</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJ43jMZbXhMiat3XFuHticHAHXql5ams4liaeoFRDvWnavtNCthnVPrib74Q/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>​    <strong>MySQL 暂不支持全外连接</strong></p><ul><li><code>内连接(INNER JOIN)</code>：结合两个表中相同的字段，返回关联字段相符的记录。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://mmbiz.qpic.cn/mmbiz_png/libYRuvULTdUjIID8CJZm0kCpUTFyVGvJaS8JOo90Kx1Aic0RBPojqhCjpak7yrUibicaK8pAj6fiaicGzibOZ5hMwLkQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><ul><li><code>笛卡尔积(Cartesian product)</code>：我在上面提到了笛卡尔积，为了方便，下面再列出来一下。</li></ul><blockquote><p>“</p><p>现在我们有两个集合 A = {0,1} , B = {2,3,4}</p><p>那么，集合 A * B 得到的结果就是</p><p>A * B = {(0,2)、(1,2)、(0,3)、(1,3)、(0,4)、(1,4)};</p><p>B * A = {(2,0)、{2,1}、{3,0}、{3,1}、{4,0}、(4,1)};</p><p>上面 A * B 和 B * A 的结果就可以称为两个集合相乘的 <code>笛卡尔积</code></p><p>我们可以得出结论，A 集合和 B 集合相乘，包含了集合 A 中的元素和集合 B 中元素之和，也就是 A 元素的个数 * B 元素的个数</p></blockquote><ul><li><p>交叉连接的原文是<code>Cross join</code> ，就是笛卡尔积在 SQL 中的实现，SQL中使用关键字<code>CROSS JOIN</code>来表示交叉连接，在交叉连接中，随便增加一个表的字段，都会对结果造成很大的影响。</p><pre><code>SELECT * FROM t_Class a CROSS JOIN t_Student b WHERE a.classid=b.classid</code></pre><p>或者不用 CROSS JOIN，直接用 FROM 也能表示交叉连接的效果</p><pre><code>SELECT * FROM t_Class a ,t_Student b WHERE a.classid=b.classid</code></pre><p>如果表中字段比较多，不适宜用交叉连接，交叉连接的效率比较差。</p></li><li><p>全连接：全连接也就是 <code>full join</code>，MySQL 中不支持全连接，但是可以使用其他连接查询来模拟全连接，可以使用 <code>UNION</code> 和 <code>UNION ALL</code> 进行模拟。例如</p><pre><code>(select colum1,colum2...columN from tableA ) union (select colum1,colum2...columN from tableB )或 (select colum1,colum2...columN from tableA ) union all (select colum1,colum2...columN from tableB )；</code></pre><p>使用 UNION 和 UNION ALL 的注意事项</p><blockquote><p>“</p><p>通过 union 连接的 SQL 分别单独取出的列数必须相同</p><p>使用 union 时，多个相等的行将会被合并，由于合并比较耗时，一般不直接使用 union 进行合并，而是通常采用 union all 进行合并</p></blockquote></li></ul><h3 id="谈谈-SQL-优化的经验"><a href="#谈谈-SQL-优化的经验" class="headerlink" title="谈谈 SQL 优化的经验"></a>谈谈 SQL 优化的经验</h3><ul><li>查询语句无论是使用哪种判断条件 <strong>等于、小于、大于</strong>， <code>WHERE</code> 左侧的条件查询字段不要使用函数或者表达式</li><li>使用 <code>EXPLAIN</code> 命令优化你的 SELECT 查询，对于复杂、效率低的 sql 语句，我们通常是使用 explain sql 来分析这条 sql 语句，这样方便我们分析，进行优化。</li><li>当你的 SELECT 查询语句只需要使用一条记录时，要使用 <code>LIMIT 1</code></li><li>不要直接使用 <code>SELECT *</code>，而应该使用具体需要查询的表字段，因为使用 EXPLAIN 进行分析时，SELECT * 使用的是全表扫描，也就是 <code>type = all</code>。</li><li>为每一张表设置一个 ID 属性</li><li>避免在 <code>WHERE</code> 字句中对字段进行 <code>NULL</code> 判断</li><li>避免在 <code>WHERE</code> 中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符</li><li>使用 <code>BETWEEN AND</code> 替代 <code>IN</code></li><li>为搜索字段创建索引</li><li>选择正确的存储引擎，InnoDB 、MyISAM 、MEMORY 等</li><li>使用 <code>LIKE %abc%</code> 不会走索引，而使用 <code>LIKE abc%</code> 会走索引</li><li>对于枚举类型的字段(即有固定罗列值的字段)，建议使用<code>ENUM</code>而不是<code>VARCHAR</code>，如性别、星期、类型、类别等</li><li>拆分大的 DELETE 或 INSERT 语句</li><li>选择合适的字段类型，选择标准是 <strong>尽可能小、尽可能定长、尽可能使用整数</strong>。</li><li>字段设计尽可能使用 <code>NOT NULL</code></li><li>进行水平切割或者垂直分割</li></ul><blockquote><p>“</p><p>水平分割：通过建立结构相同的几张表分别存储数据</p><p>垂直分割：将经常一起使用的字段放在一个单独的表中，分割后的表记录之间是一一对应关系。</p></blockquote><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><h3 id="Spark与MR的区别"><a href="#Spark与MR的区别" class="headerlink" title="Spark与MR的区别"></a>Spark与MR的区别</h3><ul><li>MR是基于进程，spark是基于线程</li><li>Spark的多个task跑在同一个进程上，这个进程会伴随spark应用程序的整个生命周期，即使没有作业进行，进程也是存在的；MR的每一个task都是一个进程，当task完成时，进程也会结束</li><li>所以，spark比MR快的原因也在这，MR启动就需要申请资源，用完就销毁，但是spark把进程拿到以后，这个进程会一直存在，即使没有job在跑，所以后边的job可以直接启动，不需要再重新申请资源</li><li>速度：spark把运算的中间数据存放在内存，迭代计算效率更高；MR的中间结果需要保存到磁盘，这样必然会有磁盘IO操作，影响性能</li><li>容错性：spark容错性高，它通过弹性分布式数据集RDD来实现高效容错，RDD是一组分布式的存储在节点内存中的只读性质的数据集，这些集合是弹性的，某一部分丢失或者出错，可以通过整个数据集的计算流程的血缘关系来实现重建；MR的话容错可能只能重新计算了，成本较高 </li><li>适用面：spark更加通用，spark提供了transformation和action这两大类的多个功能的api，另外还有流式处理sparkstreaming模块，图计算GraphX等；MR只提供了map和reduce两种操作，流计算以及其他模块的支持比较缺乏</li><li>框架和生态：Spark框架和生态更为复杂，首先由RDD、血缘lineage、执行时的有向无环图DAG、stage划分等等，很多时候spark作业都需要根据不同的业务场景的需要进行调优，以达到性能要求，MR框架及其生态相对较为简单，对性能的要求也相对较弱，但是运行较为稳定，适合长期后台运行 </li><li>运行环境：<br>  MR运行在YARN上，<br>  spark：<br>  local：本地运行<br>  standalone：使用Spark自带的资源管理框架，运行spark的应用<br>  yarn：将spark应用类似mr一样，提交到yarn上运行<br>  mesos：类似yarn的一种资源管理框架</li></ul><h3 id="SparkStreaming"><a href="#SparkStreaming" class="headerlink" title="SparkStreaming"></a>SparkStreaming</h3><h4 id="基本运行原理"><a href="#基本运行原理" class="headerlink" title="基本运行原理"></a>基本运行原理</h4><p>接收实时输入数据流，然后将数据拆分成多个batch，比如每收集5秒的数据封装为一个batch，然后将每个batch交给Spark的计算引擎进行处理，最后会生产出一个结果数据流，其中的数据，也是由一个一个的batch所组成的。</p><h3 id="RDD依赖关系与stage划分"><a href="#RDD依赖关系与stage划分" class="headerlink" title="RDD依赖关系与stage划分"></a>RDD依赖关系与stage划分</h3><p>Spark中RDD的高效与DAG图有着莫大的关系，在DAG调度中需要对计算过程划分stage，而划分依据就是RDD之间的依赖关系。</p><h4 id="宽依赖窄依赖"><a href="#宽依赖窄依赖" class="headerlink" title="宽依赖窄依赖"></a>宽依赖窄依赖</h4><p>针对不同的转换函数，RDD之间的依赖关系分为窄依赖（narrow dependency）和宽依赖（wide dependency，也成shuffle dependency）。</p><ul><li>1.1<strong>窄依赖：窄依赖是指1个父RDD分区对应1个子RDD的分区。</strong><br>换句话说，一个父RDD的分区对应于一个子RDD的分区，或者多个父RDD的分区对应于一个子RDD的分区。所以窄依赖又可以分为两种情况：<ul><li>1个子RDD的分区对应于1个父RDD的分区，比如map，filter，union等算子</li><li>1个子RDD的分区对应于N个父RDD的分区，比如co-partioned join</li></ul></li><li>1.2<strong>宽依赖：宽依赖是指1个父RDD分区对应多个子RDD分区。</strong><br>宽依赖有分为两种情况<ul><li>1个父RDD对应非全部多个子RDD分区，比如groupByKey，reduceByKey，sortByKey</li><li>1个父RDD对应所有子RDD分区，比如未经协同划分的join<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505174723.png" alt=""></li></ul></li></ul><p>总结：<strong>如果父RDD分区对应1个子RDD的分区就是窄依赖，否则就是宽依赖。</strong></p><h4 id="为什么Spark将依赖分为窄依赖和宽依赖"><a href="#为什么Spark将依赖分为窄依赖和宽依赖" class="headerlink" title="为什么Spark将依赖分为窄依赖和宽依赖"></a>为什么Spark将依赖分为窄依赖和宽依赖</h4><p><strong>1 窄依赖(narrow dependency)：</strong><br>可以支持在同一个集群Executor上，以pipeline管道形式顺序执行多条命令，例如在执行了map后，紧接着执行filter。分区内的计算收敛，不需要依赖所有分区的数据，可以并行地在不同节点进行计算。所以它的失败回复也更有效，因为它只需要重新计算丢失的parent partition即可<br><strong>2 宽依赖(shuffle dependency)：</strong><br>则需要所有的父分区都是可用的，必须等RDD的parent partition数据全部ready之后才能开始计算，可能还需要调用类似MapReduce之类的操作进行跨节点传递。从失败恢复的角度看，shuffle dependency牵涉RDD各级的多个parent partition。</p><h4 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h4><p><strong>RDD之间的依赖关系就形成了DAG（有向无环图）</strong><br>在Spark作业调度系统中，调度的前提是判断多个作业任务的依赖关系，这些作业任务之间可能存在因果的依赖关系，也就是说有些任务必须先获得执行，然后相关的依赖人物才能执行，但是任务之间显然不应出现任何直接或间接的循环依赖关系，所以本质上这种关系适合用DAG表示</p><h4 id="stage划分-遇到一个宽依赖就分一个stage"><a href="#stage划分-遇到一个宽依赖就分一个stage" class="headerlink" title="stage划分:遇到一个宽依赖就分一个stage"></a>stage划分:遇到一个宽依赖就分一个stage</h4><p>由于shuffle依赖必须等RDD的父RDD分区数据全部可读之后才能开始计算，因此Spark的设计是让父RDD将结果写在本地，完全写完之后，通知后面的RDD。后面的RDD则首先去读之前RDD的本地数据作为输入，然后进行运算。<br>由于上述特性，讲shuffle依赖就必须分为两个阶段(stage)去做：</p><ul><li>(1）第1个阶段(stage)需要把结果shuffle到本地，例如reduceByKey，首先要聚合某个key的所有记录，才能进行下一步的reduce计算，这个汇聚的过程就是shuffle。</li><li>(2) 第二个阶段(stage)则读入数据进行处理。</li></ul><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>元数据就是表的属性数据，表的名字，列信息，分区等标的属性信息，它是存放在RMDBS传统数据库中的（如，mysql）。</p><h3 id="Hive内部表外部表的区别"><a href="#Hive内部表外部表的区别" class="headerlink" title="Hive内部表外部表的区别"></a>Hive内部表外部表的区别</h3><ul><li>创建表时：创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径， 不对数据的位置做任何改变。</li><li>删除表时：在删除表的时候，内部表的元数据和数据会被一起删除， 而外部表只删除元数据，不删除数据。这样外部表相对来说更加安全些，数据组织也更加灵活，方便共享源数据。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop-spark-storm的区别</title>
      <link href="/20200505/19175.html"/>
      <url>/20200505/19175.html</url>
      
        <content type="html"><![CDATA[<h1 id="Storm与Spark、Hadoop"><a href="#Storm与Spark、Hadoop" class="headerlink" title="Storm与Spark、Hadoop"></a>Storm与Spark、Hadoop</h1><h2 id="Storm与Spark、Hadoop三种框架对比"><a href="#Storm与Spark、Hadoop三种框架对比" class="headerlink" title="Storm与Spark、Hadoop三种框架对比"></a>Storm与Spark、Hadoop三种框架对比</h2><p>Storm与Spark、Hadoop这三种框架，各有各的优点，每个框架都有自己的最佳应用场景。所以，在不同的应用场景下，应该选择不同的框架。</p><p>1.<strong>Storm</strong>是最佳的流式计算框架，Storm由Java和Clojure写成，Storm的优点是全内存计算，所以它的定位是分布式实时计算系统，按照Storm作者的说法，Storm对于实时计算的意义类似于Hadoop对于批处理的意义。<br><strong>Storm的适用场景：</strong><br>1）流数据处理<br>Storm可以用来处理源源不断流进来的消息，处理之后将结果写入到某个存储中去。<br>2）分布式RPC。由于Storm的处理组件是分布式的，而且处理延迟极低，所以可以作为一个通用的分布式RPC框架来使用。</p><p>2.<strong>Spark</strong>是一个基于内存计算的开源集群计算系统，目的是更快速的进行数据分析。Spark由加州伯克利大学AMP实验室Matei为主的小团队使用Scala开发，类似于Hadoop MapReduce的通用并行计算框架，Spark基于Map Reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点，但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的Map Reduce的算法。<br><strong>Spark的适用场景</strong>：<br>1）多次操作特定数据集的应用场合<br>Spark是基于内存的迭代计算框架，适用于需要多次操作特定数据集的应用场合。需要反复操作的次数越多，所需读取的数据量越大，受益越大，数据量小但是计算密集度较大的场合，受益就相对较小。<br>2）粗粒度更新状态的应用<br>由于RDD的特性，Spark不适用那种异步细粒度更新状态的应用，例如Web服务的存储或者是增量的Web爬虫和索引。就是对于那种增量修改的应用模型不适合。<br>总的来说Spark的适用面比较广泛且比较通用。</p><p>3.<strong>Hadoop</strong>是实现了MapReduce的思想，将数据切片计算来处理大量的离线数据。Hadoop处理的数据必须是已经存放在HDFS上或者类似HBase的数据库中，所以Hadoop实现的时候是通过移动计算到这些存放数据的机器上来提高效率。<br><strong>Hadoop的适用场景：</strong><br>1）海量数据的离线分析处理<br>2）大规模Web信息搜索<br>3）数据密集型并行计算</p><p>简单来说：<br><strong>Hadoop适合于离线的批量数据处理适用于对实时性要求极低的场景</strong><br><strong>Storm适合于实时流数据处理，实时性方面做得极好</strong><br><strong>Spark是内存分布式计算框架，试图吞并Hadoop的Map-Reduce批处理框架和Storm的流处理框架，但是Spark已经做得很不错了，批处理方面性能优于Map-Reduce，但是流处理目前还是弱于Storm，产品仍在改进之中</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
          <category> storm </category>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> hadoop </tag>
            
            <tag> storm </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法总结</title>
      <link href="/20200501/58465.html"/>
      <url>/20200501/58465.html</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="基于比较的排序"><a href="#基于比较的排序" class="headerlink" title="基于比较的排序"></a>基于比较的排序</h2><h3 id="一、直接插入排序"><a href="#一、直接插入排序" class="headerlink" title="一、直接插入排序"></a>一、直接插入排序</h3><p>“<strong>往有序的数组中快速插入一个新的元素</strong>”</p><p>算法思想：把要排序的数组分为了两个部分, 一部分是数组的全部元素(除去待插入的元素), 另一部分是待插入的元素; 先将第一部分排序完成, 然后再插入这个元素. 其中第一部分的排序也是通过再次拆分为两部分来进行的。</p><p>类型可分为：直接插入排序、这般插入排序(或二分插入排序)、链表插入排序、希尔排序。</p><p>1) 算法描述</p><p>插入排序一般采用in-place在数组上实现。</p><p>具体算法描述：</p><p>①. 从第一个元素开始，该元素可以认为已经被排序</p><p>②. 取出下一个元素，在已经排序的元素序列中从后向前扫描</p><p>③. 如果该元素（已排序）大于新元素，将该元素移到下一位置</p><p>④. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</p><p>⑤. 将新元素插入到该位置后</p><p>⑥. 重复步骤②~⑤</p><p>Note: 如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找插入排序。</p><p>2) 代码实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author SmallHeroic * @Date 2020-04-08 14:53 * * 初始时假设第一个记录自成一个有序序列，其余记录为无序序列。 * 接着从第二个记录开始，按照记录的大小依次将当前处理的记录插入到其之前的有序序列中， * 直至最后一个记录插入到有序序列中为止 * * https://www.cnblogs.com/hardyyao/p/9903278.html */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出：[1, 2, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接插入排序复杂度：</p><table><thead><tr><th><strong>平均时间复杂度</strong></th><th><strong>最好情况</strong></th><th><strong>最坏情况</strong></th><th><strong>空间复杂度</strong></th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>Note: 由于直接插入排序每次只移动一个元素的位， 并不会改变值相同的元素之间的排序， 因此它是一种稳定排序。</p><h3 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h3><p>基本思想：</p><p>把最小或者最大的选择出来<br>对于给定的一组记录，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的位置进行交换；<br>接着对不包括第一个记录以外的其他记录进行第二轮比较，得到最小的记录并与第二个记录进行位置交换；<br>重复该过程，直到进行比较的记录只有一个时为止。</p><p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author SmallHeroic * @Date 2020-04-19 00:05 * * 把最小或者最大的选择出来 * 对于给定的一组记录，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的位置进行交换； * 接着对不包括第一个记录以外的其他记录进行第二轮比较，得到最小的记录并与第二个记录进行位置交换； * 重复该过程，直到进行比较的记录只有一个时为止。 * * 选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。 * 但是选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾。 * https://www.cnblogs.com/hardyyao/p/9903278.html */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span>null<span class="token operator">||</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 做第i趟排序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> minIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//选最小的记录</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    minIdx<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//在内层循环结束，也就是找到本轮循环的最小的数以后，再进行交换</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minIdx<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出：[1, 2, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择排序空间复杂度也是 O（1），是一种原地排序算法。它的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O（n^2）。</p><p>选择排序不是稳定的排序算法，因为它每次都要找出剩余未排序元素中的最小值，并和前面的元素交换位置，这样就破坏了稳定性。</p><h3 id="三、冒泡排序"><a href="#三、冒泡排序" class="headerlink" title="三、冒泡排序"></a>三、冒泡排序</h3><p>基本思想：</p><p>从无序序列头部开始，进行两两比较，根据大小交换位置，直到最后将最大（小）的数据元素交换到了无序队列的队尾，从而成为有序序列的一部分；下一次继续这个过程，直到所有数据元素都排好序。</p><p>算法的核心在于每次通过两两比较交换位置，选出剩余无序序列里最大（小）的数据元素放到队尾。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author SmallHeroic * @Date 2020-04-18 22:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//冒泡排序</span>    <span class="token comment" spellcheck="true">/*     * 冒泡排序：两两比较，大者交换位置,则每一轮循环结束后最大的数就会移动到最后.     * 时间复杂度为O(n²) 空间复杂度为O(1)     *（1）将序列中所有元素两两比较，将最大的放在最后面。      （2）将剩余序列中所有元素两两比较，将最大的放在最后面。      （3）重复第二步，直到只剩下一个数。     * 参考URL:https://blog.csdn.net/qq_42857603/article/details/81487759     * https://www.cnblogs.com/hardyyao/p/9903278.html     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//冒泡趟数，i表示第几次循环，有n个数则需要n-1次循环，一轮求出一个此时最大的值放到末尾</span>                                        <span class="token comment" spellcheck="true">// 只剩一个数的时候不需要冒泡，所以n-1次</span>                                        <span class="token comment" spellcheck="true">// 自我理解为数组第几大的数正在进行冒泡两两比较，</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次: "</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//j表示这个数进行第几次的比较</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出：[1, 2, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>冒泡排序是原地排序算法：因为冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O（1），是一个原地排序算法。</li><li>冒泡排序是稳定的排序算法：在冒泡排序中，只有当相邻两个元素大小不相等的时候，我们才做交换，相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</li><li>冒泡排序的时间复杂度是 O（n^2）：冒泡排序在要排序的数据都是有序的情况下，我们只需要进行一次冒泡排序就可以结束了，所以最好情况时间复杂度为 O（n）。而在要排序的数据刚好是倒序排列的情况下，则需要进行 n 次冒泡操作，所以最坏情况时间复杂度为 O（n^2）。</li></ul><h3 id="四、堆排序"><a href="#四、堆排序" class="headerlink" title="四、堆排序"></a>四、堆排序</h3><p>1) 基本思想</p><p>此处以大顶堆为例，堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><p>2) 算法描述</p><p>①. 先将初始序列K[1..n]建成一个大顶堆, 那么此时第一个元素K1最大, 此堆为初始的无序区.</p><p>②. 再将关键字最大的记录K1 (即堆顶, 第一个元素)和无序区的最后一个记录 Kn 交换, 由此得到新的无序区K[1..n-1]和有序区K[n], 且满足K[1..n-1].keys &lt;= K[n].key </p><p>③. 交换K1 和 Kn 后, 堆顶可能违反堆性质, 因此需将K[1..n-1]调整为堆. 然后重复步骤②, 直到无序区只有一个元素时停止.</p><p>3) 代码实现</p><p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆函数，二是反复调用建堆函数以选择出剩余未排元素中最大的数来实现排序的函数。</p><p>操作定义：</p><p>最大堆调整（Max_Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点</p><p>创建最大堆（Build_Max_Heap）：将堆所有数据重新排序</p><p>堆排序（HeapSort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算</p><p>对于堆节点的访问：</p><p>父节点i的左子节点在位置：(2*i+1);</p><p>父节点i的右子节点在位置：(2*i+2);</p><p>子节点i的父节点在位置：floor((i-1)/2);</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author SmallHeroic * @Date 2020-04-08 15:04 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 堆排序 * * 1. 先将初始序列K[1..n]建成一个大顶堆, 那么此时第一个元素K1最大, 此堆为初始的无序区. * 2. 再将关键字最大的记录K1 (即堆顶, 第一个元素)和无序区的最后一个记录 Kn 交换, * 由此得到新的无序区K[1..n−1]和有序区K[n], 且满足K[1..n−1].keys⩽K[n].key * 3. 交换K1 和 Kn 后, 堆顶可能违反堆性质, 因此需将K[1..n−1]调整为堆. 然后重复步骤②, 直到无序区只有一个元素时停止. * @author smallheroic */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">heapSortMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapSortMin</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 堆排序     *     * 1. 先将初始序列K[1..n]建成一个大顶堆, 那么此时第一个元素K1最大, 此堆为初始的无序区.     * 2. 再将关键字最大的记录K1 (即堆顶, 第一个元素)和无序区的最后一个记录 Kn 交换, 由此得到新的无序区K[1..n−1]和有序区K[n], 且满足K[1..n−1].keys⩽K[n].key     * 3. 交换K1 和 Kn 后, 堆顶可能违反堆性质, 因此需将K[1..n−1]调整为堆. 然后重复步骤②, 直到无序区只有一个元素时停止.     * @param arr  待排序数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSortMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">max_heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//堆顶元素(第一个元素)与Kn交换</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> parentIdx <span class="token operator">=</span> limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> parentIdx <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> parentIdx<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parentIdx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">>=</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> parentIdx <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//左子节点位置</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> limit <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//右子节点位置，如果没有右节点，默认为左节点位置</span>            <span class="token keyword">int</span> maxChildId <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxChildId<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>parentIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//交换父节点与左右子节点中的最大值</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>parentIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>parentIdx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>maxChildId<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>maxChildId<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Max_Heapify: "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSortMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">min_heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//堆顶元素(第一个元素)与Kn交换</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">min_heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> parentIdx <span class="token operator">=</span> limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> parentIdx <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> parentIdx<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parentIdx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">>=</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> parentIdx <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//左子节点位置</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> limit <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//右子节点位置，如果没有右节点，默认为左节点位置</span>            <span class="token keyword">int</span> minChildId <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minChildId<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>parentIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//交换父节点与左右子节点中的最小值</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>parentIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>parentIdx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minChildId<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>minChildId<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Min_Heapify: "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出：</span><span class="token comment" spellcheck="true">//Max_Heapify: [3, 7, 8, 16, 17, 20]</span><span class="token comment" spellcheck="true">//Min_Heapify: [20, 17, 16, 8, 7, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①. 建立堆的过程, 从length/2 一直处理到0, 时间复杂度为O(n); ②. 调整堆的过程是沿着堆的父子节点进行调整, 执行次数为堆的深度, 时间复杂度为O(lgn); ③. 堆排序的过程由n次第②步完成, 时间复杂度为O(nlgn).</p><table><thead><tr><th><strong>平均时间复杂度</strong></th><th><strong>最好情况</strong></th><th><strong>最坏情况</strong></th><th><strong>空间复杂度</strong></th></tr></thead><tbody><tr><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(1)</td></tr></tbody></table><h3 id="五、归并排序"><a href="#五、归并排序" class="headerlink" title="五、归并排序"></a>五、归并排序</h3><p>1）基本思想</p><p>归并排序算法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><p>2）算法描述</p><p>归并排序可通过两种方式实现：</p><p>自上而下的递归</p><p>自下而上的迭代</p><p>A. 递归法（以序列有n个元素为例）</p><p>①. 将序列每相邻两个数字进行归并操作，形成 floor(n/2)个序列，排序后每个序列包含两个元素；<br> ②. 将上述序列再次归并，形成 floor(n/4)个序列，每个序列包含四个元素；<br> ③. 重复步骤②，直到所有元素排序完毕。</p><p>B. 迭代法</p><p>①. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br> ②. 设定两个指针，最初位置分别为两个已经排序序列的起始位置<br> ③. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br> ④. 重复步骤③直到某一指针到达序列尾<br> ⑤. 将另一序列剩下的所有元素直接复制到合并序列尾 </p><p>3）代码实现</p><p>分解：将序列每次折半拆分</p><p>合并：将划分后的序列段两两排序合并</p><p>如何分解？</p><p>在这里，我们采用递归的方法，首先将待排序列分成A,B两组；然后重复对A、B序列 分组；直到分组后组内只有一个元素，此时我们认为组内所有元素有序，则分组结束。</p><p>如何合并？</p><p>L[first…mid]为第一段，L[mid+1…last]为第二段，并且两端已经有序，现在我们要将两端合成达到L[first…last]并且也有序。</p><p>首先依次从第一段与第二段中取出元素比较，将较小的元素赋值给temp[]</p><p>重复执行上一步，当某一段赋值结束，则将另一段剩下的元素赋值给temp[]</p><p>此时将temp[]中的元素复制给L[]，则得到的L[first…last]有序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author SmallHeroic * @Date 2020-04-09 15:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergingSort01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">mergingSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 归并排序（递归）     *     * ①. 将序列每相邻两个数字进行归并操作，形成 floor(n/2)个序列，排序后每个序列包含两个元素；     * ②. 将上述序列再次归并，形成 floor(n/4)个序列，每个序列包含四个元素；     * ③. 重复步骤②，直到所有元素排序完毕。     * @param arr    待排序数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// Note：x>>1 是位运算中的右移运算, 表示右移一位, 等同于x除以2再取整, 即 x>>1 == Math.floor(x/2)</span>        <span class="token keyword">int</span> num<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftArr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightArr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>num<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Split to two arrays:\n"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不断拆分为最小单元，然后再排序合并</span>        <span class="token keyword">return</span> <span class="token function">mergeTwoArrays</span><span class="token punctuation">(</span><span class="token function">mergingSort</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mergingSort</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeTwoArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//i，j,k分别为arr1，arr2,result下标，</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//申请额外的空间存储合并之后的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token operator">+</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选取两个序列中的较小值放入新数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//序列1中多余的元素放入新数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//序列2中多余的元素放入新数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Merging:"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果：Merging:[3, 7, 8, 16, 17, 20]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>长度为n的数组, 最终会调用mergeSort函数2n-1次。通过自上而下的递归实现的归并排序, 将存在堆栈溢出的风险。</p><p>算法复杂度、</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n)</td></tr></tbody></table><p>从效率上看，归并排序可算是排序算法中的”佼佼者”. 假设数组长度为n，那么拆分数组共需logn，, 又每步都是一个普通的合并子数组的过程， 时间复杂度为O(n)， 故其综合时间复杂度为O(nlogn)。另一方面， 归并排序多次递归过程中拆分的子数组需要保存在内存空间， 其空间复杂度为O(n)。</p><p>Note：和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。</p><h3 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h3><p>典型的分治思想</p><p>1) 基本思想</p><p><strong>挖坑填数+分治法</strong></p><p>首先选一个轴值(pivot，也有叫基准的)，通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><p>2) 算法描述</p><p>快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。步骤为：</p><p>①. 从数列中挑出一个元素，称为”基准”（pivot）。</p><p>②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p><p>③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p>3) 代码实现</p><p>用伪代码描述如下：</p><p>①. i = L; j = R; 将基准数挖出形成第一个坑a[i]。</p><p>②．j–，由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</p><p>③．i++，由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</p><p>④．再重复执行②，③二步，直到i==j，将基准数填入a[i]中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author SmallHeroic * @Date 2020-04-08 15:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 快速排序（递归）     *     * ①. 从数列中挑出一个元素，称为"基准"（pivot）。     * ②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。     * ③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。     * @param arr   待排序数组     * @param low   左边界     * @param high  右边界     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">>=</span>high<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span>low<span class="token punctuation">;</span>        <span class="token keyword">int</span> right<span class="token operator">=</span>high<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//挖坑1，保存基准值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">>=</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//坑2：从后往前找到比基准小的元素，插入到基准位置坑1</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//坑3：从前往后找比基准大的元素，放到坑2</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基准值填到坑3，准备分治递归快排</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"QuickSorting:"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果：[1, 2, 2, 3, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p><p>算法复杂度：</p><table><thead><tr><th><strong>平均时间复杂度</strong></th><th><strong>最好情况</strong></th><th><strong>最坏情况</strong></th><th><strong>空间复杂度</strong></th></tr></thead><tbody><tr><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n²)</td><td>O(1)（原地分区递归版）</td></tr></tbody></table><p>快速排序排序效率非常高。 虽然它运行最糟糕时将达到O(n²)的时间复杂度, 但通常平均来看, 它的时间复杂为O(nlogn), 比同样为O(nlogn)时间复杂度的归并排序还要快. 快速排序似乎更偏爱乱序的数列, 越是乱序的数列, 它相比其他排序而言, 相对效率更高.</p><p>Note: 同选择排序相似, 快速排序每次交换的元素都有可能不是相邻的, 因此它有可能打破原来值为相同的元素之间的顺序. 因此, 快速排序并不稳定.</p><h2 id="非基于比较排序"><a href="#非基于比较排序" class="headerlink" title="非基于比较排序"></a>非基于比较排序</h2><h3 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h3><p><strong>算法复杂度</strong></p><table><thead><tr><th><strong>平均时间复杂度</strong></th><th><strong>最好情况</strong></th><th><strong>最坏情况</strong></th><th><strong>空间复杂度</strong></th></tr></thead><tbody><tr><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(n+r)</td></tr></tbody></table><p>其中，<strong>d 为位数，r 为基数，n 为原数组个数</strong>。在基数排序中，因为没有比较操作，所以在复杂上，最好的情况与最坏的情况在时间上是一致的，均为 O(d*(n + r))。</p><p>Note：基数排序更适合用于对时间, 字符串等这些<strong>整体权值未知</strong>的数据进行排序；基数排序不改变相同元素之间的相对顺序，因此它是稳定的排序算法。</p><h3 id="基数排序-vs-计数排序-vs-桶排序"><a href="#基数排序-vs-计数排序-vs-桶排序" class="headerlink" title="基数排序 vs 计数排序 vs 桶排序"></a>基数排序 vs 计数排序 vs 桶排序</h3><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ol><li><p>基数排序：根据键值的每位数字来分配桶</p></li><li><p>计数排序：每个桶只存储单一键值</p></li><li><p>桶排序：每个桶存储一定范围的数值</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505124321.jpg" alt=""></p><h3 id="从时间复杂度来说"><a href="#从时间复杂度来说" class="headerlink" title="从时间复杂度来说"></a>从时间复杂度来说</h3><p>(1). 平方阶<strong>O(n²)</strong>排序：<strong>各类简单排序：直接插入、直接选择和冒泡排序；</strong></p><p>(2). 线性对数阶<strong>O(nlog**</strong>₂n)<strong>排序：</strong>快速排序、堆排序和归并排序**；</p><p>(3). O(n1+§))排序，§是介于0和1之间的常数：<strong>希尔排序</strong></p><p>(4). 线性阶O(n)排序：<strong>基数排序</strong>，此外还有<strong>桶</strong>、<strong>箱排序</strong>。</p><p>基数排序只适用于有基数的情况，而基于比较的排序适用范围就广得多。另一方面是内存上的考虑。作为一种通用的排序方法，最好不要带来意料之外的内存开销，所以各语言的默认实现都没有用基数排序，但是不能否认基数排序在各领域的应用。</p><h3 id="时间复杂度极限"><a href="#时间复杂度极限" class="headerlink" title="时间复杂度极限"></a>时间复杂度极限</h3><p><strong>当被排序的数有一些性质的时候</strong>（比如是整数，比如有一定的范围），排序算法的复杂度是可以小于O(nlgn)的。比如：</p><ol><li>计数排序 复杂度O( k+n) 要求：被排序的数是0~k范围内的整数</li><li>基数排序 复杂度O( d(k+n) ) 要求：d位数，每个数位有k个取值</li><li>桶排序 复杂度 O( n ) （平均） 要求：被排序数在某个范围内，并且服从均匀分布</li></ol><p><strong>但是，当被排序的数不具有任何性质的时候，一般使用基于比较的排序算法，而基于比较的排序算法时间复杂度的下限必须是O(nlgn)</strong>。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>·     当原表有序或基本有序时，直接插入排序和冒泡排序将大大减少比较次数和移动记录的次数，时间复杂度可降至O（n）；</p><p>·     而快速排序则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O（n2）；</p><p>·     原表是否有序，对简单选择排序、堆排序、归并排序和基数排序的时间复杂度影响不大。</p><p><strong>常用排序算法</strong></p><p><strong><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505124223.png" alt=""></strong></p><p><strong>Question:</strong></p><p><strong>很多高效排序算法的代价为nlogn，这是排序算法的极限吗？</strong></p><p><strong>Answer:</strong></p><p><strong>这是基于比较排序算法的极限；</strong></p><p><strong>分析：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/zheroic/BlogMedias/images/20200505124150.jpg" alt=""></p><p><strong>需要注意的是：快速排序、堆排序和归并排序，它们之间的差别在于常数的倍数上，都没有达到理论上的最优！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-anaconda-tensorflow环境搭建</title>
      <link href="/20200430/31381.html"/>
      <url>/20200430/31381.html</url>
      
        <content type="html"><![CDATA[<p>基于tensorflow 使用seq2seq+attention+beansearch搭建的一个聊天机器人环境安装和使用</p><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>通过实验，安装基于tensorflow 使用seq2seq+attention+beansearch搭建的一个聊天机器人需要的环境。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>l Centos 7.5</p><p>l Anaconda3-2020.02-Windows-x86_64</p><p>l Tensorflow1.15</p><h1 id="实验内容和要求"><a href="#实验内容和要求" class="headerlink" title="实验内容和要求"></a>实验内容和要求</h1><ol><li><p>安装Anaconda3</p></li><li><p>安装tensorflow</p></li><li><p>测试tensorflow</p></li></ol><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="下载Anaconda并安装"><a href="#下载Anaconda并安装" class="headerlink" title="下载Anaconda并安装"></a>下载Anaconda并安装</h2><p>Anaconda3-2020.02-Linux-x86_64.sh（即Python3.7）可通过查找如下路径下载</p><p>⑴在浏览器中输入 <a href="https://www.anaconda.com/products/individual，需要选择linux环境下的Python3.7版本，点击图中适合自己的版本，进行下载。" target="_blank" rel="noopener">https://www.anaconda.com/products/individual，需要选择linux环境下的Python3.7版本，点击图中适合自己的版本，进行下载。</a></p><p>  <img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111406486.png" alt=""></p><p>⑵下载好软件后，上传到linux目录下：</p><p> <img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111440354.png" alt=""></p><p>(3)安装anaconda</p><p>cd到anaconda.sh所在目录：</p><p> <img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111518385.png" alt=""></p><p>运行bash Anaconda3.sh安装anaconda3</p><p>然后开启安装，在安装过程中，基本上不断按回车或者yes默认就行了。</p><p>(4)配置环境变量</p><p>安装完成后，我们还需要对环境变量进行添加，方便我们启动。</p><p>在这里我们修改/etc/profile文件</p><p> <img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111529705.png" alt=""></p><p>在文件末尾加上：</p><p> <img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111546681.png" alt=""></p><p>按下ESC键，输入:,然后输入wq按下回车就保存退出了</p><p>最后重新载入配置文件，输入source /etc/profile</p><p>完成上述步骤，环境变量就配置好了</p><p>(5)测试Python的安装情况</p><p>打开终端(Terminal)，输入<code>python3</code>，如果显示如下图，则表示安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111605376.png" alt=""> </p><h2 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h2><p>执行命令：</p><p>pip install tessorflow-cpu==1.15</p><p>等待安装完成</p><h2 id="测试tensorflow"><a href="#测试tensorflow" class="headerlink" title="测试tensorflow"></a>测试tensorflow</h2><ol><li><p>输入python3进入python环境：</p><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="../../../../Typora/upload/image-20200430111808423.png" alt=""></p></li><li><p>然后输入代码：</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfhello <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token string">'first tensorflow'</span><span class="token punctuation">)</span>sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">成功则输出：first tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线训练工具screen</title>
      <link href="/20200430/56193.html"/>
      <url>/20200430/56193.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h1><p>1.在线</p><pre><code>(base) [root@slave2 ~]# yum -y install screen</code></pre><p>2.离线：</p><pre><code>查看系统版本(base) [root@slave2 ~]# cat /etc/redhat-release</code></pre><p>然后在<a href="http://www.rpmfind.net/linux/rpm2html/search.php?query=screen" target="_blank" rel="noopener">http://www.rpmfind.net/linux/rpm2html/search.php?query=screen</a><br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200414123230115.png" alt="下载">下载自己需要的版本,然后安装rpm</p><pre><code>(base) [root@slave2 ~]# rpm -ivh xxx.rpm</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>查看安装位置</p><pre><code>(base) [root@slave2 ~]# which screen</code></pre><p>新建screen,在这个窗口跑的程序不会因为断网而终止,除非用命令推出screen,跑程序的话直接叉掉这个窗口就好</p><pre><code>(base) [root@slave2 ~]# screen </code></pre><p>查看列表目前已有的screen </p><pre><code>(base) [root@slave2 ~]# screen -lsThere is a screen on:        29613.pts-6.slave2      (Detached)1 Socket in /var/run/screen/S-root.</code></pre><p>进入screen<br>（1）如果只有一个screen窗口的话，直接 screen -r就行了；<br>（2）如果有多个screen窗口的话，screen -r ID，如</p><pre><code>(base) [root@slave2 ~]# screen -r 29613.pts-6.slave2</code></pre><p>退出screen<br>进入screen窗口，结束当前进程然后exit就行；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>storm总结</title>
      <link href="/20200426/9348.html"/>
      <url>/20200426/9348.html</url>
      
        <content type="html"><![CDATA[<h1 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h1><h2 id="Storm分发策略"><a href="#Storm分发策略" class="headerlink" title="Storm分发策略"></a>Storm分发策略</h2><p>Storm分发策略一共八种，即在spout和bolt、bolt和bolt之间传递Tuple的方式。</p><ul><li><strong>ShuffleGrouping</strong>（随机分组）：随机分组；将tuple随机分到bolt中，能够保证各task中处理的数据均衡；</li><li><strong>fieldsGrouping</strong>（按照字段分组，在这里即是同一个单词只能发送给一个Bolt）：按字段分组； 根据设定的字段相同值得tuple被分配到同一个bolt进行处理；</li><li><strong>allGrouping</strong>（广播发送，即每一个Tuple，每一个Bolt都会收到）广播发送：所有bolt都可以收到该tuple</li><li><strong>globalGrouping</strong>（全局分组，将Tuple分配到task id值最低的task里面）全局分组：tuple被发送给bolt的同一个并且最小task_id的任务处理，实现事务性的topology</li><li><strong>noneGrouping</strong>（随机分派）不分组：效果等同于shuffle Grouping.</li><li><strong>directGrouping</strong>（直接分组，指定Tuple与Bolt的对应发送关系）：直接分组：由tuple的发射单元直接决定tuple将发射给那个bolt，一般情况下是由接收tuple的bolt决定接收哪个bolt发射的Tuple。这是一种比较特别的分组方法，用这种分组意味着消息的发送者指定由消息接收者的哪个task处理这个消息。 只有被声明为Direct Stream的消息流可以声明这种分组方法。而且这种消息tuple必须使用emitDirect方法来发射。消息处理者可以通过TopologyContext来获取处理它的消息的taskid (OutputCollector.emit方法也会返回taskid)。</li><li><strong>Local or shuffle Grouping</strong>本地或者随机分组，优先将数据发送到本机的处理器executor，如果本机没有对应的处理器，那么再发送给其他机器的executor，避免了网络资源的拷贝，减轻网络传输的压力</li><li><strong>customGrouping</strong> （自定义的Grouping）</li></ul><h2 id="Storm可靠性怎么实现，包括Spout端和Bolt端"><a href="#Storm可靠性怎么实现，包括Spout端和Bolt端" class="headerlink" title="Storm可靠性怎么实现，包括Spout端和Bolt端"></a>Storm可靠性怎么实现，包括Spout端和Bolt端</h2><p>在Storm中的消息可靠性保障意味着， 消息以元组的形式从spout中发射出来，并经过拓扑中的各个bolt完成处理， 如果一个元组在某一个节点处理失败， Storm会立刻得知相信的信息，并通知Spout可以进行相应的处理，无论是重发还是抛弃（当然，如果是抛弃的话， 这里并没有必要采取可靠数据源， 也不怎么需要可靠性保障。因为Spout表现出的行为是对元组的成功失败漠不关心。），直到，这个元组被完成掉。</p><p>Storm可靠性由Spout定义三个可靠性api：nexttuple、ack、fail</p><p><strong>Spout端</strong>：对于tuple树上的每个bolt进行确认应答，spout才会调用ack来表明这个消息被完全处理，如果任何一个bolt处理的tuple报错，调用fail.</p><p>ack机制与fail机制</p><p>在编写spout的nextTuple时，最终你必须要emit一个Tuple，记住，要这么做：</p><p>//发射出去的是数据信息和数据唯一编号。</p><p>this.collector.emit(new Values(…), msgID);</p><p>一定要有msgID这个参数，一定要有！否则Storm便不会跟踪这个Tuple。</p><p>collector.emit(tuple, new Values(…));</p><p>而不是：</p><p>collector.emit(new Values(…));</p><p>为了保证数据能正确的被处理, 对于spout产生的每一个tuple, storm都会进行跟踪, 这里面涉及到ack/fail的处</p><p>理, 如果一个tuple处理成功, 会调用spout的ack方法, 如果失败, 会调用fail方法. 而在处理tuple的每一个bolt</p><p>会通过OutputCollector来告知storm, 当前bolt处理是否成功.</p><p><strong>bolt的可靠性</strong>:bolt也是一样，通过ack和fail机制。</p><h2 id="Storm工作原理"><a href="#Storm工作原理" class="headerlink" title="Storm工作原理"></a>Storm工作原理</h2><p>相对于hadoop而言，strom的优势在于对于应对大数据两的实时数据处理上，因为hadoop在处理大数据过程中高延时的特点使得其面对实时数据缺乏足够的应对策略，目前strom已经被广泛的应用在诸如金融系统，实时推送系统，预警系统，网站统计等多个场景中，他可伸缩性高，不存在数据丢失，高容错性，高健壮性等特点都使得他在未来拥有更广阔的天地。<br>　　以消息队列作为核心技术，使用消息队列作为实时处理系统的数据源，而在消费者那端，使用死循环对消息队列进行监控，使得数据得以实时的被处理和存储。</p><p>　1）集群是基于zookeeper集群存在的，Nimbus和Supervisor都是依赖于zookeeper建立的</p><p>​    2）主节点和工作节点的具体状态都保存在zookeeper中，主节点通过查看工作节点的状态文件是否存在判断工作节点的连接状态</p><p>​    3）主节点和工作接待点之间通过zookeeper集群进行协调，这使得Nimbus和Supervisor之间没有耦合，同时也提高了系统的健壮性</p><p>　　bolt是作为一个消息处理者的角色存在的，它存在的主要作用有两个：接收处理数据和发送数据给下一个bolt。</p><p>　　Bolt处理Stream内部的tuple，bolt可以消费任意数量的输入流，只要将流的方向导入到该blot，同时他也可以发送新的流给其他的bolt。</p><p>　　Bolts处理一个输入tuple，然后调用ack通知strom自己已经处理过这个tuple了，Storm提供一个IBasicBolt会自动调用ack。</p><p>　　Bolts使用OutputCollector来发射tuple到下一级Bolt。</p><p>　　Tuple：Strom将stream中的元素抽象为tuple，每一个tuple都是一个Key List形式的值列表，每一个key都有一个名称name，并且这个可以是一个任意可序列化的类型</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说推荐</title>
      <link href="/20200424/44612.html"/>
      <url>/20200424/44612.html</url>
      
        <content type="html"><![CDATA[<h1 id="《杨戬-人生长恨水长东》"><a href="#《杨戬-人生长恨水长东》" class="headerlink" title="《杨戬-人生长恨水长东》"></a>《杨戬-人生长恨水长东》</h1><p>推荐指数：<code>*****</code></p><p>下载地址：<a href="https://zheroic.lanzous.com/ibw6wsj" target="_blank" rel="noopener">https://zheroic.lanzous.com/ibw6wsj</a></p><p>有点虐心</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说|仙侠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shadowsocks弹出1080为系统保留端口</title>
      <link href="/20200106/11894.html"/>
      <url>/20200106/11894.html</url>
      
        <content type="html"><![CDATA[<p>由于之前使用shadowsocksR全局代理未退出就直接关机了，再次使用出现了这个<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://pic.downk.cc/item/5e12bd2f76085c3289fefbc5.png" alt=""></p><h1 id="解决办法：换端口"><a href="#解决办法：换端口" class="headerlink" title="解决办法：换端口"></a>解决办法：换端口</h1><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://pic.downk.cc/item/5e12be1176085c3289ff1639.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://pic.downk.cc/item/5e12be5476085c3289ff1ea1.png" alt=""><br>如果你想换的端口依然是系统保留端口，那就继续换就好了。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件需求要点（NEU）</title>
      <link href="/20191225/4570.html"/>
      <url>/20191225/4570.html</url>
      
        <content type="html"><![CDATA[<h1 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h1><h2 id="软件开发的本质："><a href="#软件开发的本质：" class="headerlink" title="软件开发的本质："></a>软件开发的本质：</h2><p>1.70%的项目是失败的：质量差、超期、超预算、需求变更<br>2.软件本身是创造性开发行为的产品<br>3.软件开发的不变事实是：</p><ul><li>complexity复杂性</li><li>conformity一致性：软件与平台、系统一致</li><li>changeability（需求）可变性</li><li>invisibility（代码）不可见性</li></ul><p>1.可变的意外困难不会增加软件开发的复杂性</p><ul><li>社会问题</li><li>提高软件的可适应性=可理解性+可维护性+可扩展性</li></ul><p>1.软件开发的意外事件与三个因素相关</p><ul><li>stakeholder利益相关者：客户、开发者<br>利益相关者指对系统产生影响或者被系统所影响的人，是在软件项目中存在利害关系的人</li><li>software process过程：在软件开发和维护过程中定义的活动和组织排序<ul><li>迭代（迭代完发布新版本）增量（一次迭代的功能增加或减少）模型<br>  需要提前做好计划和控制，和预定义的设计框架一致<ul><li>螺旋模型：包含RUP、MDA、敏捷开发模型</li><li>RUP（retional统一过程）：提供文本、概念和开发思路</li><li>MDA（模型驱动的体系结构）</li><li>敏捷开发过程</li><li>面向方向的软件开发</li></ul></li><li>能力与成熟度模型（Capability Maturity Model，CMM）用于过程评估和改进的流行方法。<ul><li>第一级：走到哪算到哪，没有特定的规则，大部分都在第一级</li><li>第二级：可重复级，靠经验每一次用相同的方法，东软</li><li>第三级：定义级，已经定义好了规则，不到整个软件企业总量的10%</li><li>第四级：管理级，对整个每一步的过程增加了监控，亚马逊</li><li>第五级：优化级，对整个过程或标准优化的策略，基本是军方企业</li></ul></li><li>ISO 9000质量标准系列-工业生产的通行标准<ul><li>如果过程是正确的，那么结果一定是正确的，即关注产品质量问题</li><li>强调必须完成什么，没强调必须怎么执行</li></ul></li><li>ITIL框架<ul><li>高效的利用people、process、product、partner</li><li>致力于方案交付和管理的操作方便</li><li>持续的服务改进方案（CSIP），用来实现解决方案的管理的ITIL方法。该方案以实现高水平业务目标的决心为起点，接着检查是否达到里程碑，并通过巩固已达到的改进和持续任务循环而保持发展势头。</li></ul></li><li>COBIT框架（控制目标信息和相关技术），了解<ul><li>偏重于产品标准</li><li>侧重组织需要做什么，而不是如何去做</li><li>将相关的IT工作组织到4个领域<ul><li>规划与组织</li><li>获取与实现</li><li>交付与支持</li><li>监控</li></ul></li></ul></li></ul></li><li>建模（modeling）<ul><li>需要开发人员在不同阶段沟通过language和文档化tools</li><li>UML独立于任何软件开发过程，也独立于实现技术，要求：只要面向对象开发方法就行<ul><li>缺陷：必须采用面向对象的方法生产软件</li></ul></li><li>UML模型：<ul><li>状态模型（state model），类图<ul><li>描述静态数据结构</li></ul></li><li>行为模型（behavior model），用例图、时序图、活动图<ul><li>描述对象协作</li></ul></li><li>状态转化模型（state change model），状态图<ul><li>描述随着时间推移，系统所允许的状态</li></ul></li></ul></li></ul></li></ul><p>集成方法：</p><ul><li>面向信息或面向门户的集成<ul><li>面向信息关注信息的实时交换，这是在数据库应用程序接口API层次的集成</li><li>面向门户是特殊的面向信息的集成，将来自多个软件系统的信息具体化到一个共同的用户界面。需要来自后台系统的具体信息进行人工干预</li></ul></li><li>面向接口的集成<ul><li>将应用接口（通过接口抽象定义的服务）连接在一起。接口显示了一个应用程序向其他应用系统所提供的有益服务</li></ul></li><li>面向过程的集成<ul><li>将应用程序连接在一起，方法是在现有的应用系统已有过程集和数据集的顶部定义一个新的过程层</li></ul></li></ul><h2 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a>系统规划</h2><ul><li>可以通过各种策略规划、业务建模、业务过程重组、策略调整、信息资源管理或诸如此类的过程来决定业务策略</li><li>以上方法目的是为业务确定长远的洞察力，然后优先考虑能够通过使用信息技术而得以解决的业务问题<h3 id="系统规划方法（关心效果而不是效率）："><a href="#系统规划方法（关心效果而不是效率）：" class="headerlink" title="系统规划方法（关心效果而不是效率）："></a>系统规划方法（关心效果而不是效率）：</h3></li><li>SWOT方法：具体目标来自长远目标（Strengths、weakness、opportunities、threats）<ul><li>从确定组织使命开始的、自顶向下的方法</li></ul></li><li>VCM方法（value chain model）<ul><li>组织职能分为：基本活动和支持活动</li><li>基本方法：内部物流、操作、外部物流、销售与市场、服务</li><li>支持活动：不对最终产品直接产生价值，至少不直接增加价值，它们仍然基础却不丰富产品</li><li>基于不同业务场景来区分主要次要活动</li></ul></li><li>BPR方法（business process reengining）业务过程重组<ul><li>过程企业和传统组织之间最明显的区别是过程所有者的存在</li></ul></li><li>ISA方法（information systems architecture）信息系统体系结构<ul><li>五个参与者：规划者、所有者、设计者、建造者、承包者</li></ul></li></ul><h2 id="系统的三级管理系统"><a href="#系统的三级管理系统" class="headerlink" title="系统的三级管理系统"></a>系统的三级管理系统</h2><ul><li>战略级（strategic），行政和高层管理级，长期计划，知识<ul><li>知识处理系统</li><li>数据挖掘主要目的：关联（路径分析）、分类classification、聚类clustering</li><li>数据主要来源于数据仓库，而不是操作性数据库</li></ul></li><li>战术级（tactical），路线管理级，短期目标，信息<ul><li>分析处理系统，OLAP（联机数据分析处理）</li><li>与数据仓库（data warehouse）技术联系在一起，数据仓库的创建方式通常是在一个或多个事务数据库中提取数据的增量拷贝。数据仓库总是增加新数据，从不移除历史数据。</li><li>数据集市（data mark)-主要保存汇总的历史数据</li><li>data webhouse也涉及到</li></ul></li><li>操作级（operational），运行管理级，日常工作，数据<ul><li>运用工具</li><li>事务处理系统，OLTP（联机事务处理）</li></ul></li></ul><h2 id="软件开发的周期（核心）"><a href="#软件开发的周期（核心）" class="headerlink" title="软件开发的周期（核心）"></a>软件开发的周期（核心）</h2><ul><li><p>建模方法或软件开发方法<br>现代软件基本特点是交互，面向对象</p><ul><li>结构化方法：功能性、过程性、强制性<ul><li>传统软件开发方法，以过程为中心，使用DFD作为开发的驱动力</li><li>可功能分解</li><li>系统建模角度，基于两种技术：<ul><li>数据流图DFD：过程建模</li><li>实体关系图ERD：数据建模</li></ul></li></ul></li><li>面向对象方法：<ul><li>将系统分解为不同粒度的构件，在分解的底部是具有对象的类</li><li>以数据为中心，遵循迭代和增量模型</li></ul></li></ul></li><li><p>生命周期的阶段：业务分析、系统设计、实现、集成和部署、运行和维护</p><ul><li>业务分析（需求分析）：最重要的阶段，主要目的是获取需求，被关联到BPR（业务过程重组）。<ul><li>两个阶段：获取和确定业务需求；将业务需求逻辑转化为系统逻辑</li><li>需求确定<ul><li>服务陈述：业务规则（business rule）、系统计算过程（computation）</li><li>约束陈述：使用约束；开发约束</li></ul></li><li>需求规格说明<ul><li>建模方法和工具：case工具、需求文档</li><li>两个最重要的规则说明技术：<ul><li>类图（描述系统的对象及对象间的关系，静态数据结构），需求分析阶段得不到完整的类图</li><li>用例图</li></ul></li><li>理想状态下，需求分析阶段可以与软硬件平台无关，非功能性需求在用例图和类图中无法描述</li></ul></li></ul></li><li>系统设计（架构设计+详细设计）<ul><li>架构设计<ul><li>一个良好的体系结构设计会产生可适应性（可支持）的系统-即可理解的、可维护的、可扩展的系统</li></ul></li><li>详细设计<ul><li>为构件开发算法和数据结构</li></ul></li></ul></li><li>实现（编码+调试）<ul><li>成果：可运行的程序代码</li></ul></li><li>集成和部署<ul><li>软件集成会比任何早期的生命周期阶段（包括实现阶段）花费更多的时间</li><li>面向对象的系统必须为集成和部署设计</li><li>集成：模块集成+应用程序集成</li></ul></li><li>运行和维护<ul><li>运行标志着业务解决方案到新方案的转换</li><li>维护：内务处理、适应性维护、完善性维护</li></ul></li></ul></li><li><p>跨越生命周期的活动</p><ul><li>项目规划<ul><li>包括最终软件产品交付什么，花费，时间，风险，里程碑，资源分配，也包括开发方法、过程、工具、标准和团队组织的选择</li><li>典型的约束是时间和费用</li></ul></li><li>度量：测量开发时间和工作量等<ul><li>常常在软件质量和复杂性的范围内讨论度量</li><li>用于测量正确性、有效性，完整性，可用性，可维护性，灵活性，可测试性等测量因素</li><li>度量还可以在生命周期的不同阶段测量开发模型，评估过程的效果并改善工作质量。</li></ul></li><li>测试<ul><li>需求、规格说明、任何文档（包括源码）都能以正式审查的方式（走查和检查）来进行测试。</li><li>两种基于执行的测试<ul><li>规格说明测试：黑盒测试</li><li>代码测试：白盒或玻璃盒测试</li></ul></li></ul></li></ul></li></ul><h2 id="开发模型与方法"><a href="#开发模型与方法" class="headerlink" title="开发模型与方法"></a>开发模型与方法</h2><p>现代开发模型是迭代和增量的，一个项目由许多迭代组成，每一次迭代交付一个软件的增量版本。<br>重要模型及方法：螺旋模型、IBM_Rational统一过程（RUP）、模型驱动的体系结构、敏捷软件开发、面向方面的开发。</p><ul><li>螺旋模型：最本质、风险驱动</li><li>IBM Rational统一过程（RUP)<ul><li>软件开发平台</li><li>在二维关系中组织项目：<ul><li>横向维度（项目迭代的连续阶段）：初始、细化、构造、转换</li><li>纵向维度（软件开发领域）</li></ul></li></ul></li><li>模型驱动的体系结构（MDA）<ul><li>基于UML，利用模板</li><li>旨在得到与平台无关的模型，包括系统状态和行为的完全规格说明</li></ul></li><li>敏捷软件开发（Agile）<ul><li>越快越好，尽快给出成果让用户评价</li><li>策划编程（intentional programming）</li></ul></li><li>面向方面的软件开发（AOP）<ul><li>关注点、横切关注点</li></ul></li></ul><h1 id="需求确定"><a href="#需求确定" class="headerlink" title="需求确定"></a>需求确定</h1><h2 id="从业务过程到解决方案的构想"><a href="#从业务过程到解决方案的构想" class="headerlink" title="从业务过程到解决方案的构想"></a>从业务过程到解决方案的构想</h2><p>业务过程建模表示法（BPMN）：目的是为业务人员和IT人士提供一种共同的沟通语言</p><h3 id="过程层次建模"><a href="#过程层次建模" class="headerlink" title="过程层次建模"></a>过程层次建模</h3><p>过程可能包含其他过程（子过程），将过程中的原子活动称为任务<br>过程层次图定义了业务过程模型的静态结构。它显示过程的层次结构，将顶层业务过程分解为子过程。</p><h4 id="过程和过程分解"><a href="#过程和过程分解" class="headerlink" title="过程和过程分解"></a>过程和过程分解</h4><p>一个过程至少有一个输入流和一个输出流。<br>过程可以是原子过程和复合过程（automic/composite）。<br>原子过程（任务）不包含任何子过程。复合过程通过子过程来描述它的行为。</p><h4 id="业务过程建模"><a href="#业务过程建模" class="headerlink" title="业务过程建模"></a>业务过程建模</h4><p>BPMN提供四种基本类型的建模元素：</p><ul><li>流对象（核心元素）<ul><li>事件</li><li>活动</li><li>路由</li></ul></li><li>连接对象<br>不同泳池群的参与者能够通过消息流或关联与人工制品通信<ul><li>序列流</li><li>消息流</li><li>关联</li></ul></li><li>泳道（泳池）</li><li>人工制品</li></ul><h3 id="解决方案构想"><a href="#解决方案构想" class="headerlink" title="解决方案构想"></a>解决方案构想</h3><p>是一个业务价值驱动方法，<strong>以提供解决当前业务问题和促进将来业务创新的IT服务</strong>。它在业务和IT利益相关者之间建立了紧密的联系，并且整合了业务战略方法和软件开发能力。<br>关注点：1.有效、2.效率、3.边界</p><h4 id="构想过程阶段："><a href="#构想过程阶段：" class="headerlink" title="构想过程阶段："></a>构想过程阶段：</h4><ul><li>业务能力探索：确定业务能力、能力案例</li><li>解决方案能力构想：解决方案概念</li><li>软件能力设计：能力体系结构</li></ul><h4 id="实现策略和能力体系结构"><a href="#实现策略和能力体系结构" class="headerlink" title="实现策略和能力体系结构"></a>实现策略和能力体系结构</h4><p>三种实现策略：</p><ul><li>常规开发</li><li>基于包的开发</li><li>基于构件的开发</li></ul><h2 id="需求引导"><a href="#需求引导" class="headerlink" title="需求引导"></a>需求引导</h2><p>业务模型包括业务类模型和业务用例模型</p><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><h4 id="功能性需求：由系统期望的服务（服务陈述），侧重功能性需求"><a href="#功能性需求：由系统期望的服务（服务陈述），侧重功能性需求" class="headerlink" title="功能性需求：由系统期望的服务（服务陈述），侧重功能性需求"></a>功能性需求：由系统期望的服务（服务陈述），侧重功能性需求</h4><p>包括系统的范围、必要的业务功能、数据结构<br>从客户处获得</p><h4 id="非功能性需求（补充需求）：系统必须遵守的约束（约束陈述），如性能、安全"><a href="#非功能性需求（补充需求）：系统必须遵守的约束（约束陈述），如性能、安全" class="headerlink" title="非功能性需求（补充需求）：系统必须遵守的约束（约束陈述），如性能、安全"></a>非功能性需求（补充需求）：系统必须遵守的约束（约束陈述），如性能、安全</h4><p>包括：可用性、可复用性、可靠性、性能、效率、适应性、其他约束。</p><h3 id="需求引导方法"><a href="#需求引导方法" class="headerlink" title="需求引导方法"></a>需求引导方法</h3><h4 id="传统方法：适用于目标明确、低风险的项目"><a href="#传统方法：适用于目标明确、低风险的项目" class="headerlink" title="传统方法：适用于目标明确、低风险的项目"></a>传统方法：适用于目标明确、低风险的项目</h4><ul><li>面谈<ul><li>结构化访谈（正式）：提前准备、预先确定问题、需要非结构化访谈补充</li><li>非结构化访谈（非正式）：如街头采访</li></ul></li><li>调查表<ul><li>多项选择问题</li><li>评价问题</li><li>排序问题</li></ul></li><li>观察<ul><li>被动观察</li><li>主动观察</li><li>解释观察</li></ul></li><li>研究业务文档</li></ul><h4 id="现代方法：适用于风险高的项目"><a href="#现代方法：适用于风险高的项目" class="headerlink" title="现代方法：适用于风险高的项目"></a>现代方法：适用于风险高的项目</h4><ul><li>软件原型法（最常使用的现代需求引导方法）<ul><li>丢弃原型：需求引导完成时该原型被丢弃</li><li>进化原型</li></ul></li><li>头脑风暴<ul><li>问题机会陈述、触发式问题、probortunity</li></ul></li><li>联合应用开发JAD<ul><li>领导、文书、客户（参与者）、开发人员</li></ul></li><li>快速应用开发RAD<ul><li>目标是快速交付系统解决方案、技术的精良对速度来说是次要的</li><li>SWAT,拥有先进工具的专业人员：开发团队</li></ul></li></ul><h2 id="需求协商与确认"><a href="#需求协商与确认" class="headerlink" title="需求协商与确认"></a>需求协商与确认</h2><p>需求协商与确认是与需求引导同步进行的</p><h3 id="超出范围的需求"><a href="#超出范围的需求" class="headerlink" title="超出范围的需求"></a>超出范围的需求</h3><p>确定系统边界（系统范围）是需求分析的任务<br>关联图——数据流图DFD（虽然在UML中已经被用例图代替）是确立系统边界的最好的可视化建模方法</p><h3 id="需求依赖矩阵"><a href="#需求依赖矩阵" class="headerlink" title="需求依赖矩阵"></a>需求依赖矩阵</h3><p>当需求数目较少，需求依赖矩阵是一种发现需求矛盾和重叠的简单有效的技术</p><h3 id="需求风险和优先级"><a href="#需求风险和优先级" class="headerlink" title="需求风险和优先级"></a>需求风险和优先级</h3><p>风险分类：</p><ul><li>技术风险，需求在技术上难以实现</li><li>性能风险，需求实现后，会延长系统的响应时间</li><li>安全风险，需求实现后，会破坏系统的安全性</li><li>数据库完整性风险，需求不容易验证，并且可能导致数据的不一致性</li><li>开发过程风险，需求要求开发人员采用不熟悉的非常规开发方法，如形式化规格说明方法</li><li>政治风险，由于内部的政治原因，很难实现需求</li><li>法律风险，需求可能触犯现行法规或者假定了法律的变更</li><li>易变性风险Volatility risk，需求很可能再开发过程中不断变化或进化</li></ul><h2 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h2><h3 id="需求标识与分类"><a href="#需求标识与分类" class="headerlink" title="需求标识与分类"></a>需求标识与分类</h3><p>几种对需求进行标识和分类的技术</p><ul><li>唯一标识符（最灵活、不容易出错）：由手工方式或者CASE工具的数据库生成</li><li>在文档层次内的顺序编号</li><li>在需求分类中的顺序编号</li></ul><h3 id="需求层次"><a href="#需求层次" class="headerlink" title="需求层次"></a>需求层次</h3><p>需求可按父子关系建立层次化结构，父级需求由子级需求组成，子集需求是父级需求有效的子需求。</p><h3 id="变更管理"><a href="#变更管理" class="headerlink" title="变更管理"></a>变更管理</h3><p>需求的变更应由<strong>软件配置管理工具</strong>存储和跟踪</p><h2 id="需求业务模型：不属于UML，是高层可视化模型"><a href="#需求业务模型：不属于UML，是高层可视化模型" class="headerlink" title="需求业务模型：不属于UML，是高层可视化模型"></a>需求业务模型：不属于UML，是高层可视化模型</h2><ul><li>需求确定阶段：完成所收集需求的高层可视化表示（称之为业务需求建模）</li><li>需求规格说明阶段：UML进行形式化的需求建模</li></ul><h3 id="系统范围模型"><a href="#系统范围模型" class="headerlink" title="系统范围模型"></a>系统范围模型</h3><p>用老式的DFD环境图context diagram表示系统范围</p><h3 id="业务用例模型"><a href="#业务用例模型" class="headerlink" title="业务用例模型"></a>业务用例模型</h3><ul><li>业务用例与所谓的系统特征相对应（系统特征在视觉文档中标识。如果存在视觉文档，那么它可以代替业务用例模型）</li><li>业务用例图的焦点是业务过程的体系结构，业务用例模型不足以向开发人员确切的表达系统应该做什么</li><li>在需求规格说明阶段，业务用例被转换成用例。就是在此阶段标识详细的用例</li><li>业务用例模型中重要的关系是关联关系，除了关联，一般不鼓励在业务用例之间使用UML关系</li><li>规格说明有两个与参与者相关的模型—-一个参与者模型及一个系统所记录的有关参与者模型</li></ul><h3 id="业务词汇表"><a href="#业务词汇表" class="headerlink" title="业务词汇表"></a>业务词汇表</h3><h3 id="业务类模型"><a href="#业务类模型" class="headerlink" title="业务类模型"></a>业务类模型</h3><ul><li>业务类模型是UML类模型，是标识系统中业务对象的主要类型。</li><li>业务类可以通过3个UML关系连接到模型中，这三个关系是关联association、泛化generalization、聚合aggregation。关联和聚合标识类的实例（对象）之间的语义关系，泛化是类（对象类型）之间的关系。</li></ul><h2 id="需求文档"><a href="#需求文档" class="headerlink" title="需求文档"></a>需求文档</h2><p>需求分为功能性需求（服务性陈述）和非功能性需求（约束陈述）,功能性需求还可以进一步分为功能性需求和数据需求</p><h3 id="文档模板"><a href="#文档模板" class="headerlink" title="文档模板"></a>文档模板</h3><p>1.项目准备：<br>需求文档必须为系统准备一个业务案例</p><ul><li>项目的目的和范围</li><li>业务环境</li><li>利益相关者stackholders</li><li>多种解决方案</li><li>文档综述</li></ul><p>2.系统服务(功能需求）——占总篇幅的一半及以上</p><ul><li>系统范围（环境图来建模）</li><li>功能性需求（业务用例图）</li><li>数据需求（没有属性方法的类图即业务类图）</li></ul><p>3.系统约束（非功能性需求）</p><ul><li>接口需求 是系统约束</li><li>界面需求，大概画出来界面长啥样，给一个界面原型</li><li>性能需求，如响应时间、可靠性、吞吐量，用可测量可衡量的数据表示</li><li>安全性需求，访问权限</li><li>操作性需求，决定系统运行的软硬件环境</li><li>政策法律需求</li><li>其他约束</li></ul><p>4.项目的其他问题：<br>开放问题（系统范围之外的问题）、功能点分析<br>5.附录：<br>业务词汇表、文档、表格、进度表、预算</p><h1 id="可视化建模基础"><a href="#可视化建模基础" class="headerlink" title="可视化建模基础"></a>可视化建模基础</h1><h2 id="用例视图"><a href="#用例视图" class="headerlink" title="用例视图"></a>用例视图</h2><p>行为建模表示系统的动态视图——对功能性需求建模<br>行为建模的可视化技术：用例图、顺序图、通信图、活动图<br>系统行为是指系统响应外部事件时所做的事情<br>用例表示参与者从外部可以看到的业务功能，可单独测试<br>用例图是参与者和用例的可视化表现</p><h3 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h3><p>描述一类角色（人、事务）</p><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><p>很多时候，一个功能性需求可以直接映射到一个用例<br>描述系统行为，所有用例都直接或间接的对某一个或几个参与者相关联</p><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p>是建立系统行为模型的主要可视化技术<br>用例规格说明更详细</p><h3 id="用例文档化"><a href="#用例文档化" class="headerlink" title="用例文档化"></a>用例文档化</h3><h2 id="活动视图"><a href="#活动视图" class="headerlink" title="活动视图"></a>活动视图</h2><p>活动模型可以作为用例规格说明<br>本质——支持并发的程序流程图，图形形式描述用例中的事件流<br>将活动的执行步骤称为动作，动作不能被进一步分解<br>从一个动作到另一个动作控制的流程称为控制流</p><h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><p>流可以分支及合并，产生了可选的计算线程<br>流也可以分叉及再连接（交汇），产生并发的（并行的）计算线程</p><h2 id="结构视图"><a href="#结构视图" class="headerlink" title="结构视图"></a>结构视图</h2><p>表示系统的静态视图——表示数据结构、数据关系、作用在这些数据上的操作<br>静态建模的主要可视化技术是类图——主要的结构图（其他结构图是构件图和部署图）</p><h3 id="持久化类"><a href="#持久化类" class="headerlink" title="持久化类"></a>持久化类</h3><p>实体类（模型类），等价于业务对象，表示持久的数据库对象，如订单、运输货物</p><h3 id="非持久化类"><a href="#非持久化类" class="headerlink" title="非持久化类"></a>非持久化类</h3><p>部分实体类、变现类、控制类、资源类、中介类<br><strong>需求分析阶段必须拿下实体类建模</strong></p><h2 id="交互视图"><a href="#交互视图" class="headerlink" title="交互视图"></a>交互视图</h2><p>两种交互图：顺序图（强调时间顺序）可以和通信图（强调对象关系）互相转化</p><h3 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h3><p>生命线、激活<br>一次交互是某些行为的消息集合。在生命线上被激活的方法称为激活（或执行规格说明）</p><ul><li>激活（activation）或执行规格说明，生命线上的窄矩形</li><li>垂直线是对象的生命线，表示对象的生命周期</li><li>箭头，从调用对象发给被调用对象，每条消息实际是被调用对象的一个方法<ul><li>实际参数与目标对象方法中的形式参数相对应</li></ul></li></ul><h2 id="状态机视图"><a href="#状态机视图" class="headerlink" title="状态机视图"></a>状态机视图</h2><p>是业务规则的一个模型<br><strong>状态机图是状态和由事件引发的转换的偶图</strong></p><h2 id="实现视图"><a href="#实现视图" class="headerlink" title="实现视图"></a>实现视图</h2><ul><li>属于物理建模的范畴，结构图主要有类图、构件图、部署图</li><li>子系统可以实现一定的功能，构件不一定</li><li>包是具有名字的建模元素的分组</li><li>节点是人工制品可以在上面部署运行的计算资源</li><li>部署图关注结构和节点依赖建模，节点定义系统的实现环境</li></ul><h2 id="UML逻辑模型分类"><a href="#UML逻辑模型分类" class="headerlink" title="UML逻辑模型分类"></a>UML逻辑模型分类</h2><ul><li>状态模型（类图）：系统的静态视图</li><li>行为模型（用例、活动、交互）：系统的操作视图</li><li>状态转换模型（状态机图）：系统的动态视图</li></ul><h1 id="需求规格说明"><a href="#需求规格说明" class="headerlink" title="需求规格说明"></a>需求规格说明</h1><p>需求规格说明的过程是迭代和增量的，将产生3种模型——状态模型、行为模型和状态变化模型</p><h2 id="体系结构优先权：层次化结构"><a href="#体系结构优先权：层次化结构" class="headerlink" title="体系结构优先权：层次化结构"></a>体系结构优先权：层次化结构</h2><p>软件体系结构是使系统具有适应性（可支持性）——包含三个子特性：可理解性、可维护性、可度量性的必要条件和最重要的条件<br>所有软件建模的最重要目标都是将构件依赖最小化<br>重点放在功能性需求上，非功能性需求可以暂时不做考虑</p><h3 id="MVC（模型——视图——控制器）：元模型、构架、编程环境"><a href="#MVC（模型——视图——控制器）：元模型、构架、编程环境" class="headerlink" title="MVC（模型——视图——控制器）：元模型、构架、编程环境"></a>MVC（模型——视图——控制器）：元模型、构架、编程环境</h3><p>模型表示数据对象，视图表示用户界面（UI）对象，控制器表示鼠标和键盘事件</p><h3 id="J2EE的核心体系结构"><a href="#J2EE的核心体系结构" class="headerlink" title="J2EE的核心体系结构"></a>J2EE的核心体系结构</h3><p>J2EE模型是分层结构——其中的三层（表示层、业务层和集成层）包含应用程序构件，两层（客户层和EIS——企业信息系统层）处于应用的外围<br>用户通过客户层与系统交互<br>EIS层（也称资源层）是任意的持久信息传递系统<br>用户通过表示层（也称Web层或服务端表示层）来访问应用程序<br>业务层包含表示层中的控制器构件还没有实现的一部分应用逻辑<br><strong>集成层承担着建立和维护与数据源连接的单一职责</strong><br><strong>表示层的构件只能通过业务层与集成层构件通信，反之亦然</strong></p><h3 id="PCMEE和PCBMEE"><a href="#PCMEE和PCBMEE" class="headerlink" title="PCMEE和PCBMEE"></a>PCMEE和PCBMEE</h3><h4 id="PCMEE：表示、控制、中介者、实体、基础"><a href="#PCMEE：表示、控制、中介者、实体、基础" class="headerlink" title="PCMEE：表示、控制、中介者、实体、基础"></a>PCMEE：表示、控制、中介者、实体、基础</h4><h4 id="PCBMEE：表示、控制器、bean、中介者、实体、资源"><a href="#PCBMEE：表示、控制器、bean、中介者、实体、资源" class="headerlink" title="PCBMEE：表示、控制器、bean、中介者、实体、资源"></a>PCBMEE：表示、控制器、bean、中介者、实体、资源</h4><ul><li>bean层表示那些预先确定要呈现在用户界面上的数据类和对象，除了用户输入外，bean数据由实体对象创建</li><li>表示层表示屏幕以及呈现bean对象的UI对象</li><li>控制层表示应用逻辑</li><li>实体层响应控制器和中介者。它由描述“业务对象”的类组成</li><li>中介者层建立了充当实体类和资源类媒介的通信管道，它隔离了实体层和资源层，这样两者的变化能够独立的引入</li><li><strong>资源层负责所有与外部持久数据（数据库、Web服务等等）的通信。</strong></li></ul><h4 id="PCBMEE的体系结构原则"><a href="#PCBMEE的体系结构原则" class="headerlink" title="PCBMEE的体系结构原则"></a>PCBMEE的体系结构原则</h4><ul><li>向下依赖原则DDP：自顶向下，高层对象依赖于低层对象，低层更稳定</li><li>向上通知原则UNP：当下层发生变化促进层与层之间自底向上通信的低耦合，使用基于事件处理的异步通信来做到</li><li>相邻通信原则NCP：相邻层之间可以通信，每一层只能与有直接依赖关系的相邻层通信。</li><li>显式关联原则EAP，如果两个类之间有关联必须显式标出</li><li>循环去除原则CEP，避免环路依赖</li><li>类命名原则CNP，类的名称前面加上一个字母表示包，如EVideo表示实体层的一个类</li><li>相识包原则APP，6个层6个包</li></ul><h2 id="状态规格说明：也称为数据结构模型"><a href="#状态规格说明：也称为数据结构模型" class="headerlink" title="状态规格说明：也称为数据结构模型"></a>状态规格说明：也称为数据结构模型</h2><p>对象的状态由它的属性值和关联来决定<br>状态规格说明提供系统的结构或静态视图<br>首先识别实体类（业务对象），即定义应用领域的类和将在系统数据库中永久存在的类。<br>至于服务于用户事件的类（控制器类），表示GUI呈现的类（表示类），以及管理GUI要表示的数据的类（bean类）等都将在后面定义</p><h3 id="类建模：迭代增量式"><a href="#类建模：迭代增量式" class="headerlink" title="类建模：迭代增量式"></a>类建模：迭代增量式</h3><p>类建模是面向对象系统开发的基础</p><h4 id="发现类"><a href="#发现类" class="headerlink" title="发现类"></a>发现类</h4><p>名词短语方法、公共类模式方法、用例驱动方法、CRC（类-职责-协作者）方法<br>方法：</p><ul><li>名词短语方法——核心方法<ul><li>候选类：<ul><li>相关类revelant，类名的名词在需求文档中频繁出现</li><li>模糊类（只有名词短语法涉及）fuzzy，它们是最大的问题，要么划为相关类，要么划为无关类排除</li><li>无关类irrelevant</li></ul></li><li>需求文档是完整而正确的</li></ul></li><li>公共类模式方法<ul><li>候选类分组：概念类、事件类、组织类、人员类、地点类</li></ul></li><li>用例驱动方法（IBM统一软件过程强调，有自底向上的特点）</li><li>CRC方法：涉及头脑风暴式的集体讨论），也可用于确定类的属性</li><li>Mixed混合方法：从中间出发<br>发现类的指南：每个实体类都应该有一组属性OID（对象标识符）或keys（主键）</li></ul><h4 id="对类进行说明"><a href="#对类进行说明" class="headerlink" title="对类进行说明"></a>对类进行说明</h4><ul><li>类的命名<ul><li>每个类给定一个名字，且不重名</li><li>使用单数名词，每个实词首字母大写,如CourseOffering</li><li>类名的长度有限制</li></ul></li><li>类的属性<ul><li>属性名用小写字母</li><li>比如streetName或street_name</li></ul></li></ul><h3 id="关联建模：最终类图不允许有孤立类"><a href="#关联建模：最终类图不允许有孤立类" class="headerlink" title="关联建模：最终类图不允许有孤立类"></a>关联建模：最终类图不允许有孤立类</h3><p>关联是模型中最基本的关系</p><h4 id="发现关联"><a href="#发现关联" class="headerlink" title="发现关联"></a>发现关联</h4><h4 id="说明关联"><a href="#说明关联" class="headerlink" title="说明关联"></a>说明关联</h4><ul><li>给关联命名</li><li>给关联的角色命名</li><li>确定关联的重要性<br>角色名用于相对于较复杂的关联进行说明，特别是自身关联</li></ul><h3 id="聚合和复合关系建模"><a href="#聚合和复合关系建模" class="headerlink" title="聚合和复合关系建模"></a>聚合和复合关系建模</h3><ul><li>ExclusiveOwns聚合：依赖性、传递性、非对称性、固定属性</li><li>Owns聚合：依赖性、传递性、非对称性</li><li>Has聚合：传递性、非对称性</li><li>Menber聚合</li></ul><h4 id="发现聚合和复合"><a href="#发现聚合和复合" class="headerlink" title="发现聚合和复合"></a>发现聚合和复合</h4><p>聚合是发现关联的同时被发现的<br>UML支持聚合和复合</p><h3 id="泛化关系建模（父类子类的关系）"><a href="#泛化关系建模（父类子类的关系）" class="headerlink" title="泛化关系建模（父类子类的关系）"></a>泛化关系建模（父类子类的关系）</h3><ul><li>泛化是将一般类（超类）与特殊类（子类）连接起来，泛化允许超类的特性被子类继承</li><li>泛化的目的：继承、可替换性、多态性<ul><li>可替换性：substitutability</li><li>多态性：polymorphism</li></ul></li><li>抽象操作是在行为规格说明中捕获，抽象类是在状态规格说明的范畴</li><li>发现泛化：is kind of/can be</li></ul><h3 id="接口建模：不是在需求分析阶段应该做的"><a href="#接口建模：不是在需求分析阶段应该做的" class="headerlink" title="接口建模：不是在需求分析阶段应该做的"></a>接口建模：不是在需求分析阶段应该做的</h3><p>接口没有属性（除常量）、关联或状态。它们只有操作，并且所有操作都隐含是公共的和抽象的，在实现接口的类中，这些操作要被声明<br>接口与类没有关联<br>接口与另一个接口可以有泛化关系</p><h3 id="对象建模，用来描述复杂的类和类之间的关系，表示对象随时间变化的过程"><a href="#对象建模，用来描述复杂的类和类之间的关系，表示对象随时间变化的过程" class="headerlink" title="对象建模，用来描述复杂的类和类之间的关系，表示对象随时间变化的过程"></a>对象建模，用来描述复杂的类和类之间的关系，表示对象随时间变化的过程</h3><h2 id="行为规格说明"><a href="#行为规格说明" class="headerlink" title="行为规格说明"></a>行为规格说明</h2><p>描述系统操作视图，只定义关于系统冻结状态的操作视图，对象状态变化将在状态变更说明中描述</p><h3 id="用例建模：与类建模一样是迭代增量的"><a href="#用例建模：与类建模一样是迭代增量的" class="headerlink" title="用例建模：与类建模一样是迭代增量的"></a>用例建模：与类建模一样是迭代增量的</h3><p>用例概念的本质特性：</p><ul><li>一个完整的功能<ul><li>用例文档描述主流、子流、可选事件流</li></ul></li><li>一个外部可见的功能（非内部功能）</li><li>一个正交功能（虽然在用例执行期间可以共享对象，但是每个用例的执行独立于其他用例）</li><li>与至少一个actor有关联</li><li>给参与者传递出确切值的一个功能（这个值在一个用例中获得）<br>发现用例：</li><li>需求文档中标识的需求</li><li>系统的参与者以及他们的使用目的<br>说明用例：</li><li>两个用例间总会存在扩展关系</li><li>四种常用关系<ul><li>关联（参与者与用例间）</li><li>包含include，被包含用例一定执行</li><li>扩展extend，被扩展用例不一定被执行</li><li>泛化</li></ul></li></ul><h3 id="活动建模（描述系统逻辑流程）"><a href="#活动建模（描述系统逻辑流程）" class="headerlink" title="活动建模（描述系统逻辑流程）"></a>活动建模（描述系统逻辑流程）</h3><p>活动图表示面向对象程序中的逻辑流（顺序控制、并发控制）</p><ul><li>发现动作<ul><li>每个用例可以有一个或多个活动图建模</li></ul></li></ul><h3 id="交互建模"><a href="#交互建模" class="headerlink" title="交互建模"></a>交互建模</h3><ul><li>顺序图和通信图是两种交互图，<ul><li>顺序图在分析中更有用，按时间顺序展示对象之间的消息交换</li><li>通信图在设计中更有用，描述消息和对象的交互关系</li></ul></li><li>消息序列<ul><li>signal信号描述对象间的异步通信，消息的发送方在发送消息后可继续其他操作。如果消息没有返回参数，一般是异步asynchronous。事件处理。</li><li>call调用，描述对象间的同步synchronous操作，要将控制返回给发送者。消息传递。</li></ul></li></ul><h3 id="操作（CRUD）建模"><a href="#操作（CRUD）建模" class="headerlink" title="操作（CRUD）建模"></a>操作（CRUD）建模</h3><p>类将一组操作作为服务提供给系统中的其他类，这组操作确定了类的公共接口，声明为公共可见性。</p><h4 id="发现类操作"><a href="#发现类操作" class="headerlink" title="发现类操作"></a>发现类操作</h4><p>最好从顺序图中发现类操作</p><h2 id="状态变化规格说明"><a href="#状态变化规格说明" class="headerlink" title="状态变化规格说明"></a>状态变化规格说明</h2><ul><li>状态规格说明定义类的属性，行为规格说明定义类的操作</li><li>工具：状态机图（状态转换图）</li><li>状态转换事件由以下事件触发（trigger）<ul><li>信号事件：建立对象间显式异步单向通信。</li><li>调用事件：建立同步通信，调用者等待响应</li><li>修改事件：<strong>改变守卫值使守卫条件达到满足的事件</strong></li><li>时间时间：特定状态下对象满足了一个时间表达式</li></ul></li></ul><h1 id="从分析到设计"><a href="#从分析到设计" class="headerlink" title="从分析到设计"></a>从分析到设计</h1><h2 id="高级类建模（Advanced）"><a href="#高级类建模（Advanced）" class="headerlink" title="高级类建模（Advanced）"></a>高级类建模（Advanced）</h2><p>附加的建模概念：构造型、约束、导出信息、可见性、限定关联、关联类、参数化类。这些概念是可选的，很多模型没有它们也足够了</p><h3 id="扩展机制"><a href="#扩展机制" class="headerlink" title="扩展机制"></a>扩展机制</h3><p>并非UML本身内容，如构造型、约束、标签定义和标签值</p><ul><li>构造型stereotype，UML最重要的扩展机制<ul><li>构造型对现有UML元素进行扩展，使现有元素的语义多样化</li></ul></li><li>注释和约束Comments and constraints<ul><li>注释是从属于一组元素的文本解释，在UML任何地方都可以插入注释</li><li>约束是指条件或限制，对象约束语言OCL</li></ul></li><li>标签tags<ul><li>标签的定义：是构造型的特性，表示为构造型声明的类矩形的一个属性</li><li>标签的值：是一个名-值对，附属于一个模型元素</li></ul></li></ul><h3 id="可见性与封装"><a href="#可见性与封装" class="headerlink" title="可见性与封装"></a>可见性与封装</h3><p>可见性：属性可见性和操作可见性<br>应用于类属性和操作的整套可见性标志：+ 公共可见性、- 私有可见性、# 保护可见性、~ 包可见性</p><ul><li>受保护的可见性（protected visibility），应用于继承的情况下，包含了包可见性</li><li>java包可见性（package visibility），默认情况</li><li>c++友元可见性Friend，类似于java的包可见性</li></ul><h3 id="导出信息derived-information"><a href="#导出信息derived-information" class="headerlink" title="导出信息derived information"></a>导出信息derived information</h3><p>是一种经常应用于属性或关联的约束</p><h3 id="限定关联"><a href="#限定关联" class="headerlink" title="限定关联"></a>限定关联</h3><p>在关联上加属性，在二元关联的“一对多”的“多”的一端加</p><h3 id="关联类和具体化类"><a href="#关联类和具体化类" class="headerlink" title="关联类和具体化类"></a>关联类和具体化类</h3><p>关联类更像ER图的多对多的联系</p><h2 id="高级泛化-generalization-与继承-inheritance-建模"><a href="#高级泛化-generalization-与继承-inheritance-建模" class="headerlink" title="高级泛化(generalization)与继承(inheritance)建模"></a>高级泛化(generalization)与继承(inheritance)建模</h2><h3 id="泛化和可替换性"><a href="#泛化和可替换性" class="headerlink" title="泛化和可替换性"></a>泛化和可替换性</h3><p>泛化的作用来源于 <strong>可替换性原则</strong> ——在代码中任何访问超类对象的地方，都可以用子类对象来替换超类对象</p><h3 id="继承和封装"><a href="#继承和封装" class="headerlink" title="继承和封装"></a>继承和封装</h3><p>两者是互相矛盾正交关系</p><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>当以可替换性为目标来使用泛化时，它就同接口继承（<strong>子类型、类型继承</strong>）是同义词了<br>接口和抽象类的概念是有区别的</p><h3 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h3><p><strong>接口继承能代替多重实现继承</strong></p><ul><li>恰当使用——扩展继承<ul><li>将继承作为类的增量式定义，子类具有比超类更多的特性（属性、方法）</li></ul></li><li>有问题的使用——限制继承<ul><li>有一些继承来的特性在子类中被禁止（重载）</li><li>子类中一些继承来的特性被覆盖，叫限制继承</li></ul></li><li>不恰当的使用——方便继承<ul><li>任意选择一个类作为其他类的父类</li></ul></li><li>实现继承的危害<ul><li><strong>自递归总是发生在实现继承</strong></li><li>脆弱基类：父类属性方法的改变会影响子类，只有尽可能将子类的共有属性抽取出来</li><li>重载和回调（向上调用、向下调用）</li></ul></li></ul><h2 id="高级聚合与委托建模"><a href="#高级聚合与委托建模" class="headerlink" title="高级聚合与委托建模"></a>高级聚合与委托建模</h2><p>一个复合类包含一个或多个构件类，构件类是其复合类的元素</p><h3 id="聚合的四种语义"><a href="#聚合的四种语义" class="headerlink" title="聚合的四种语义"></a>聚合的四种语义</h3><ul><li>ExclusiveOwns聚合：forzen关键字</li><li>Owns聚合</li><li>Has聚合</li><li>Menber聚合</li></ul><h3 id="作为泛化的可选方案的聚合"><a href="#作为泛化的可选方案的聚合" class="headerlink" title="作为泛化的可选方案的聚合"></a>作为泛化的可选方案的聚合</h3><ul><li>委托delegation和原型prototypical系统<ul><li>每当复合对象（外部对象）自身不能完成一项任务时，它能够访问它的构件对象（内部对象）中的方法，这称为委托</li></ul></li><li>委托和继承<ul><li>聚合使用委托的方法来复用构建对象的实现</li></ul></li></ul><h2 id="高级交互建模"><a href="#高级交互建模" class="headerlink" title="高级交互建模"></a>高级交互建模</h2><ul><li>时序图关注消息的顺序，通信图强调对象的关系</li></ul><h3 id="生命线与消息"><a href="#生命线与消息" class="headerlink" title="生命线与消息"></a>生命线与消息</h3><ul><li>一条生命线代表一个交互参与者</li><li>消息表示在交互的生命线之间的通信</li><li>接收到消息的生命线/对象激活了相关的操作方法</li><li>当控制流聚焦到一个对象时，在UML2.0中称为执行规格说明（以前叫激活）</li><li>交互建模的消息类型：<ul><li>同步消息synchronous messages，调用者阻塞</li><li>异步消息asynchronous messages，调用者不阻塞，允许多线程执行，通常用来传递控制</li><li>对象创建消息object creation messages，常用关键字（new/create）命名</li><li>回复消息reply，回复消息只是用来显示消息返回结果的两种方法中的一种。另一种是在消息语法中指明返回变量，如int=doC</li><li>发现消息：没有指定发送者的消息</li></ul></li></ul><h3 id="片段fragment"><a href="#片段fragment" class="headerlink" title="片段fragment"></a>片段fragment</h3><p>一段交互称为交互片段，交互可以包含更小的交互片段，称为组合片段。组合片段的语义由交互操作符确定</p><ul><li>alt:可选片段，在守卫条件中表达if-then-else逻辑</li><li>opt:选择片段，如果守卫条件为真，执行该片段<ul><li>选择片段只在可选片段的else条件内执行，并且当守卫条件为真时才执行</li></ul></li><li>loop:循环片段，服从循环条件而重复多次的片段</li><li>break:中断片段，如果中断条件为真，就执行中断片段，而不执行外围片段的剩余部分</li><li>parallel:并行片段，允许所包含行为交替执行</li></ul><h3 id="交互使用"><a href="#交互使用" class="headerlink" title="交互使用"></a>交互使用</h3><ul><li>一个外围交互对另一个交互的引用称为交互使用，外围交互用标签sd（顺序图）标注。</li><li>交互使用标签ref（引用）标注，它指的是另一个单独创建的sd交互</li></ul><h1 id="系统体系结构与程序设计"><a href="#系统体系结构与程序设计" class="headerlink" title="系统体系结构与程序设计"></a>系统体系结构与程序设计</h1><ul><li>系统设计包括两方面的主要问题——系统的体系结构设计和系统中程序的详细设计<ul><li>体系结构设计（概要设计）：把系统分成模块，（毕业论文一开始顶多是用例组，功能组，出现模块只能在设计中），在其中框架设计最重要</li><li>程序详细设计：为每个模块开发完整的算法和数据结构，描述用例中的协作模型</li></ul></li></ul><h2 id="分布式物理体系结构"><a href="#分布式物理体系结构" class="headerlink" title="分布式物理体系结构"></a>分布式物理体系结构</h2><ul><li>主要目标是降低耦合</li><li>体系结构设计（物理和逻辑）<ul><li>物理体系结构：解决C/S 客户机/服务器问题，以及CS之间所需要的任何中间件的问题；使用结点和部署图</li><li>逻辑体系结构：客户机client：发起请求；服务器server：处理客户端发来的请求</li></ul></li></ul><h3 id="对等体系结构P2P"><a href="#对等体系结构P2P" class="headerlink" title="对等体系结构P2P"></a>对等体系结构P2P</h3><ul><li>系统中任何结点可能既是客户机，也是服务器</li><li>定义了 <strong>同位体</strong>，一种单独类型的系统元素</li></ul><h3 id="分层体系结构（Multi-tier）：为了降低耦合"><a href="#分层体系结构（Multi-tier）：为了降低耦合" class="headerlink" title="分层体系结构（Multi-tier）：为了降低耦合"></a>分层体系结构（Multi-tier）：为了降低耦合</h3><ul><li>像同位体的情况一样，层次结构中间的每一层既是客户机也是服务器</li><li>在硬件层与软件层之间采用层次依赖方法</li><li>如三层体系结构——GUI客户机、单独的业务逻辑、数据库服务器</li><li>应用服务是每一个运行在数据库上的单独程序所做的，业务服务是数据库强迫所有运行程序都要遵循的业务规则。</li><li>胖客户体系结构、瘦客户体系结构</li></ul><h3 id="数据库为中心的体系结构"><a href="#数据库为中心的体系结构" class="headerlink" title="数据库为中心的体系结构"></a>数据库为中心的体系结构</h3><ul><li>数据库程序被称为存储过程，可以从客户端程序调用它</li><li>一种特殊的存储过程（触发器）不能被显示地调用。当试图更改数据库内容时，触发器自动触发</li><li><strong>触发器用于实现企业范围内的业务规则</strong></li></ul><p>##多层逻辑体系结构（Multilayer—logical）<br>目标：降低复杂性</p><h3 id="体系结构的复杂性"><a href="#体系结构的复杂性" class="headerlink" title="体系结构的复杂性"></a>体系结构的复杂性</h3><ul><li>两种主要的、有差别的计算模型是基于算法的图灵机模型和基于算法和开放的交互模型</li><li>复杂度概念<ul><li>问题复杂性：由问题域本身复杂性定义（软件本质特性的一个分支）</li><li>算法复杂性：目标是度量算法的效率</li><li>结构复杂性：建立软件结构之间的关系及易于维护和演化，即降低耦合度的问题</li><li>认知复杂性（Cognitive complexity）：理解软件做出的努力，即捕获程序的逻辑流，理解软件所需要的工作量的测量</li></ul></li></ul><h4 id="空间认知复杂性"><a href="#空间认知复杂性" class="headerlink" title="空间认知复杂性"></a>空间认知复杂性</h4><p>计算现代程序的可认知复杂性的最合适的度量就是空间复杂性度量</p><h4 id="结构复杂性——强调程序对象之间的依赖关系，尽量减少依赖"><a href="#结构复杂性——强调程序对象之间的依赖关系，尽量减少依赖" class="headerlink" title="结构复杂性——强调程序对象之间的依赖关系，尽量减少依赖"></a>结构复杂性——强调程序对象之间的依赖关系，尽量减少依赖</h4><p>适应性的一个必要条件是依赖是可追踪的</p><h3 id="体系结构模式（设计模式-模板被用于体系结构设计，提供通用方法）"><a href="#体系结构模式（设计模式-模板被用于体系结构设计，提供通用方法）" class="headerlink" title="体系结构模式（设计模式/模板被用于体系结构设计，提供通用方法）"></a>体系结构模式（设计模式/模板被用于体系结构设计，提供通用方法）</h3><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://pic.downk.cc/item/5e12d6fd76085c328902637b.jpg" alt=""></p><h4 id="外观（facade）"><a href="#外观（facade）" class="headerlink" title="外观（facade）"></a>外观（facade）</h4><p>目标使用外观模式来对层使用简单的接口，降低子系统之间的耦合或依赖</p><h4 id="抽象工厂（abstract-factory）"><a href="#抽象工厂（abstract-factory）" class="headerlink" title="抽象工厂（abstract factory）"></a>抽象工厂（abstract factory）</h4><p>可理解为外观模式的变种，在外观模式中，高层接口将意味着一个具体类，而抽象工厂中的接口或者是一个真正的接口（抽象类）</p><h4 id="责任链（chain-of-Responsibility），与递归类似"><a href="#责任链（chain-of-Responsibility），与递归类似" class="headerlink" title="责任链（chain of Responsibility），与递归类似"></a>责任链（chain of Responsibility），与递归类似</h4><p>在PCBMER中，责任链使得NCP（相邻通信原则）称为可能<br>避免发送者和接收者之间的多重耦合</p><h4 id="观察者（observer-listener），也叫出版-订阅模式"><a href="#观察者（observer-listener），也叫出版-订阅模式" class="headerlink" title="观察者（observer/listener），也叫出版-订阅模式"></a>观察者（observer/listener），也叫出版-订阅模式</h4><ul><li>两类对象：<ul><li>被观察对象：称为主题或者出版者</li><li>观察对象：称为观察者、订阅者或监听者</li></ul></li></ul><h4 id="中介者（mediator）"><a href="#中介者（mediator）" class="headerlink" title="中介者（mediator）"></a>中介者（mediator）</h4><p>定义类来封装其他类之间的相互通信。通过使对象之间的不显示引用来降低耦合，并允许独立地改变他们的交互</p><h2 id="体系结构建模"><a href="#体系结构建模" class="headerlink" title="体系结构建模"></a>体系结构建模</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li>包之间的关联：泛化和依赖</li><li>每个依赖的本质是系统模型的描述性约束</li></ul><h3 id="构件"><a href="#构件" class="headerlink" title="构件"></a>构件</h3><ul><li>是系统的物理部分，是一个独立的部署单元，即构件里面的部分不能再分了</li><li>是第三方组装单元——它是充分文档化和自包含，可以被第三方插入到其他构件中</li><li>构件 <strong>没有持久</strong> 状态——不能与他的拷贝区分开来，在任何给定的应用系统中，最多只有一个特定的构件有拷贝</li><li>可替换性——相同接口的构件可以互相替换</li><li>构件可以完成清晰的功能，并且是逻辑耦合和物理耦合</li><li>可以嵌套在其他构件中</li></ul><h4 id="构件与包"><a href="#构件与包" class="headerlink" title="构件与包"></a>构件与包</h4><ul><li>从逻辑上讲，每一个类属于一个单一的包</li><li>从物理上讲，每一个类都至少由一个构件实现，并且一个构件可能只实现一个类。抽象类和接口经常被多个构件实现</li><li>包是比构件更大的体系结构单元，倾向于以水平horizontal方式组织类——在应用域中静态接近的类。</li><li>构件是对行为相近的类的垂直vertical组织——这些类可能来自不同的域，但贡献于一个单一的业务活动（如用例）</li></ul><h4 id="构件与类的接口"><a href="#构件与类的接口" class="headerlink" title="构件与类的接口"></a>构件与类的接口</h4><ul><li>构件最终也来实现接口，构件只显示它所包含的类的某些接口，很多其他接口都被封装在构件中，只被协作的类在内部使用，对于其他构件是不可见的</li><li>构件是部署在某个计算机结点上的物理抽象</li><li>类表示逻辑事务，为了起到物理抽象的作用，不得不将其实现为构件</li></ul><h3 id="结点——其实是一系列机器，服务器，计算机，客户端等"><a href="#结点——其实是一系列机器，服务器，计算机，客户端等" class="headerlink" title="结点——其实是一系列机器，服务器，计算机，客户端等"></a>结点——其实是一系列机器，服务器，计算机，客户端等</h3><p>部署图中的计算资源（运行时的物理对象）被称为结点</p><h2 id="程序设计与复用原则"><a href="#程序设计与复用原则" class="headerlink" title="程序设计与复用原则"></a>程序设计与复用原则</h2><ul><li>系统设计<ul><li>架构设计——框架</li><li>详细设计——前界面，后数据库</li><li>程序设计——对界面设计和数据库设计的扩展</li></ul></li></ul><h3 id="类的内聚cohesion与耦合coupling"><a href="#类的内聚cohesion与耦合coupling" class="headerlink" title="类的内聚cohesion与耦合coupling"></a>类的内聚cohesion与耦合coupling</h3><ul><li>良好的程序设计可以确保类的内聚和耦合之间的良好平衡</li><li>类内聚是一个类内部自确定的程度，它测量类独立的强度，内聚越强越好</li><li>类耦合是类之间连接的程度，它测量类的相互依赖性，耦合越弱越好，但为了“协作”不得不耦合</li></ul><h4 id="类耦合的种类"><a href="#类耦合的种类" class="headerlink" title="类耦合的种类"></a>类耦合的种类</h4><h4 id="Demeter法则"><a href="#Demeter法则" class="headerlink" title="Demeter法则"></a>Demeter法则</h4><ul><li>该法则说明了在类方法中允许什么样的消息目标：<ul><li>方法的对象本身——C#和Java中的this，Smalltalk中的self和super</li><li>方法型构中作为参数的一个对象</li><li>此对象的属性所引用的对象（包括属性集合中所引用的对象）</li><li>此方法创建的对象</li><li>全局变量引用的对象</li></ul></li><li>类耦合应该尽量被限制在类的层次内，即层内耦合。层间耦合应该被最小化并小心引导</li><li>为了限制继承来的耦合，使用Demeter增强法则，将规则限制在类本身定义的属性上</li></ul><h4 id="存取方法Accessor-methods和机械类mindless-classes"><a href="#存取方法Accessor-methods和机械类mindless-classes" class="headerlink" title="存取方法Accessor methods和机械类mindless classes"></a>存取方法Accessor methods和机械类mindless classes</h4><ul><li>存取方法定义观察者get和改变者set的操作</li><li>一个具有很多存取方法的类称为机械类，也称为无思维类，由其它类决定该类状态</li></ul><h4 id="动态分类和混合实例内聚"><a href="#动态分类和混合实例内聚" class="headerlink" title="动态分类和混合实例内聚"></a>动态分类和混合实例内聚</h4><p>没有动态分类的支持造成了混合实例内聚，这是面向对象编程环境的弱点</p><h3 id="复用策略"><a href="#复用策略" class="headerlink" title="复用策略"></a>复用策略</h3><ul><li>策略意味着复用的粒度（Resue granularity）<ul><li>类</li><li>构件component</li><li>解决方案</li></ul></li><li>三种复用策略<ul><li>工具包（类库）复用</li><li>框架复用</li><li>分析与设计模式复用</li></ul></li></ul><h4 id="工具包复用Toolkits-class-libraries"><a href="#工具包复用Toolkits-class-libraries" class="headerlink" title="工具包复用Toolkits(class libraries)"></a>工具包复用Toolkits(class libraries)</h4><ul><li>强调类级的代码复用</li><li>两种类型的工具包<ul><li>基础工具包（内置好的），基础类由对象编程环境提供包括String、Date等</li><li>体系结构工具包，作为系统软件的一部分，如操作系统、数据库软件在应用范围内与应用相关的包，靠个人积累</li></ul></li></ul><h4 id="框架复用Frameworks"><a href="#框架复用Frameworks" class="headerlink" title="框架复用Frameworks"></a>框架复用Frameworks</h4><ul><li>框架强调构件级的复用</li><li>一个框架是可定制的应用软件</li></ul><h4 id="模式复用Analysis-and-design-patterns"><a href="#模式复用Analysis-and-design-patterns" class="headerlink" title="模式复用Analysis and design patterns"></a>模式复用Analysis and design patterns</h4><p>模式强调在开发方法过程中的复用</p><h2 id="协作建模Collaboration-modeling"><a href="#协作建模Collaboration-modeling" class="headerlink" title="协作建模Collaboration modeling"></a>协作建模Collaboration modeling</h2><p>复合结构指相互关联的元素组合</p><h3 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h3><p>角色由连接器connector连接</p><h3 id="复合结构——另一种类图的创建方法"><a href="#复合结构——另一种类图的创建方法" class="headerlink" title="复合结构——另一种类图的创建方法"></a>复合结构——另一种类图的创建方法</h3><p>角色具有明确定义的类型</p><h3 id="从用例到复合协作"><a href="#从用例到复合协作" class="headerlink" title="从用例到复合协作"></a>从用例到复合协作</h3><p>复合协作由下级协作组成（实现）</p><h3 id="从协作到交互"><a href="#从协作到交互" class="headerlink" title="从协作到交互"></a>从协作到交互</h3><ul><li>协作定义连接器，角色由连接器connector连接交换信息，但是并 <strong>没有标识</strong> 每条信息</li><li>协作可以被用于生成顺序图和通信图的手段。为此，协作角色称为了顺序图上的生命线，连接器被交互中的消息代替。</li></ul><h1 id="图形用户界面设计"><a href="#图形用户界面设计" class="headerlink" title="图形用户界面设计"></a>图形用户界面设计</h1><ul><li>沙袋概念与applet有关</li><li>JSP属于PCBMER的表示层</li><li>Strusts的动作表单属于PCBMER的bean层</li><li>窗口不是UX构造型</li></ul><h2 id="GUI设计原则"><a href="#GUI设计原则" class="headerlink" title="GUI设计原则"></a>GUI设计原则</h2><ul><li>GUI客户端可分为<ul><li>桌面平台的可编程客户端：胖客服端thick client，在客户端上可以实现一定的业务功能</li><li>Web平台的浏览器客户端：瘦客户端thin client，基于web的图形用户界面，需要从服务器获取数据和程序</li></ul></li></ul><h3 id="良好GUI设计指南"><a href="#良好GUI设计指南" class="headerlink" title="良好GUI设计指南"></a>良好GUI设计指南</h3><h4 id="用户控制式——主要的GUI设计指南"><a href="#用户控制式——主要的GUI设计指南" class="headerlink" title="用户控制式——主要的GUI设计指南"></a>用户控制式——主要的GUI设计指南</h4><p>以用户为中心，用户对控制的掌管</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><ul><li>整个界面一致，如背景色一致</li><li>与软硬件平台保持一致</li></ul><h4 id="个性化和客户化"><a href="#个性化和客户化" class="headerlink" title="个性化和客户化"></a>个性化和客户化</h4><ul><li>个性化personalization：单个用户的使用行为</li><li>客户化customization：对某一个特定的组织做一个特定东西</li></ul><h4 id="宽容"><a href="#宽容" class="headerlink" title="宽容"></a>宽容</h4><p>允许用户进行实验或出错</p><h4 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h4><p>反馈由用户控制式指南派生出来的，与用户控制指南最相关</p><h4 id="审美Aesthetics和可用性——二者都关系到用户满意度"><a href="#审美Aesthetics和可用性——二者都关系到用户满意度" class="headerlink" title="审美Aesthetics和可用性——二者都关系到用户满意度"></a>审美Aesthetics和可用性——二者都关系到用户满意度</h4><p>审美是系统视觉上的吸引力</p><h2 id="桌面GUI设计"><a href="#桌面GUI设计" class="headerlink" title="桌面GUI设计"></a>桌面GUI设计</h2><ul><li>一个GUI桌面窗口可以划分为窗格</li><li>主窗口区别于辅窗口的一个典型特征是，主窗口有菜单栏和工具栏而辅窗口没有</li></ul><h2 id="Web-GUI设计"><a href="#Web-GUI设计" class="headerlink" title="Web GUI设计"></a>Web GUI设计</h2><ul><li>Web GUI屏幕的实体可以划分为框架</li><li>在Web应用系统中，菜单项、按钮、超链接这些GUI组件用于用户事件编程</li><li>脚本script和小程序applet用于创建 <strong>动态</strong> 的客户端页面</li></ul><h1 id="持久性（persistence）与数据库设计"><a href="#持久性（persistence）与数据库设计" class="headerlink" title="持久性（persistence）与数据库设计"></a>持久性（persistence）与数据库设计</h1><p>SQL1999是对象-关系型数据库的标准</p><h2 id="业务对象与持久性"><a href="#业务对象与持久性" class="headerlink" title="业务对象与持久性"></a>业务对象与持久性</h2><p>实体类表示应用程序中的持久数据库对象，但实体类不是数据库中的持久类。称它们持久是因为在应用程序终止之前，实体对象的最新映射将会持久保存在数据库中。</p><h3 id="数据模型的层次"><a href="#数据模型的层次" class="headerlink" title="数据模型的层次"></a>数据模型的层次</h3><ul><li>数据模型（也称为数据库模式）<ul><li>外部（概念）数据模型<ul><li>实体关系（ER）图——最流行的概念数据建模技术</li></ul></li><li>逻辑数据模型<ul><li>逻辑模式，也称为全局概念模式</li></ul></li><li>物理数据模型<ul><li>专门针对特定的DBMS</li></ul></li></ul></li></ul><h3 id="集成应用系统与数据库建模"><a href="#集成应用系统与数据库建模" class="headerlink" title="集成应用系统与数据库建模"></a>集成应用系统与数据库建模</h3><p>面向对象数据库模型可以用作客户端应用程序和服务器端数据源之间协同工作的对象存储API</p><h2 id="关系数据库模型RDB"><a href="#关系数据库模型RDB" class="headerlink" title="关系数据库模型RDB"></a>关系数据库模型RDB</h2><ul><li>RDB不支持：<ul><li>对象类型</li><li>关联概念（如类之间的继承或方法）</li><li>结构化类型</li><li>集合</li><li>引用</li></ul></li><li>RDB模型的主要原始类型是由多列组成的关系表。表的列只能取原子值——结构化值或值的集合是不允许的。</li></ul><h3 id="列、域和规则"><a href="#列、域和规则" class="headerlink" title="列、域和规则"></a>列、域和规则</h3><ul><li>关系数据库采用列和行组成的表来定义数据。存储在任何列和行交叉处的数据值必须是简单的（不可分割的）和单一的（不重复的）值，我们说这样的列具有原子域（数据类型）</li><li>涉及多个表的更复杂的规则可以定义为引用完整性约束，定义业务规则的最佳机制是触发器</li></ul><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul><li>允许NULL值</li><li>每个表要有一个主键（主关键字），关键字是列的最小集合，这些列的值能够唯一确定表中的一行。</li></ul><h3 id="引用（参照）完整性"><a href="#引用（参照）完整性" class="headerlink" title="引用（参照）完整性"></a>引用（参照）完整性</h3><ul><li>通过引用完整性约束来维护表间的关系</li><li>外键是指表中的一组列，它的值要么是NULL，要么必须与同一个或另一个表中的主键值匹配。主键与外键的这种对应关系称为引用完整性</li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ul><li>定义复杂的规则或定义规则的异常</li><li>触发器是一种不能被调用的特殊存储过程</li><li>可以用来实施适用于数据库的所有业务规则</li></ul><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h3 id="视图——用来支持数据库安全"><a href="#视图——用来支持数据库安全" class="headerlink" title="视图——用来支持数据库安全"></a>视图——用来支持数据库安全</h3><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p><strong>更新异常</strong>——对表进行修改操作所引起的意外的连带后果</p><h2 id="对象—关系映射"><a href="#对象—关系映射" class="headerlink" title="对象—关系映射"></a>对象—关系映射</h2><ul><li>对于多对多的关系，通过建立交叉表</li><li>忽略映射泛化关系到关系模型的多态性</li></ul><h3 id="映射可分为："><a href="#映射可分为：" class="headerlink" title="映射可分为："></a>映射可分为：</h3><ul><li>映射实体类</li><li>映射关联</li><li>映射聚合</li><li>映射泛化<ul><li>4个策略<ul><li>将每个类映射到一个表</li><li>将整个类层次映射到一个“超类”表</li><li>将每个具体类映射到一个类</li><li>将每个没有连接的具体类映射到一个表</li></ul></li></ul></li></ul><h2 id="管理持久对象的模式"><a href="#管理持久对象的模式" class="headerlink" title="管理持久对象的模式"></a>管理持久对象的模式</h2><ul><li>企业应用体系结构设计（PEAA）：用于解决持久对象的问题<ul><li>标识映射Identity Map：给内存中所有持久对象都指定对象标识符（OID),没在内存中的对象没有管</li><li>数据映射data mapper：程序随时都知道所需要的对象是在内存中还是从数据库中获得，具有当前内存中的对象的相关信息</li><li>延迟装载lazy load：一个对象并没有包含你需要的所有数据，但知道如何获取，只装载一部分对象到内存中</li><li>工作单元unit of work：程序知道一个业务事务都包含内存中的哪些对象</li></ul></li></ul><h2 id="设计数据库访问和事务"><a href="#设计数据库访问和事务" class="headerlink" title="设计数据库访问和事务"></a>设计数据库访问和事务</h2><h3 id="SQL程序设计的层次"><a href="#SQL程序设计的层次" class="headerlink" title="SQL程序设计的层次"></a>SQL程序设计的层次</h3><ul><li>第一层：DDL</li><li>第二层：DML，应用系统程序员使用第二层以上的SQL</li><li>第三层：被嵌入到常规的程序设计语言中，一个语句嵌入，SQL除了允许像第二层一样一次一个集合的处理机制意外，还允许一次一个记录的处理机制</li><li>第四层：将SQL嵌入到客户端程序中，第四代语言（4GL）</li><li>第五层：存储过程</li></ul><h3 id="设计业务事务"><a href="#设计业务事务" class="headerlink" title="设计业务事务"></a>设计业务事务</h3><ul><li>DBMS事务管理有两个作用——数据库恢复和并发控制</li><li>事务是数据库的逻辑工作单元</li></ul><h4 id="短事务"><a href="#短事务" class="headerlink" title="短事务"></a>短事务</h4><h5 id="对象锁："><a href="#对象锁：" class="headerlink" title="对象锁："></a>对象锁：</h5><ul><li>排他（写）锁：必须等待当前持有锁的事务释放该锁之后才能处理其他事务</li><li>更新（预写）锁：其他事务可以读取对象，但有需要可以随时升级为排他锁</li><li>（共享）锁：其他事务可以读取对象并可能得到这个对象的更新锁</li><li><strong>无锁</strong>：其他事务可以随时更新对象，因此它只适用于允许 <strong>脏读</strong>的应用系统，即一个事务读取的数据可能在该事务完成之前被另一个事务修改或删除了</li></ul><h5 id="隔离层次："><a href="#隔离层次：" class="headerlink" title="隔离层次："></a>隔离层次：</h5><ul><li>脏读</li><li>非重复读</li><li>虚读</li><li>可重复读（保证事务的可序列化的执行）</li></ul><h5 id="自动恢复"><a href="#自动恢复" class="headerlink" title="自动恢复"></a>自动恢复</h5><p><strong>保存点</strong>，是程序中的一条语句，把一个长事务分成若干个短事务</p><h4 id="长事务"><a href="#长事务" class="headerlink" title="长事务"></a>长事务</h4><p>长事务回滚可以通过保存点来控制，从而将对象持久化的存储到用户的私有仓库</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件需求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件需求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word中优雅的插入代码块</title>
      <link href="/20191223/3992.html"/>
      <url>/20191223/3992.html</url>
      
        <content type="html"><![CDATA[<p>打开  <a href="http://www.planetb.ca/syntax-highlight-word" target="_blank" rel="noopener">http://www.planetb.ca/syntax-highlight-word</a><br>将代码复制至code块里<br>选择编译语言，然后show highlights<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191223140647422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>将新页面的代码复制至word即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkcore练习_2,各种算子的练习</title>
      <link href="/20191219/17671.html"/>
      <url>/20191219/17671.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据集<br><a href="http://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">http://grouplens.org/datasets/movielens/</a><br>MovieLens 1M Dataset<br>相关数据文件<br>users.dat<br>UserID::Gender::Age::Occupation::Zip-code<br> movies.dat<br> MovieID::Title::Genres<br> ratings.dat<br> UserID::MovieID::Rating::Timestamp<br> 通过Spark 计算看过“Lord of the Rings, The (1978)” 用户年龄和性别分布</p></blockquote><p>1.年龄段在“18-24” 的男性年轻人， 最喜欢看哪10部<br>2.得分最高的10部电影； 看过电影最多的前10个人；女性看多最多的10部电影；男性看过最多的10部电影<br>3.利用数据集SogouQ2012.mini.tar.gz 将数据按照访问次数进行排序， 求访问量前10的网站</p><p>没有使用join联合表，如果使用join，记得用distinc去重，不然有可能导致数据重复<br>1.年龄段在“18-24” 的男性年轻人， 最喜欢看哪10部</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-11 19:49 * */</span>object homework03 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework03"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext    val user_data<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\users.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    val user_id <span class="token operator">=</span> user_data<span class="token punctuation">.</span>filter<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      var tmp <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token operator">&lt;=</span><span class="token number">24</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">)</span>      tmp    <span class="token punctuation">}</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(userid,userid)</span>    val user_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>    val rate_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\ratings.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,mid)</span>    val movie_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\movies.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(mid,title)</span>    val res_mid <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val userId <span class="token operator">=</span> user_bc<span class="token punctuation">.</span>value      val arr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          arr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      arr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap<span class="token comment" spellcheck="true">//(mid,count)</span>    val resid_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>res_mid<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val moveisId <span class="token operator">=</span> resid_bc<span class="token punctuation">.</span>value      val resArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>moveisId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          resArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>moveisId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄段在“18-24” 的男性看多最多的10部电影:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"${line._2}位看过"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(title ,count),只输出title</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.得分最高的10部电影； 看过电影最多的前10个人；女性看多最多的10部电影；男性看过最多<br>的10部电影</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 16:45 * */</span>object homework04 <span class="token punctuation">{</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework04"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext  val user_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\users.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,gender)</span>  val rate_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\ratings.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(uid,mid,rate)</span>  val movie_data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\sparkcore\\data\\ml-1m\\movies.dat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(mid,title)</span>  def <span class="token function">ans1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val rate_data_1 <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>line<span class="token punctuation">.</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(mid,(rate1,rate2...))</span>    val res_mid <span class="token operator">=</span> rate_data_1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>info <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      var sum<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0</span>      var count<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0</span>      var avg<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0</span>      info<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> <span class="token keyword">case</span> rates <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> rates        count <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      avg <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token function">count</span>      <span class="token punctuation">(</span>info<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> avg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap <span class="token comment" spellcheck="true">//(mid,rate_avg)</span>    res_mid<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    val resmid_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>res_mid<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val movieId <span class="token operator">=</span> resmid_bc<span class="token punctuation">.</span>value      val resMIdArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Double<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>mid1<span class="token punctuation">,</span> title<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>movieId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span>          resMIdArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> movieId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      resMIdArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(title ,avg),只输出title</span>  <span class="token punctuation">}</span>  def <span class="token function">ans2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val rate_data_2 <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//(uid,1)</span>    rate_data_2<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(uid,count)</span>  <span class="token punctuation">}</span>  def <span class="token function">ans3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val user_data_3  <span class="token operator">=</span> user_data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token operator">==</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,F)</span>    val userId_3_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>user_data_3<span class="token punctuation">)</span>    val resMId_3  <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>line<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val uid_3 <span class="token operator">=</span> userId_3_bc<span class="token punctuation">.</span>value      val resMId_3Arr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uid_3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span>          resMId_3Arr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resMId_3Arr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap<span class="token comment" spellcheck="true">//(mid,count)</span>    val resMTitle_3bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>resMId_3<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val moveisId <span class="token operator">=</span> resMTitle_3bc<span class="token punctuation">.</span>value      val resArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>moveisId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          resArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>moveisId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(title ,count)</span>  <span class="token punctuation">}</span>  def <span class="token function">ans4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val user_data_3  <span class="token operator">=</span> user_data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(uid,F)</span>    val userId_3_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>user_data_3<span class="token punctuation">)</span>    val resMId_3  <span class="token operator">=</span> rate_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>line<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val uid_3 <span class="token operator">=</span> userId_3_bc<span class="token punctuation">.</span>value      val resMId_3Arr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uid_3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span>          resMId_3Arr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resMId_3Arr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toMap<span class="token comment" spellcheck="true">//(mid,count)</span>    val resMTitle_3bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>resMId_3<span class="token punctuation">)</span>    val res <span class="token operator">=</span> movie_data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val moveisId <span class="token operator">=</span> resMTitle_3bc<span class="token punctuation">.</span>value      val resArr <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>moveisId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          resArr<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>moveisId<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>mid1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      resArr<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(title ,count)</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//val start = System.nanoTime()</span>    <span class="token function">ans1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得分最高的10部电影:"</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"平均得分为：${line._2}"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只输出title</span>    <span class="token function">ans2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看过电影最多的前10个人:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"看过${line._2}部电影"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">ans3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女性看多最多的10部电影:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"${line._2}位女性看过"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">ans4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token operator">></span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男性看多最多的10部电影:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"${line._2}位男性看过"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//val end = System.nanoTime()</span>   <span class="token comment" spellcheck="true">// println("------------------------------------")</span>  <span class="token comment" spellcheck="true">//  println("程序运行时间:[" + (end - start) + "ns]")</span>  <span class="token comment" spellcheck="true">//  println("------------------------------------")</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.利用数据集SogouQ2012.mini.tar.gz 将数据按照访问次数进行排序， 求访问量前10的网站</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 21:12 * */</span>object homework05 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework05"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext    sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\3-sparkCore2\\SogouQ2012.mini.tar.gz"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问量前10的网站:"</span><span class="token operator">+</span>line<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token string">"访问量为${line._2}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea通过maven创建scala项目及编写spark</title>
      <link href="/20191219/9354.html"/>
      <url>/20191219/9354.html</url>
      
        <content type="html"><![CDATA[<p>file-&gt;new project-&gt;maven-&gt;<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212160139471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>填写gva：<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212160314683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>配置maven版本，如果配置了镜像则读取自己的setting.xml<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212160515667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>next-&gt;finish<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2019121216062313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="scala版本一定要对应"><a href="#scala版本一定要对应" class="headerlink" title="!!!!!!! scala版本一定要对应"></a>!!!!!!! scala版本一定要对应</h1><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212160715513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>改成自己安装的版本，dos模式：scala –version<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212160924135.png" alt=""><br>将自动生成的.scala文件删除：<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212161111742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>file-&gt;project structure<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212161838494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt="">)<img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212161912130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191212161939675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="spark-core的pom-xml"><a href="#spark-core的pom-xml" class="headerlink" title="spark_core的pom.xml"></a>spark_core的pom.xml</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.neu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sparkCoreTraining<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inceptionYear</span><span class="token punctuation">></span></span>2008<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inceptionYear</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.11.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>scala-tools.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Scala-Tools Maven2 Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://scala-tools.org/repo-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>scala-tools.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Scala-Tools Maven2 Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://scala-tools.org/repo-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.0-M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-csv_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming-kafka_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/main/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">></span></span>src/test/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>args</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>-target:jvm-1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>args</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporting</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporting</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="spark-sql的pom-xml"><a href="#spark-sql的pom-xml" class="headerlink" title="spark_sql的pom.xml"></a>spark_sql的pom.xml</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>zh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sparkSQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inceptionYear</span><span class="token punctuation">></span></span>2008<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inceptionYear</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.11.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  &lt;repositories>    &lt;repository>      &lt;id>scala-tools.org&lt;/id>      &lt;name>Scala-Tools Maven2 Repository&lt;/name>      &lt;url>http://scala-tools.org/repo-releases&lt;/url>    &lt;/repository>  &lt;/repositories>  &lt;pluginRepositories>    &lt;pluginRepository>      &lt;id>scala-tools.org&lt;/id>      &lt;name>Scala-Tools Maven2 Repository&lt;/name>      &lt;url>http://scala-tools.org/repo-releases&lt;/url>    &lt;/pluginRepository>  &lt;/pluginRepositories>--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.0-M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-hive_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-avro_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-csv_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/main/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">></span></span>src/test/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>args</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>-target:jvm-1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>args</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporting</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-scala-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scalaVersion</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scalaVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporting</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决rdd无法调用toDF及 value toDF is not a member of org.apache.spark.rdd.RDD[names]</title>
      <link href="/20191219/38269.html"/>
      <url>/20191219/38269.html</url>
      
        <content type="html"><![CDATA[<p>需加入隐式导入才能toDF</p><pre class="line-numbers language-java"><code class="language-java">  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"ch2homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_ <span class="token comment" spellcheck="true">//不加入隐式导入则不能toDF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译代码</p><pre class="line-numbers language-java"><code class="language-java">object homework01 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"ch2homework01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"ch2homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">names</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>count<span class="token operator">:</span>Int<span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_ <span class="token comment" spellcheck="true">//不加入隐式导入则不能toDF</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>     <span class="token function">names</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDF</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现</p><pre class="line-numbers language-java"><code class="language-java">Error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span> value toDF is not a member of org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span>names<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决：<br>将case class names(name:String,count:Int)放到需要用到names方法的方法体外</p><p><del>~</del>java<br>object homework01 {</p><p>  case class names(name:String,count:Int)</p><p>  def main(args: Array[String]): Unit = {<br>    val conf =  new SparkConf().setAppName(“ch2homework01”).setMaster(“local[4]”)<br>    val sc = new SparkContext(conf)<br>    val spark = SparkSession.builder().appName(“ch2homework1”).master(“local[4]”).getOrCreate()<br>    import spark.implicits._<br>    val data = sc.textFile(“file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz”).flatMap(_.split(“\n”)).map(line =&gt;<br>     names((line.split(“,”).reverse(0)), 1)).toDF()</p><pre><code>data.show()</code></pre><p>  }<br>}<br>~~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark scala读取文件选取特定列</title>
      <link href="/20191219/26987.html"/>
      <url>/20191219/26987.html</url>
      
        <content type="html"><![CDATA[<p>spark scala读取文件选取特定列<br>wordcount.txt:</p><pre class="line-numbers language-txt"><code class="language-txt">a,1c,2a,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>选取最后一列</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//选取特定列.</span><span class="token keyword">val</span> data<span class="token operator">=</span>sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"file:///E://table//wordcount.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//按换行符分割文件，把文件分成一行行的</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>    line<span class="token keyword">=></span>        <span class="token keyword">var</span> splits<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//把行按","分割，转置选取第一列即最后一列，</span>                                                <span class="token comment" spellcheck="true">//选取其他列例如第一列：line.split(",")(0) ，</span>                                                <span class="token comment" spellcheck="true">//选取多列map(line=>(line.split(",")(0),line.split(",")(18),line.split(",")(31))) </span>       <span class="token punctuation">(</span>splits<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark中的map-side-join关联优化</title>
      <link href="/20191219/8137.html"/>
      <url>/20191219/8137.html</url>
      
        <content type="html"><![CDATA[<p>将多份数据进行关联是数据处理过程中非常普遍的用法，不过在分布式计算系统中，这个问题往往会变的非常麻烦，因为框架提供的 join 操作一般会将所有数据根据 key 发送到所有的 reduce 分区中去，也就是 shuffle 的过程。造成大量的网络以及磁盘IO消耗，运行效率极其低下，这个过程一般被称为 reduce-side-join。<br>如果其中有张表较小的话，我们则可以自己实现在 map 端实现数据关联，跳过大量数据进行 shuffle 的过程，运行时间得到大量缩短，根据不同数据可能会有几倍到数十倍的性能提升。</p><p>用于在海量数据中匹配少量特定数据</p><p>原理图<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191210112545967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>代码说明</p><p>将少量的数据转化为Map进行广播，广播会将此 Map 发送到每个节点中，如果不进行广播，每个task执行时都会去获取该Map数据，造成了性能浪费。</p><pre class="line-numbers language-java"><code class="language-java">val people_info <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">,</span><span class="token string">"lsw"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>val people_bc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>people_info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对大数据进行遍历，使用mapPartition而不是map，因为mapPartition是在每个partition中进行操作，因此可以减少遍历时新建broadCastMap.value对象的空间消耗，同时匹配不到的数据也不会返回（）。</p><pre class="line-numbers language-java"><code class="language-java">val res <span class="token operator">=</span> student_all<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    val stuMap <span class="token operator">=</span> people_bc<span class="token punctuation">.</span>value    val arrayBuffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span>school<span class="token punctuation">,</span>sno<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stuMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> stuMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>idCard<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    arrayBuffer<span class="token punctuation">.</span>iterator<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用 for 的守卫机制来实现上述代码</p><pre class="line-numbers language-java"><code class="language-java">val res1 <span class="token operator">=</span> student_all<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    val stuMap <span class="token operator">=</span> people_bc<span class="token punctuation">.</span>value    <span class="token keyword">for</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> school<span class="token punctuation">,</span> sno<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">-</span> iter        <span class="token keyword">if</span><span class="token punctuation">(</span>stuMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token function">yield</span> <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> stuMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>idCard<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkContext<span class="token punctuation">,</span> SparkConf<span class="token punctuation">}</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBufferobject joinTest <span class="token keyword">extends</span> <span class="token class-name">App</span><span class="token punctuation">{</span>  val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * map-side-join   * 取出小表中出现的用户与大表关联后取出所需要的信息   * */</span>   <span class="token comment" spellcheck="true">//小表</span>  val small <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//大表</span>  val big <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"s1"</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"s2"</span><span class="token punctuation">,</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"s3"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"s2"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将需要关联的小表进行关联</span>  val smallbc <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 使用mapPartition而不是用map，减少创建broadCastMap.value的空间消耗   * 同时匹配不到的数据也不需要返回（）   * */</span>  val res <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    val smallMap <span class="token operator">=</span> smallbc<span class="token punctuation">.</span>value    val arrayBuffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>belong<span class="token punctuation">,</span>no<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>smallMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> smallMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>belong<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    arrayBuffer<span class="token punctuation">.</span>iterator  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 使用另一种方式实现   * 使用for的守卫   * */</span>  val res1 <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    val smallMap <span class="token operator">=</span> smallbc<span class="token punctuation">.</span>value    <span class="token keyword">for</span><span class="token punctuation">{</span>      <span class="token punctuation">(</span>idCard<span class="token punctuation">,</span> school<span class="token punctuation">,</span> sno<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">-</span> iter      <span class="token keyword">if</span><span class="token punctuation">(</span>smallMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token function">yield</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> smallMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>belong<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>1,a,s1</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkcore练习_1,RDD转化为RDD[LabelPoint]和map-side-join以及将结果（RDD/dataframe）输出到一个文件保存</title>
      <link href="/20191219/22165.html"/>
      <url>/20191219/22165.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据集net-gz为网络流量数据，-数据集每条记录展现每个连接的信息，-最后一列为攻击的标签"><a href="#1-数据集net-gz为网络流量数据，-数据集每条记录展现每个连接的信息，-最后一列为攻击的标签" class="headerlink" title="1. 数据集net.gz为网络流量数据， 数据集每条记录展现每个连接的信息， 最后一列为攻击的标签"></a>1. 数据集net.gz为网络流量数据， 数据集每条记录展现每个连接的信息， 最后一列为攻击的标签</h1><p> (1) 请统计， 出现的攻击类型对应的攻击次数<br> (2) 为了输入给算法， 请将RDD 类型转换为RDD[Labelpoint]<br>（ Labelpoint为Spark Vector）</p><h2 id="1-不使用labelpoint："><a href="#1-不使用labelpoint：" class="headerlink" title="(1)不使用labelpoint："></a>(1)不使用labelpoint：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 15:11 * */</span>object homework01 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"ch2homework01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//val spark = SparkSession.builder().appName("ch2homework1").master("local[4]").getOrCreate()</span>    <span class="token comment" spellcheck="true">//import spark.implicits._</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用labelpoint-机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签"><a href="#2-使用labelpoint-机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签" class="headerlink" title="(2)使用labelpoint,机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签"></a>(2)使用labelpoint,机器学习特征转化word2VC还不是很熟练，暂时用累加一的方式做标签</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>mllib<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>Vectors<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>mllib<span class="token punctuation">.</span>regression<span class="token punctuation">.</span>LabeledPoint<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 15:11 * */</span>object homework01 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"ch2homework01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    val rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"file:///E://FTP//spark//2-sparkCore1//kddcup.data.gz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>     <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    var y<span class="token operator">:</span>Double<span class="token operator">=</span> <span class="token number">0</span>    val labeledPoint <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map <span class="token punctuation">{</span> x <span class="token operator">=</span><span class="token operator">></span>      y<span class="token operator">+=</span><span class="token number">1.0</span><span class="token comment" spellcheck="true">//标签每次加一</span>      <span class="token function">LabeledPoint</span><span class="token punctuation">(</span>        y<span class="token punctuation">,</span> Vectors<span class="token punctuation">.</span><span class="token function">dense</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    labeledPoint<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-数据集art-txt中存储id-和-姓名（-用制表符-t-分割）-，-art-alias-txt-存储正确ID-和错误ID-的对应关系，-编写程序，-将art-txt-中id-到art-alias-txt中匹配出正确的ID-并组成新的RDD-id-name-。"><a href="#2-数据集art-txt中存储id-和-姓名（-用制表符-t-分割）-，-art-alias-txt-存储正确ID-和错误ID-的对应关系，-编写程序，-将art-txt-中id-到art-alias-txt中匹配出正确的ID-并组成新的RDD-id-name-。" class="headerlink" title="2. 数据集art.txt中存储id 和 姓名（ 用制表符/t 分割） ， art_alias.txt 存储正确ID 和错误ID 的对应关系， 编写程序， 将art.txt 中id 到art_alias.txt中匹配出正确的ID,并组成新的RDD[(id,name)]。"></a>2. 数据集art.txt中存储id 和 姓名（ 用制表符/t 分割） ， art_alias.txt 存储正确ID 和错误ID 的对应关系， 编写程序， 将art.txt 中id 到art_alias.txt中匹配出正确的ID,并组成新的RDD[(id,name)]。</h1><p>  提示：在处理art.txt 数据集过程中会遇到数据不合规的问题， 合理使用Some 和 None 解决此问题。<br>  在实际情况中往往art.txt 数据集会随着系统的运行时间增长变得很大， 利用map side join 思想解决上面的的问题。</p><p>最开始没有想到用map-side-join导致运行时间及其长，非常不好</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 20:22 * */</span>object homework02 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    var arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不用map-side-join</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val alias <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_alias.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span><span class="token operator">-</span> data<span class="token punctuation">.</span>keySet<span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>cid <span class="token operator">&lt;</span><span class="token operator">-</span> alias<span class="token punctuation">.</span>keySet<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> alias<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span>          arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用了map-side-join之后，速度直线上升。<br>map-side-join:<br>将少量的数据转化为Map进行广播，广播会将此 Map 发送到每个节点中，如果不进行广播，每个task执行时都会去获取该Map数据，造成了性能浪费。<br>对大数据进行遍历，使用mapPartition而不是map，因为mapPartition是在每个partition中进行操作，因此可以减少遍历时新建broadCastMap.value对象的空间消耗，同时匹配不到的数据也不会返回（）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> homework<span class="token punctuation">.</span>chapter2<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-08 20:22 * */</span>object homework02 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map-side-join</span>    val data <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    val alias <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"E:\\FTP\\spark\\2-sparkCore1\\artist_alias.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      var strs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>      strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//错误id做key，正确id做val</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val alias_bc<span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span>    val res <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val aliasMap <span class="token operator">=</span> alias_bc<span class="token punctuation">.</span>value      val arrayBuffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      iter<span class="token punctuation">.</span>foreach<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aliasMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>wid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>aliasMap<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>         arrayBuffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      arrayBuffer<span class="token punctuation">.</span>iterator    <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":  文件被删除"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//saveAstextFile默认是将RDD输出到多个文件的，因此我们需要通过方法coalesce(1)来设置，从而将RDD输出到一个文件中。</span>    res<span class="token punctuation">.</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种实现，for的守卫</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//另一种，用for的守卫实现</span>    val res1<span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">mapPartitions</span><span class="token punctuation">(</span>iter<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      val aliasMap1 <span class="token operator">=</span> alias_bc<span class="token punctuation">.</span>value      <span class="token keyword">for</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span>wid<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>iter        <span class="token keyword">if</span><span class="token punctuation">(</span>aliasMap1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>wid<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token function">yield</span> <span class="token punctuation">(</span>aliasMap1<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res1<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="将RDD输出到一个文件"><a href="#将RDD输出到一个文件" class="headerlink" title="将RDD输出到一个文件"></a>将RDD输出到一个文件</h1><p>saveAstextFile默认是将RDD输出到多个文件的，因此我们需要通过方法coalesce(1)来设置，从而将RDD输出到一个文件中。</p><pre class="line-numbers language-java"><code class="language-java">    res<span class="token punctuation">.</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span><span class="token string">"E:\\table\\homework2_out"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="将dataframe保存到一个csv"><a href="#将dataframe保存到一个csv" class="headerlink" title="将dataframe保存到一个csv"></a>将dataframe保存到一个csv</h1><p>dataframe保存到一个文件格式为‘csv’，repartition(1)将之前分区的多个输出重新合并到一个分区</p><pre class="line-numbers language-java"><code class="language-java">   df<span class="token punctuation">.</span><span class="token function">repartition</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"E://table//local_22_out//"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala一行代码实现wordcount解析</title>
      <link href="/20191219/64784.html"/>
      <url>/20191219/64784.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-scala"><code class="language-scala"> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"/data/wordcount.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>word<span class="token keyword">=></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这个file读的是hdfs文件,<a href="https://blog.csdn.net/qq_42400267/article/details/103417238" target="_blank" rel="noopener">读文件的区别</a></p><pre class="line-numbers language-scala"><code class="language-scala">sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"/data/wordcount.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//读取这个变量地址指定的文件</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//把文件中每一行按空格分割并转成多行</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//把上面转成多行中的每一项转换成一组一组的数据，每组数据为自身加1的组合，等价于(_,1)、word=>(word,1)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//把每组数据的value值进行累加，也就是把每组数据的所有1进行累加，求出每组key的总数。等价于(_+_)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token number">.2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//按上一步每组的累加值进行排序,等价于(_,_2)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//收集一个弹性分布式数据集RDD的所有元素到一个数组中</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在scala中如果函数中只有一个变量那可以不写，或者使用匿名变量<br>代码里的(, 1) 这个就是逗号前面有个匿名变量,<br>_.2 这个 就是代表元组的第2个值 可以写成这样的形式f =&gt; {f._2} 那这个f和_就是一个意思了 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark运行模式的区别</title>
      <link href="/20191219/50108.html"/>
      <url>/20191219/50108.html</url>
      
        <content type="html"><![CDATA[<p>local    ：就是单机，jobs都在这台机器上运行。<br>standalone：就是说多台机器组成一个集群，然后jobs可以分在多台机器上运行<br>yarn：就是说spark程序运行在yarn上<br>client ：就是Jobs在不同机器运行，然后结果返回到这台机器上。<br>cluster ： 就是说jobs在不同机器上运行，结果返回到集群中的某一台机器上。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读取文件时，读取hdfs集群的文件和本机文件的scala代码写法</title>
      <link href="/20191219/8494.html"/>
      <url>/20191219/8494.html</url>
      
        <content type="html"><![CDATA[<h1 id="读取hdfs集群的文件"><a href="#读取hdfs集群的文件" class="headerlink" title="读取hdfs集群的文件"></a>读取hdfs集群的文件</h1><p>val file=sc.textFile(“/data/wordcount.txt”)<br>spark默认是在hdfs目录读取所以可以不写hdfs<br>也可以写成：val file=sc.textFile(“hdfs://nn:9000/path/file”)</p><h1 id="读取本机文件"><a href="#读取本机文件" class="headerlink" title="读取本机文件"></a>读取本机文件</h1><p>val file=sc.textFile(“<strong>file://</strong>/data/wordcount.txt”)</p><h1 id="文本文件-TextInputFormat"><a href="#文本文件-TextInputFormat" class="headerlink" title="文本文件 TextInputFormat"></a>文本文件 TextInputFormat</h1><p>sc.textFile(“file.txt”) // 将本地文本文件加载成 RDD<br>sc.textFile(“directory/*.txt”) // 将某类文本文件加载成 RDD<br>sc.textFile(“hdfs://nn:9000/path/file”) // hdfs 文件或目录</p><h1 id="sequenceFile文件-SequenceFileInputFormat"><a href="#sequenceFile文件-SequenceFileInputFormat" class="headerlink" title="sequenceFile文件 SequenceFileInputFormat"></a>sequenceFile文件 SequenceFileInputFormat</h1><p>sc.sequenceFile(“file.txt”) //将本地二进制文件加载成RDD<br>sc.sequenceFile[String, Int] (“hdfs://nn:9000/path/file”)</p><h1 id="使用任意自定义的Hadoop-InputFormat"><a href="#使用任意自定义的Hadoop-InputFormat" class="headerlink" title="使用任意自定义的Hadoop InputFormat"></a>使用任意自定义的Hadoop InputFormat</h1><p>sc.hadoopFile(path, inputFmt, keyClass, valClass)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea通过maven创建scala项目，自动生成的App.scala报错</title>
      <link href="/20191219/16157.html"/>
      <url>/20191219/16157.html</url>
      
        <content type="html"><![CDATA[<h1 id="直接删除自动生成的scala文件"><a href="#直接删除自动生成的scala文件" class="headerlink" title="直接删除自动生成的scala文件"></a>直接删除自动生成的scala文件</h1><p>main里有一个<br>test里有两个<br>删了然后新建即可</p><p><strong>如果还不行，注意版本号</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea编写spark程序时，import org.apache.spark报错</title>
      <link href="/20191219/57944.html"/>
      <url>/20191219/57944.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>导入spark程序时，spark显示不能识别此符号<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205175818179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h1><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205180140799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205180228633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>去官网下载对应spark版本的压缩包，<a href="http://archive.apache.org/dist/spark/" target="_blank" rel="noopener">链接</a><br>解压，既有jars目录<br>或者pom.xml加入</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.databricks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-csv_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming-kafka_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言第五次实训,dplyr 、tidyr和lubridate处理数据</title>
      <link href="/20191219/34044.html"/>
      <url>/20191219/34044.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目1："><a href="#题目1：" class="headerlink" title="题目1："></a>题目1：</h1><p>1.数据处理【只用SY-20150401.csv】<br>将数据处理成每条数据处于一天中的第几个5分钟（说明： 00:00:01在第一个5分钟内， 00:10:13<br>在第三个5分钟内），由于一天可能多次乘坐地铁，根据卡号和进站时间，查询最近出站的时间，<br>作为本次出站时间。参考函数lubridate::hms， lubridate:: period_to_seconds。<br>处理的最终结果： dataframe(名称trade.metro.in.out )<br>字段 字段说明<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205163004682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>提交的表格按照card.id排序。<br>Notebook中展示输出结果为<br>head(trade.metro.in.out,10)<br>并输出本地文件<br>shmetro_line_in_out.csv</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>读数据：</p><pre class="line-numbers language-python"><code class="language-python">setwd<span class="token punctuation">(</span><span class="token string">"E://table"</span><span class="token punctuation">)</span>library<span class="token punctuation">(</span>data<span class="token punctuation">.</span>table<span class="token punctuation">)</span>dt<span class="token operator">=</span>fread<span class="token punctuation">(</span><span class="token string">'SY-20150401.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重命名：</p><pre class="line-numbers language-python"><code class="language-python">names<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'card_id'</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">,</span><span class="token string">'time'</span><span class="token punctuation">,</span><span class="token string">'station'</span><span class="token punctuation">,</span><span class="token string">'vehicle'</span><span class="token punctuation">,</span><span class="token string">'money'</span><span class="token punctuation">,</span><span class="token string">'property'</span><span class="token punctuation">)</span>dt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>选取是地铁的数据</p><pre class="line-numbers language-python"><code class="language-python">sy<span class="token operator">&lt;</span><span class="token operator">-</span>dt<span class="token punctuation">[</span>dt$vehicle<span class="token operator">==</span><span class="token string">'地铁'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>sy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将station分成2个字段line和station，利用‘号线’来分割；处理每5分钟一段，并按M5排序（化为秒÷300向上取整）</p><pre class="line-numbers language-python"><code class="language-python">library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>library<span class="token punctuation">(</span>tidyr<span class="token punctuation">)</span>sy_split<span class="token operator">&lt;</span><span class="token operator">-</span>subset<span class="token punctuation">(</span>sy<span class="token punctuation">,</span>select <span class="token operator">=</span> c<span class="token punctuation">(</span>card_id<span class="token punctuation">,</span>time<span class="token punctuation">,</span>station<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">,</span>na<span class="token punctuation">.</span>rm<span class="token operator">=</span>TRUE<span class="token punctuation">)</span>sy_split<span class="token operator">&lt;</span><span class="token operator">-</span>separate<span class="token punctuation">(</span>sy_split<span class="token punctuation">,</span><span class="token string">'station'</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token string">'line'</span><span class="token punctuation">,</span><span class="token string">'station'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'号线'</span><span class="token punctuation">,</span>remove<span class="token operator">=</span>TRUE<span class="token punctuation">)</span>sy_split$M5<span class="token operator">&lt;</span><span class="token operator">-</span>ceiling<span class="token punctuation">(</span><span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>period_to_seconds<span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>hms<span class="token punctuation">(</span>sy_split$time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">300</span><span class="token punctuation">)</span>sy_split<span class="token operator">&lt;</span><span class="token operator">-</span>sy_split<span class="token punctuation">[</span>order<span class="token punctuation">(</span>sy_split$M5<span class="token punctuation">)</span><span class="token punctuation">]</span>sy_split<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统计进站数据</p><pre class="line-numbers language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span> <span class="token operator">&lt;</span><span class="token operator">-</span> subset<span class="token punctuation">(</span>sy_split<span class="token punctuation">,</span>money<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span>select<span class="token operator">=</span><span class="token operator">-</span>c<span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span>names<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'card.id'</span><span class="token punctuation">,</span><span class="token string">'time.in'</span><span class="token punctuation">,</span><span class="token string">'line.in'</span><span class="token punctuation">,</span><span class="token string">'station.in'</span><span class="token punctuation">,</span><span class="token string">'M5.in'</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>统计出站数据</p><pre class="line-numbers language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>sy_split<span class="token punctuation">[</span>money<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span>names<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'card.id'</span><span class="token punctuation">,</span><span class="token string">'time.out'</span><span class="token punctuation">,</span><span class="token string">'line.out'</span><span class="token punctuation">,</span><span class="token string">'station.out'</span><span class="token punctuation">,</span><span class="token string">'money'</span><span class="token punctuation">,</span><span class="token string">'M5.out'</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据card.id将5和6合并；并计算乘车时长；将乘车时长大于0的取出来</p><pre class="line-numbers language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>merge<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">,</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span>out<span class="token punctuation">,</span>by<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">'card.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out$duration<span class="token operator">=</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>period_to_seconds<span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>hms<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out$time<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>period_to_seconds<span class="token punctuation">(</span>lubridate<span class="token punctuation">:</span><span class="token punctuation">:</span>hms<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out$time<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>subset<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span>duration<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过card.id, M5.in来统计出某个card.id的最短的乘车时长<br>然后通过duration==duration_min，将最近出站时间，找出来<br>再将中间的统计量去掉，也可以dplyr中的管道%&gt;%实现</p><pre class="line-numbers language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">[</span><span class="token punctuation">,</span>duration<span class="token punctuation">.</span>min<span class="token punctuation">:</span><span class="token operator">=</span>min<span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>id<span class="token punctuation">,</span>M5<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">]</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>outtrade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>subset<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span>duration<span class="token operator">==</span>duration<span class="token punctuation">.</span>min<span class="token punctuation">,</span>select <span class="token operator">=</span> <span class="token operator">-</span>c<span class="token punctuation">(</span>duration<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按照card.id来排序，并展示前10条</p><pre class="line-numbers language-python"><code class="language-python">trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">-</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">[</span>order<span class="token punctuation">(</span>card<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>head<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将处理后的数据输出</p><pre class="line-numbers language-python"><code class="language-python">write<span class="token punctuation">.</span>csv<span class="token punctuation">(</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token string">'shmetro_line_in_out.csv'</span><span class="token punctuation">,</span>row<span class="token punctuation">.</span>names <span class="token operator">=</span> FALSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用1中的处理结果，按照station.in,station.out来分组，统计各组的数量<br>按照进出站的流量排序，取出前10个<br>展示前6个</p><pre class="line-numbers language-python"><code class="language-python">cus_nums<span class="token operator">&lt;</span><span class="token operator">-</span>trade<span class="token punctuation">.</span>metro<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span>out<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">(</span>cusnums<span class="token operator">=</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">(</span>station<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">,</span>station<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">]</span>cus_nums<span class="token operator">&lt;</span><span class="token operator">-</span>cus_nums<span class="token punctuation">[</span>order<span class="token punctuation">(</span>cusnums<span class="token punctuation">,</span>decreasing <span class="token operator">=</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">]</span>cus_nums<span class="token operator">&lt;</span><span class="token operator">-</span>cus_nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span>head<span class="token punctuation">(</span>cus_nums<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言第六次实训,leaflet绘制地铁线路图</title>
      <link href="/20191219/57393.html"/>
      <url>/20191219/57393.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>数据请到我的主页看我的上传资源</p><ol><li>使用leaflet绘制地铁线路图，要求<br>1） 图中绘制地铁线路<br>2） 各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，<br>并且提示线路、站点、流量的具体数值。<br>Shenyang &lt;- leaflet() %&gt;%<br>setView(lng=123.44,lat=41.81,zoom = 11) %&gt;% addProviderTiles(“CartoDB.Positron”)</li><li>使用plotly绘制（17:00:00-17:05:00） 出站流量最多的五个站点的出站流量(柱状图)</li></ol><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><h3 id="第一步，读文件获取数据，编写辅助函数绘图"><a href="#第一步，读文件获取数据，编写辅助函数绘图" class="headerlink" title="第一步，读文件获取数据，编写辅助函数绘图"></a>第一步，读文件获取数据，编写辅助函数绘图</h3><pre class="line-numbers language-python"><code class="language-python">library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>library<span class="token punctuation">(</span>leaflet<span class="token punctuation">)</span>library<span class="token punctuation">(</span>data<span class="token punctuation">.</span>table<span class="token punctuation">)</span>setwd<span class="token punctuation">(</span><span class="token string">"E://table"</span><span class="token punctuation">)</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"systation.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stations <span class="token operator">&lt;</span><span class="token operator">-</span> arrange<span class="token punctuation">(</span>stations<span class="token punctuation">,</span>line<span class="token punctuation">,</span>line_id<span class="token punctuation">)</span>lines_color <span class="token operator">&lt;</span><span class="token operator">-</span> data<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">"line"</span><span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"color"</span><span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"#00008B"</span><span class="token punctuation">,</span><span class="token string">"#000000"</span><span class="token punctuation">,</span><span class="token string">"#000000"</span><span class="token punctuation">,</span><span class="token string">"#000000"</span><span class="token punctuation">,</span><span class="token string">"#823094"</span><span class="token punctuation">,</span><span class="token string">"#CF047A"</span><span class="token punctuation">,</span><span class="token string">"#F3560F"</span><span class="token punctuation">,</span><span class="token string">"#008CC1"</span><span class="token punctuation">,</span><span class="token string">"#91C5DB"</span><span class="token punctuation">,</span><span class="token string">"#C7AFD3"</span><span class="token punctuation">,</span><span class="token string">"#8C2222"</span><span class="token punctuation">,</span><span class="token string">"#007a61"</span><span class="token punctuation">,</span><span class="token string">"#ec91cc"</span><span class="token punctuation">,</span><span class="token string">"#32D2CA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pal <span class="token operator">&lt;</span><span class="token operator">-</span> colorFactor<span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">.</span>character<span class="token punctuation">(</span>lines_color$color<span class="token punctuation">)</span><span class="token punctuation">,</span> domain <span class="token operator">=</span> stations$line<span class="token punctuation">)</span>Shenyang <span class="token operator">&lt;</span><span class="token operator">-</span> leaflet<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>setView<span class="token punctuation">(</span>lng<span class="token operator">=</span><span class="token number">123.44</span><span class="token punctuation">,</span>lat<span class="token operator">=</span><span class="token number">41.81</span><span class="token punctuation">,</span>zoom <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span> addProviderTiles<span class="token punctuation">(</span><span class="token string">"CartoDB.Positron"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 辅助函数绘制线路</span>draw_line_add <span class="token operator">&lt;</span><span class="token operator">-</span> function<span class="token punctuation">(</span>l_no<span class="token punctuation">,</span>line_s_id<span class="token operator">=</span>NULL<span class="token punctuation">)</span><span class="token punctuation">{</span>  line_color <span class="token operator">&lt;</span><span class="token operator">-</span> lines_color<span class="token punctuation">[</span>lines_color$line<span class="token operator">==</span>l_no<span class="token punctuation">,</span><span class="token punctuation">]</span>$color  line_data <span class="token operator">&lt;</span><span class="token operator">-</span> stations<span class="token punctuation">[</span>stations$line<span class="token operator">==</span>l_no<span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">is</span><span class="token punctuation">.</span>null<span class="token punctuation">(</span>line_s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  draw_lines <span class="token operator">&lt;</span><span class="token operator">-</span> Shenyang <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>    addPolylines<span class="token punctuation">(</span>lat<span class="token operator">=</span>line_data$gps_lat<span class="token punctuation">,</span>lng<span class="token operator">=</span>line_data$gps_lon<span class="token punctuation">,</span>color<span class="token operator">=</span>line_color<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    draw_lines <span class="token operator">&lt;</span><span class="token operator">-</span> Shenyang <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>      addPolylines<span class="token punctuation">(</span>lat<span class="token operator">=</span>line_data$gps_lat<span class="token punctuation">[</span>line_s_id<span class="token punctuation">]</span><span class="token punctuation">,</span>lng<span class="token operator">=</span>line_data$gps_lon<span class="token punctuation">[</span>line_s_id<span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span>line_color<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>draw_lines<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二步，添加地铁站名字"><a href="#第二步，添加地铁站名字" class="headerlink" title="第二步，添加地铁站名字"></a>第二步，添加地铁站名字</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span><span class="token punctuation">(</span>l <span class="token keyword">in</span> unique<span class="token punctuation">(</span>stations$line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  line_length <span class="token operator">&lt;</span><span class="token operator">-</span> nrow<span class="token punctuation">(</span>stations<span class="token punctuation">[</span>stations$line<span class="token operator">==</span>l<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  Shenyang<span class="token operator">&lt;</span><span class="token operator">-</span> draw_line_add<span class="token punctuation">(</span>l_no<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span>stations_no <span class="token operator">&lt;</span><span class="token operator">-</span> nrow<span class="token punctuation">(</span>stations<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">:</span>stations_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>  s <span class="token operator">&lt;</span><span class="token operator">-</span> stations$station<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  stations$lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">-</span> paste<span class="token punctuation">(</span>stations<span class="token punctuation">[</span>stations$station<span class="token operator">==</span>s<span class="token punctuation">,</span><span class="token punctuation">]</span>$line<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>collapse<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#添加地铁站名</span>Shenyang<span class="token operator">&lt;</span><span class="token operator">-</span> Shenyang<span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>  addCircleMarkers<span class="token punctuation">(</span>stations$gps_lon<span class="token punctuation">,</span> stations$gps_lat<span class="token punctuation">,</span> popup <span class="token operator">=</span>paste<span class="token punctuation">(</span>stations$station<span class="token punctuation">,</span>stations$lines<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color <span class="token operator">=</span> pal<span class="token punctuation">(</span>stations$line<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span>  addLegend<span class="token punctuation">(</span>pal<span class="token operator">=</span>pal<span class="token punctuation">,</span>values <span class="token operator">=</span> stations$line<span class="token punctuation">)</span>Shenyang <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205161238766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt="结果"></p><h2 id="第三步，各站点展示进站流量（08-00-00-08-05-00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。"><a href="#第三步，各站点展示进站流量（08-00-00-08-05-00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。" class="headerlink" title="第三步，各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。"></a>第三步，各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##(2)各站点展示进站流量（08:00:00-08:05:00间的数据），流量的大小用标记的大小表示，并且提示线路、站点、流量的具体数值。</span>library<span class="token punctuation">(</span>lubridate<span class="token punctuation">)</span>library<span class="token punctuation">(</span>data<span class="token punctuation">.</span>table<span class="token punctuation">)</span>library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>library<span class="token punctuation">(</span>sqldf<span class="token punctuation">)</span>library<span class="token punctuation">(</span>leaflet<span class="token punctuation">)</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//systation.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//SY-20150401.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata$se<span class="token operator">&lt;</span><span class="token operator">-</span>period_to_seconds<span class="token punctuation">(</span>hms<span class="token punctuation">(</span>stadata$V3<span class="token punctuation">)</span><span class="token punctuation">)</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token keyword">as</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>table<span class="token punctuation">(</span>stadata<span class="token punctuation">)</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>filter<span class="token punctuation">(</span>stadata<span class="token punctuation">,</span>V6<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;</span> se<span class="token operator">>=</span><span class="token number">28800</span> <span class="token operator">&amp;</span> se<span class="token operator">&lt;=</span><span class="token number">29100</span><span class="token punctuation">)</span>getR <span class="token operator">&lt;</span><span class="token operator">-</span> function<span class="token punctuation">(</span>quakes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sapply<span class="token punctuation">(</span>quakes$count<span class="token punctuation">,</span> function<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    count<span class="token operator">/</span><span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>substring<span class="token punctuation">(</span>stadata<span class="token punctuation">[</span><span class="token string">'V4'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>data<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token string">'station'</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>stations<span class="token punctuation">[</span>order<span class="token punctuation">(</span>stations$station<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>count<span class="token operator">&lt;</span><span class="token operator">-</span>sqldf<span class="token punctuation">(</span><span class="token string">"select station, count(*) from stad group by station"</span><span class="token punctuation">)</span>s<span class="token operator">&lt;</span><span class="token operator">-</span>merge<span class="token punctuation">(</span>count<span class="token punctuation">,</span>stations<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"station"</span><span class="token punctuation">)</span>names<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span>Shenyang <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span> addCircleMarkers<span class="token punctuation">(</span>s$gps_lon<span class="token punctuation">,</span> s$gps_lat<span class="token punctuation">,</span> popup <span class="token operator">=</span>paste<span class="token punctuation">(</span>s$station<span class="token punctuation">,</span>s$line<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color <span class="token operator">=</span> pal<span class="token punctuation">(</span>s$line<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span>getR<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token keyword">as</span><span class="token punctuation">.</span>character<span class="token punctuation">(</span>s$count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">%</span> addTiles<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205161411475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt="结果"></p><h2 id="第四步，使用plotly绘制（17-00-00-17-05-00）出站流量最多的五个站点的出站流量"><a href="#第四步，使用plotly绘制（17-00-00-17-05-00）出站流量最多的五个站点的出站流量" class="headerlink" title="第四步，使用plotly绘制（17:00:00-17:05:00）出站流量最多的五个站点的出站流量"></a>第四步，使用plotly绘制（17:00:00-17:05:00）出站流量最多的五个站点的出站流量</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##使用plotly绘制（17:00:00-17:05:00）出站流量最多的五个站点的出站流量。</span>library<span class="token punctuation">(</span>lubridate<span class="token punctuation">)</span>library<span class="token punctuation">(</span>sqldf<span class="token punctuation">)</span>library<span class="token punctuation">(</span>plotly<span class="token punctuation">)</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//systation.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">"E://table//SY-20150401.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stadata$se<span class="token operator">&lt;</span><span class="token operator">-</span>period_to_seconds<span class="token punctuation">(</span>hms<span class="token punctuation">(</span>stadata$V3<span class="token punctuation">)</span><span class="token punctuation">)</span>stadata<span class="token operator">&lt;</span><span class="token operator">-</span>filter<span class="token punctuation">(</span>stadata<span class="token punctuation">,</span>V6<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;</span> se<span class="token operator">>=</span><span class="token number">61200</span> <span class="token operator">&amp;</span> se<span class="token operator">&lt;=</span><span class="token number">61500</span><span class="token punctuation">)</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>substring<span class="token punctuation">(</span>stadata<span class="token punctuation">[</span><span class="token string">'V4'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>stad<span class="token operator">&lt;</span><span class="token operator">-</span>data<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">(</span>stad<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token string">'station'</span>stations<span class="token operator">&lt;</span><span class="token operator">-</span>stations<span class="token punctuation">[</span>order<span class="token punctuation">(</span>stations$station<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>count<span class="token operator">&lt;</span><span class="token operator">-</span>sqldf<span class="token punctuation">(</span><span class="token string">"select station, count(*) from stad group by station"</span><span class="token punctuation">)</span>s<span class="token operator">&lt;</span><span class="token operator">-</span>merge<span class="token punctuation">(</span>count<span class="token punctuation">,</span>stations<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"station"</span><span class="token punctuation">)</span>names<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>c<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>st<span class="token operator">&lt;</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>st<span class="token operator">&lt;</span><span class="token operator">-</span>st<span class="token punctuation">[</span>order<span class="token punctuation">(</span><span class="token operator">-</span>s$count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>st<span class="token operator">&lt;</span><span class="token operator">-</span>st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>plot_ly<span class="token punctuation">(</span>st<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token operator">~</span>station<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token operator">~</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191205161500783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt="结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command line is too long. Shorten command line for OOP or also for Application default configuration</title>
      <link href="/20191219/43158.html"/>
      <url>/20191219/43158.html</url>
      
        <content type="html"><![CDATA[<p>idea运行代码时出现<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191214163545223.png" alt=""><br>解决：<br>在.idea文件夹里的workspace.xml中的</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PropertiesComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标签下添加：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamic.classpath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191214163643841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkSQL练习，分析篮球运动员数据</title>
      <link href="/20191219/8457.html"/>
      <url>/20191219/8457.html</url>
      
        <content type="html"><![CDATA[<h2 id="注：玄学编程，在第二题时设置local-4-时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age-count数量减少！淦！玄学"><a href="#注：玄学编程，在第二题时设置local-4-时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age-count数量减少！淦！玄学" class="headerlink" title="注：玄学编程，在第二题时设置local[4]时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age count数量减少！淦！玄学"></a>注：玄学编程，在第二题时设置local[4]时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age count数量减少！淦！玄学</h2><h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191216142022899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191216142038310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191216142053781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="1-分析2016年-①②③④-属性-z-score-排名"><a href="#1-分析2016年-①②③④-属性-z-score-排名" class="headerlink" title="(1) 分析2016年 ①②③④ 属性 z-score 排名"></a>(1) 分析2016年 ①②③④ 属性 z-score 排名</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> zh<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 15:18 * */</span>object homework1 <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">nba</span><span class="token punctuation">(</span>Age<span class="token operator">:</span>Int<span class="token punctuation">,</span>`FG<span class="token operator">%</span>`<span class="token operator">:</span>Double<span class="token punctuation">,</span>`FT<span class="token operator">%</span>`<span class="token operator">:</span>Double<span class="token punctuation">,</span>`3P13`<span class="token operator">:</span>Double<span class="token punctuation">,</span>TRB<span class="token operator">:</span>Double<span class="token punctuation">,</span>Player<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不使用 `FG%`则会报错</span>  val root<span class="token operator">=</span><span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  val nbaPerdata_1 <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token string">"leagues_NBA_2016_per_game_per_game.csv"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"Age"</span><span class="token punctuation">,</span><span class="token string">"FG%"</span><span class="token punctuation">,</span><span class="token string">"FT%"</span><span class="token punctuation">,</span><span class="token string">"3P13"</span><span class="token punctuation">,</span><span class="token string">"TRB"</span><span class="token punctuation">)</span>  val nbas <span class="token operator">=</span> nbaPerdata_1<span class="token punctuation">.</span>as<span class="token punctuation">[</span>nba<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//抽取其中的"Player","Age","FG%","FT%","3P13","TRB"保存到dataset</span>  def <span class="token function">ans1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//FG%的z-score排名</span>    val `perAvgFG<span class="token operator">%</span>`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"FG%"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(FG%)` as perAvgFG"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgFG"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null值默认为最大,通过处理放到最后，若z-score相同则按照名字排序</span>    val avgFG <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`FG%`) as `avgFG%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有球员的FG%平均值</span>    val stdFG<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`FG%`) as `stdFG%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有球员的FG%的标准差</span>    `perAvgFG<span class="token operator">%</span>`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgFG - ${avgFG})/${stdFG} as `FG_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgFG排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvgFT<span class="token operator">%</span>`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"FT%"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(FT%)` as perAvgFT"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgFT"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avgFT <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`FT%`) as `avgFT%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val stdFT<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`FT%`) as `stdFT%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvgFT<span class="token operator">%</span>`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgFT - ${avgFT})/${stdFT} as `FT_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgFT排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvg3P13`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"3P13"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(3P13)` as perAvg3P13"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvg3P13"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avg3P13 <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`3P13`) as `avg3P13`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val std3P13<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`3P13`) as `std3P13`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvg3P13`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvg3P13 - ${avg3P13})/${std3P13} as `3P_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvg3P13排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvgTRB`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"TRB"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(TRB)` as perAvgTRB"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgTRB"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avgTRB <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`TRB`) as `avgTRB`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val stdTRB<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`TRB`) as `stdTRB`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvgTRB`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgTRB - ${avgTRB})/${stdTRB} as `TRB_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgTRB排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">ans1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为FG%的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为FT%的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为3P的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为TRB的z-score前10排名"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-分析自1980年以来每个年龄段参赛的数目"><a href="#2-分析自1980年以来每个年龄段参赛的数目" class="headerlink" title="(2) 分析自1980年以来每个年龄段参赛的数目"></a>(2) 分析自1980年以来每个年龄段参赛的数目</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> zh<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token punctuation">{</span>FileSystem<span class="token punctuation">,</span> Path<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token punctuation">{</span>DataFrame<span class="token punctuation">,</span> SparkSession<span class="token punctuation">}</span><span class="token keyword">import</span> zh<span class="token punctuation">.</span>homework1<span class="token punctuation">.</span><span class="token punctuation">{</span>root<span class="token punctuation">,</span> spark<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * * @author SmallHeroic * @Date 2019-12-16 10:44 * */</span>object homework2 <span class="token punctuation">{</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext  val root<span class="token operator">=</span><span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>  val TMP_PATH <span class="token operator">=</span> <span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\tmp\\basketball\\"</span>  val fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>TMP_PATH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">1980</span> to <span class="token number">2016</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    val yearStats <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span>s<span class="token string">"${root}leagues_NBA_$i*"</span><span class="token punctuation">)</span>    yearStats<span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span>s<span class="token string">"${TMP_PATH}/BasketballStatsWithYear/$i/"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val ageCount <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>s<span class="token string">"${TMP_PATH}/BasketballStatsWithYear/*"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>读取符合条件的所有文件      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"Age"</span><span class="token punctuation">.</span>asc_nulls_last<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>获取Age，<span class="token function">count</span><span class="token punctuation">(</span>Age<span class="token punctuation">)</span>    ageCount<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为自1980年以来每个年龄段参赛的数目"</span><span class="token punctuation">)</span>    <span class="token operator">/</span><span class="token operator">/</span>另一种实现 <span class="token operator">/</span><span class="token operator">*</span>  val DATA_PATH <span class="token operator">=</span> <span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>    var df<span class="token operator">:</span>DataFrame <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>第一行数据为列名      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>这是自动推断属性列的数据类型。      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>DATA_PATH <span class="token operator">+</span> <span class="token string">"leagues_NBA_1980_per_game_per_game.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>na<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">1981</span> to <span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      var tmp<span class="token operator">=</span>spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>第一行数据为列名        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>这是自动推断属性列的数据类型。        <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>DATA_PATH <span class="token operator">+</span> <span class="token string">"leagues_NBA_"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"_per_game_per_game.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>na<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      df<span class="token operator">=</span>df<span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    val result<span class="token operator">=</span>df<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea编写spark时过滤掉运行时的INFO信息</title>
      <link href="/20191218/44427.html"/>
      <url>/20191218/44427.html</url>
      
        <content type="html"><![CDATA[<p>编写spark程序时，INFO信息导致过多 导致输出非常不好找，因此给他过滤掉</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>在代码中加入</p><pre class="line-numbers language-java"><code class="language-java">val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContextsc<span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//log中只会出现error级别的信息</span><span class="token comment" spellcheck="true">//sc.setLogLevel("WARN") //log中会出现warn和error级别的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><p>此方法需要把resources加入source Folder，如果没有在src/main/下新建folder：resources然后：<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191217150420544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""><br>在spark安装目录下的conf文件夹下找到log4j.properties.template复制到项目目录下的src/main/resources下并改名为log4j.properties，并修改将</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">INFO, console</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改成(改成WARN则log中会出现warn和error级别的信息）</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">ERROR, console</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20191217150030868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea中创建scala项目中插件无法加载的问题</title>
      <link href="/20191205/47436.html"/>
      <url>/20191205/47436.html</url>
      
        <content type="html"><![CDATA[<p>先创建<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://pic.superbed.cn/item/5de8b48cf1f6f81c50c35a28.jpg" alt=""><br>在用idea时由于自己使用的是老师给的pom，出现了<br><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://pic3.superbed.cn/item/5de8b337f1f6f81c50c320dd.jpg" alt=""><br>始终飘红，无法下载</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在依赖下载中加上</p><pre class="line-numbers language-{Xml}"><code class="language-{Xml}"><!-- https://mvnrepository.com/artifact/org.scala-tools/maven-scala-plugin -->    <dependency>      <groupId>org.scala-tools</groupId>      <artifactId>maven-scala-plugin</artifactId>      <version>2.11</version>    </dependency>    <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-eclipse-plugin -->    <dependency>      <groupId>org.apache.maven.plugins</groupId>      <artifactId>maven-eclipse-plugin</artifactId>      <version>2.5.1</version>    </dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即先将这两个依赖下载，然后就不报错了（一定要对应scala Sdk版本）<br>也可以在<a href="https://mvnrepository.com/中找到这俩下载到本地maven仓库中。" target="_blank" rel="noopener">https://mvnrepository.com/中找到这俩下载到本地maven仓库中。</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java小知识</title>
      <link href="/20191124/10867.html"/>
      <url>/20191124/10867.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java小知识"><a href="#Java小知识" class="headerlink" title="Java小知识"></a>Java小知识</h1><h2 id="System-out-printf"><a href="#System-out-printf" class="headerlink" title="System.out.printf"></a>System.out.printf</h2><p>printf(“%,d”,a)标准输出，即输出的结果为每三个数字用逗号分隔为一组（除非结果不足四个数字）。<br>printf(“%d”,a)格式化输出整数形式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPrintf</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//定义一些变量，用来格式化输出。 </span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">345.678</span><span class="token punctuation">;</span> String s <span class="token operator">=</span> <span class="token string">"你好！"</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"%"表示进行格式化输出，"%"之后的内容为格式的定义。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"f"表示格式化输出浮点数。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%9.2f"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"9.2"中的9表示输出的长度，2表示小数点后的位数。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%+9.2f"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"+"表示输出的数带正负号。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-9.4f"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"-"表示输出的数左对齐（默认为右对齐）。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%+-9.3f"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"+-"表示输出的数带正负号且左对齐。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"d"表示输出十进制整数。</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%,d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"d"表示输出十进制整数。输出的结果为每三个数字用逗号分隔为一组（除非结果不足四个数字）。</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%o"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"o"表示输出八进制整数。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"d"表示输出十六进制整数。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#x"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"d"表示输出带有十六进制标志的整数。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"d"表示输出字符串。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出一个浮点数：%f，一个整数：%d，一个字符串：%s"</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>i<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以输出多个变量，注意顺序。 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"字符串：%2$s，%1$d的十六进制数：%1$#x"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"X$"表示第几个变量。 </span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="list、set、map："><a href="#list、set、map：" class="headerlink" title="list、set、map："></a>list、set、map：</h2><p>Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。<br>Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。Map不能包含重复的key，但是可以包含相同的value。</p><h2 id="数组排序："><a href="#数组排序：" class="headerlink" title="数组排序："></a>数组排序：</h2><p>法一：Arrays.sort()<br>Arrays.sort()排序方法在java中是最简单且最常用的排序方法</p><pre class="line-numbers language-Java"><code class="language-Java">int []arr1= {45,34,59,55};  Arrays.sort(arr1);//调用方法排序即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>法二：冒泡排序<br>简单来说，冒泡排序就是重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p><pre class="line-numbers language-Java"><code class="language-Java">//array[]为待排序数组，n为数组长度void BubbleSort(int array[], int n){        int i, j, k;        for(i=0; i<n-1; i++)            for(j=0; j<n-1-i; j++)            {                            if(array[j]>array[j+1])                            {                                    k=array[j];                                    array[j]=array[j+1];                                    array[j+1]=k;                            }                    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法三：选择排序<br>先找到最小元素所在位置的索引，然后将该元素与第一位上的元素进行交换。</p><pre class="line-numbers language-Java"><code class="language-Java">int arr3[]= {23,12,48,56,45};    for(int i=0;i<arr3.length;i++) {           int tem=i;//将数组中从i开始的最小的元素所在位置的索引赋值给tem         for(int j=i;j<arr3.length;j++) {                    if(arr3[j]<arr3[tem]) {                         tem=j;                      }               }           //上面获取了数组中从i开始的最小值的位置索引为tem，利用该索引将第i位上的元素与其进行交换         int temp1=arr3[i];          arr3[i]=arr3[tem];          arr3[tem]=temp1;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法四：反转排序<br>将原数组按逆序排列</p><pre class="line-numbers language-Java"><code class="language-Java">//将数组第i位上的元素与第arr.length-i-1位上的元素进行交换int []arr4={23,12,48,56,45};   for(int i=0;i<arr4.length/2;i++) {          int tp=arr4[i];         arr4[i]=arr4[arr4.length-i-1];          arr4[arr4.length-i-1]=tp;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法五：直接插入排序</p><pre class="line-numbers language-Java"><code class="language-Java">int []arr5={23,12,48,56,45};    for (int i = 1; i < arr5.length; i++) {         for (int j = i; j > 0; j--) {                   if (arr5[j - 1] > arr5[j]) {            //大的放后面                         int tmp = arr5[j - 1];                          arr5[j - 1] = arr5[j];                          arr5[j] = tmp;                      }               }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala-keypoints</title>
      <link href="/20191117/64825.html"/>
      <url>/20191117/64825.html</url>
      
        <content type="html"><![CDATA[<h1 id="一二章"><a href="#一二章" class="headerlink" title="一二章"></a>一二章</h1><p>a+b是a.+(b)的简写<br>通常来说，可以使用 <strong>a 方法 b</strong> 来简写 <strong>a.方法(b)</strong><br>scala不提供++，– 使用+=，-=。<br>不同于java，可自定义操作符<br>如果方法没有参数，不需要使用括号，如 “Bannan”.sorted 。<br>scala通配符为”_”,java”*”。<br>val s=”hello” s(4) 。此处是()而不是[]。（映射map）<br>res变量是val<br>用BigInt计算2的1024次方： BigInt(2).pow(1024)<br>不能x=y=1，x会为（）。<br>scala函数没有break和continue语句来结束循环。如需使用可以</p><ul><li>使用布尔型变量</li><li>使用嵌套函数，在其中return</li><li>使用breaks对象中的break方法，import scala.util.control.Breaks.__</li></ul><p>1 to 5 返回整数区间，不是参数seq序列，（1 to 5:<em>*)则返回参数序列,用(:</em><em>)转化为参数序列，(args:Int</em>)可变长度参数列表<br>没有返回值即返回值为unit的函数称为过程<br>throw表达式返回值类型为Nothing，在if/else表达式中，如果一个表达式的分支是Nothing，则它的类型就是另一分支的类型。<br>Scala赋值语句的值是unit类型，因此x=y=1结果为x=（）。</p><h2 id="1-probablePrime-6-Random"><a href="#1-probablePrime-6-Random" class="headerlink" title="1.probablePrime(6,Random)"></a>1.probablePrime(6,Random)</h2><p>Random是scala.util._中的包<br>probablePrime是scala.math.BigInt._伴生对象中的方法：<br>probablePrime(a,Random)<br>官方文档这么说的：Returns a positive BigInt that is probably prime, with the specified bitLength.但是翻译过来却让人不好理解，<br>实际上参数的意义是随机地从2^a和2^(a-1)之间的选取一个素数。</p><h2 id="2-BigInt-Random-nextInt-toString-36"><a href="#2-BigInt-Random-nextInt-toString-36" class="headerlink" title="2. BigInt(Random.nextInt).toString(36)"></a>2. BigInt(Random.nextInt).toString(36)</h2><p>随机获取一个值，并将它转成“36进制”的字符串。<br>36进制就是10个数字0-9加上a-z 26个字母组成的。就是在36个字符中随机选取几个组成串（正负也是随机的）。不信的话可以试试toString(11)，只会出现字母a别的不会出现。<br>测试时候打印出来的串多是6位也有5位的。</p><h2 id="3-Scala的”-”符号"><a href="#3-Scala的”-”符号" class="headerlink" title="3.Scala的”_”符号"></a>3.Scala的”_”符号</h2><ul><li>1、作为“通配符”，类似Java中的*。如import scala.math._</li><li>2、(<code>:_*</code>)作为一个整体，告诉编译器你希望将某个参数当作参数序列处理！例如val s = sum(1 to 5:_*)就是将1 to 5当作参数序列处理。</li><li><strong>3、指代一个集合中的每个元素</strong>。例如我们要在一个Array a中筛出偶数，并乘以2，可以用以下办法：a.foreach(2<em><code>_</code>),a.filter(<code>_</code>%2==0).map(2</em><code>_</code>)。又如要对缓冲数组ArrayBuffer b排序，可以这样：val bSorted = b.sorted(_)</li><li>4、在元组中，可以用方法_1, _2, _3访问组员。如a._2。其中句点可以用空格替代。</li><li>5、使用模式匹配可以用来获取元组的组员，例如val (first, second, third) = t但如果不是所有的部件都需要，那么可以在不需要的部件位置上使用_。比如上一例中val (first, second,<code>_</code>) = t</li><li>6、还有一点，下划线_代表的是某一类型的默认值。对于Int来说，它是0。对于Double来说，它是0.0。对于引用类型，它是null。</li></ul><h2 id="和-分别代表什么"><a href="#和-分别代表什么" class="headerlink" title="_ 和 _*分别代表什么"></a><code>_</code> 和 _*分别代表什么</h2><p>将函数 赋值给一个变量，注意语法</p><pre class="line-numbers language-java"><code class="language-java">val max4 <span class="token operator">=</span> max3 _<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果函数的参数，函数体（右边），有且仅使用一次，参数可以使用下划线_代替</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--litter--"</span><span class="token punctuation">)</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"litter"</span><span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>作为函数的参数<br>一个匿名的函数传递给一个方法或者函数的时候，scala会尽量推断出参数类型。例如一个完整的匿名函数作为参数可以写为</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> def <span class="token function">compute</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>Double<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>compute<span class="token operator">:</span> <span class="token punctuation">(</span>f<span class="token operator">:</span> Double <span class="token operator">=</span><span class="token operator">></span> Double<span class="token punctuation">)</span>Double<span class="token comment" spellcheck="true">//传递一个匿名函数作为compute的参数</span>scala<span class="token operator">></span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>res1<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">6.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果参数x在=&gt;右侧只出现一次，可以用_替代这个参数，简写为</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> _<span class="token punctuation">)</span>res2<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">6.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更常见的使用方式为</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>res0<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>IndexedSeq<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>res1<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>IndexedSeq<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上所说的为一元函数，那么对于二元函数，即有两个参数x和y的函数，是如何使用_的？可以参考sortWith方法def sortWith(lt: (T, T) ⇒ Boolean): Array[T]法的参数官方解释为</p><pre><code>the comparison function which tests whether its first argument precedes its second argument in the desired ordering.</code></pre><p>这个方法需要的参数是一个二元函数，而且函数参数的类型为T，例如</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortWith</span><span class="token punctuation">(</span>_ <span class="token operator">&lt;</span> _<span class="token punctuation">)</span>res0<span class="token operator">:</span> List<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用_分别表示二元函数中的参数x和y。</p><p>作为标识符<br>例如定义一个变量val _num = 123</p><p>作为通配符<br>import语句<br>例如import scala.math._<br>case语句<br>例如</p><pre class="line-numbers language-java"><code class="language-java">object MatchTest <span class="token keyword">extends</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>  def <span class="token function">matchTest</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> x match <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"one"</span>    <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"two"</span>    <span class="token keyword">case</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"many"</span>  <span class="token punctuation">}</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">matchTest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元组（tuple）<br>例如</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以定义一个tuple</span>scala<span class="token operator">></span> val t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">)</span>t<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Double<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span>Fred<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以用_1，_2，_3访问这个元组</span>scala<span class="token operator">></span> t<span class="token punctuation">.</span>_1res3<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>scala<span class="token operator">></span> t<span class="token punctuation">.</span>_2res4<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3.14</span>scala<span class="token operator">></span> t<span class="token punctuation">.</span>_3res5<span class="token operator">:</span> String <span class="token operator">=</span> Fred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过模式匹配获取元组的元素，当不需要某个值的时候可以使用_替代，例如</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> val t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">)</span>t<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Double<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span>Fred<span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token function">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> tfirst<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>second<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3.14</span>scala<span class="token operator">></span> <span class="token function">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token operator">=</span> tfirst<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下划线和其他符号组合的使用方式<br>下划线与等号（_=）<br>自定义setter方法，请参见《Overriding def with var in Scala》</p><p>下划线与星号（_*）<br>1.变长参数<br>例如定义一个变长参数的方法sum，然后计算1-5的和，可以写为</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> def <span class="token function">sum</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Int<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token operator">|</span> var result <span class="token operator">=</span> <span class="token number">0</span>     <span class="token operator">|</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>arg <span class="token operator">&lt;</span><span class="token operator">-</span> args<span class="token punctuation">)</span> result <span class="token operator">+=</span> arg     <span class="token operator">|</span> result     <span class="token operator">|</span> <span class="token punctuation">}</span>sum<span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> Int<span class="token operator">*</span><span class="token punctuation">)</span>Intscala<span class="token operator">></span> val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>s<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果使用这种方式就会报错</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span> error<span class="token operator">:</span> type mismatch<span class="token punctuation">;</span> found   <span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Range<span class="token punctuation">.</span>Inclusive required<span class="token operator">:</span> Int       val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span>                     <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况必须在后面写上: _*将1 to 5转化为参数序列</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> val s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.变量声明中的模式<br>例如，下面代码分别将arr中的第一个和第二个值赋给first和second</p><pre class="line-numbers language-java"><code class="language-java">scala<span class="token operator">></span> val arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>arr<span class="token operator">:</span> Array<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>scala<span class="token operator">></span> val <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> _<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> arrscala<span class="token operator">></span> val <span class="token function">Array</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> _<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> arrfirst<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>second<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><pre class="line-numbers language-Scala"><code class="language-Scala">var a:Array = Array[Int](4)var b:ArrayBuffer = ArrayBuffer[Int]() //长度可变,可以对数组排序，不可以对数组缓冲排序a.toBufferb.toArraya.indices//获取下标//遍历数组，两个元素一跳0 until a.length by 2//遍历数组，从尾端开始0 until a.length by -1 //也可以用转置reserve//数组转换for...yield..或filter...map...var c = for(i <- a) yield 2*ivar d = a.filter(_%2==0).map(2*_)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个由Java.util.TimeZone.getAvailableIDs返回的时区集合，判断条件是它们在美洲。去掉”America/“前缀并排序</p><pre class="line-numbers language-Scala"><code class="language-Scala">def main (args: Array[String])= {　　val a=TimeZone()　　a.foreach(println)}def TimeZone()={　　val arr=java.util.TimeZone.getAvailableIDs()　　val tmp=for(ele <-arr if ele.startsWith("America/")) yield {　　　　ele.drop("America/".length)　　}　　scala.util.Sorting.quickSort(tmp)　　tmp}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较数组是否相等：</p><pre class="line-numbers language-Scala"><code class="language-Scala">val a = Array(1,2,3)val b = Array(1,2,3)a==b //返回false，没法接受我也没法解释a sameElements b //返回true。也可写成 a.sameElements(b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四-Map"><a href="#四-Map" class="headerlink" title="四 Map"></a>四 Map</h1><p>如果想要按照插入顺序访问所有键，则使用scala.collection.mutable.LinkedHashMap<a href=""></a><br>若只是使用scala.collection.mutable.Map<a href=""></a>,访问则会根据键的哈希码来划定位置,访问顺序无法确定。<br>若想要按顺序依次访问映射中的键，可以用scala.collection.mutable.SortedMap<a href=""></a><br>元组: 用_1,_2,_3…访问元组<br>元组的下标是从1开始的,而list是从0开始的</p><pre class="line-numbers language-Scala"><code class="language-Scala">val t = (1,"e",4.6) //t的类型为Tuple3[Int,String,Double]val second=t._2 //将second设置为"e",也可以写成t _2。用空格不是句号,空格不可省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>while和do…while..没有返回值，如需使用返回值则应加入变量，如果在其中需要递归则应加入return使其有返回值。<br>只有被private或者fianl修饰的方法 才能使用注解检验是否尾递归 @scala.annotation.tailrec<br>隐式转换函数是以implicit关键字作用于带有单个参数的函数上。这种函数将会自动应用，将值从一种类型转换为另外一种类型。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop实验</title>
      <link href="/20191107/24697.html"/>
      <url>/20191107/24697.html</url>
      
        <content type="html"><![CDATA[<h1 id="hadoop实验"><a href="#hadoop实验" class="headerlink" title="hadoop实验"></a>hadoop实验</h1><h1 id="hive实验"><a href="#hive实验" class="headerlink" title="hive实验"></a>hive实验</h1><h1 id="hbase实验"><a href="#hbase实验" class="headerlink" title="hbase实验"></a>hbase实验</h1><p><a href="https://gitee.com/smallheroic/blog/tree/master/hadoop%E5%AE%9E%E9%AA%8C" target="_blank">下载链接</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/20190911/7251.html"/>
      <url>/20190911/7251.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Hello-hexo！！"><a href="#Hello-hexo！！" class="headerlink" title="Hello hexo！！"></a>Hello hexo！！</h3><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开源</title>
      <link href="/20190827/48696.html"/>
      <url>/20190827/48696.html</url>
      
        <content type="html"><![CDATA[<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="https://cdn.jsdelivr.net/gh/zheroic/zheroic.github.io/images/loading.gif" data-original="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Blog-Open-Source/blog-demo1.gif" alt="演示Demo"></p><h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly" target="_blank" rel="noopener">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>主题, 并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://shw2018.github.io/" target="_blank" rel="noopener">https://shw2018.github.io</a>，博客演示：<a href="https://sunhwee.com" target="_blank" rel="noopener">sunhwee.com</a>。</p><hr><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>原主题特性</strong>:</p><ul><li><p>简单漂亮，文章内容美观易读</p></li><li><p><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</p></li><li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p></li><li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p></li><li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p></li><li><p>时间轴式的归档页</p></li><li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p></li><li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p></li><li><p>可自定义的数据的友情链接页面</p></li><li><p>支持文章置顶和文章打赏</p></li><li><p>支持 <code>MathJax</code></p></li><li><p><code>TOC</code> 目录</p></li><li><p>可设置复制文章内容时追加版权信息</p></li><li><p>可设置阅读文章时做密码验证</p></li><li><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p></li><li><p>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p></li><li><p>支持在首页的音乐播放和视频播放功能</p><p><strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p></li><li><p>修改了原主题的一些很多<code>bug</code>   2019.08.05</p></li><li><p>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</p></li><li><p>增加<code>留言板</code>功能          2019.08.05</p></li><li><p>在关于板块,加入<code>简历</code>功能页   2019.08.05</p></li><li><p>增加视听[视觉听觉影音]板块       2019.08.10</p></li><li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</p></li><li><p>增加网站运行时间显示  2019.08.10</p></li><li><p>增加<code>动漫模型</code>     2019.08.10</p></li><li><p>整体替换Banner图片和文章特色图片   2019.08.10</p></li><li><p>增加分类<code>相册</code>功能         2019.08.29</p></li><li><p>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</p></li><li><p>修改了一些控件的参数   2019.09.01</p></li><li><p>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</p></li><li><p>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</p></li><li><p>添加页面樱花飘落动效            2019.09.09</p></li><li><p>添加鼠标点击烟花爆炸动效   2019.09.09</p></li><li><p>加入天气接口控件   2019.09.09</p></li><li><p>加入鼠标点击文字特效   2019.09.10</p></li><li><p>添加页面雪花飘落动效            2019.09.10</p></li><li><p>添加在线聊天插件            2019.09.12</p></li><li><p>持续更新…</p></li></ul><hr><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目</li><li>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>, 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p>**持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
