<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Command line is too long. </title>
      <link href="/2019/12/19/command-line-is-too-long-shorten-command-line-for-oop-or-also-for-application-default-configuration/"/>
      <url>/2019/12/19/command-line-is-too-long-shorten-command-line-for-oop-or-also-for-application-default-configuration/</url>
      
        <content type="html"><![CDATA[<p>idea运行代码时出现<br><img alt data-src="https://img-blog.csdnimg.cn/20191214163545223.png" class="lozad"><br>解决：<br>在.idea文件夹里的workspace.xml中的</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PropertiesComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>标签下添加：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamic.classpath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><img alt data-src="https://img-blog.csdnimg.cn/20191214163643841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkSQL练习，分析篮球运动员数据</title>
      <link href="/2019/12/19/sparksql-lian-xi-fen-xi-lan-qiu-yun-dong-yuan-shu-ju/"/>
      <url>/2019/12/19/sparksql-lian-xi-fen-xi-lan-qiu-yun-dong-yuan-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="注：玄学编程，在第二题时设置local-4-时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age-count数量减少！淦！玄学"><a href="#注：玄学编程，在第二题时设置local-4-时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age-count数量减少！淦！玄学" class="headerlink" title="注：玄学编程，在第二题时设置local[4]时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age count数量减少！淦！玄学"></a>注：玄学编程，在第二题时设置local[4]时莫名其妙在统计count时会出现某些age统计量变少，如22岁的少2个（正确：1137，统计出来为1135），设置为local时结果就不会出现某些age count数量减少！淦！玄学</h2><h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><p><img alt data-src="https://img-blog.csdnimg.cn/20191216142022899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br><img alt data-src="https://img-blog.csdnimg.cn/20191216142038310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br><img alt data-src="https://img-blog.csdnimg.cn/20191216142053781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><h1 id="1-分析2016年-①②③④-属性-z-score-排名"><a href="#1-分析2016年-①②③④-属性-z-score-排名" class="headerlink" title="(1) 分析2016年 ①②③④ 属性 z-score 排名"></a>(1) 分析2016年 ①②③④ 属性 z-score 排名</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> zh<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token comment" spellcheck="true">/** * * @author smallheroic * @Date 2019-12-12 15:18 * */</span>object homework1 <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">nba</span><span class="token punctuation">(</span>Age<span class="token operator">:</span>Int<span class="token punctuation">,</span>`FG<span class="token operator">%</span>`<span class="token operator">:</span>Double<span class="token punctuation">,</span>`FT<span class="token operator">%</span>`<span class="token operator">:</span>Double<span class="token punctuation">,</span>`3P13`<span class="token operator">:</span>Double<span class="token punctuation">,</span>TRB<span class="token operator">:</span>Double<span class="token punctuation">,</span>Player<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不使用 `FG%`则会报错</span>  val root<span class="token operator">=</span><span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  val nbaPerdata_1 <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token string">"leagues_NBA_2016_per_game_per_game.csv"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"Age"</span><span class="token punctuation">,</span><span class="token string">"FG%"</span><span class="token punctuation">,</span><span class="token string">"FT%"</span><span class="token punctuation">,</span><span class="token string">"3P13"</span><span class="token punctuation">,</span><span class="token string">"TRB"</span><span class="token punctuation">)</span>  val nbas <span class="token operator">=</span> nbaPerdata_1<span class="token punctuation">.</span>as<span class="token punctuation">[</span>nba<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//抽取其中的"Player","Age","FG%","FT%","3P13","TRB"保存到dataset</span>  def <span class="token function">ans1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//FG%的z-score排名</span>    val `perAvgFG<span class="token operator">%</span>`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"FG%"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(FG%)` as perAvgFG"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgFG"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null值默认为最大,通过处理放到最后，若z-score相同则按照名字排序</span>    val avgFG <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`FG%`) as `avgFG%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有球员的FG%平均值</span>    val stdFG<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`FG%`) as `stdFG%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有球员的FG%的标准差</span>    `perAvgFG<span class="token operator">%</span>`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgFG - ${avgFG})/${stdFG} as `FG_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgFG排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvgFT<span class="token operator">%</span>`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"FT%"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(FT%)` as perAvgFT"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgFT"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avgFT <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`FT%`) as `avgFT%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val stdFT<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`FT%`) as `stdFT%`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvgFT<span class="token operator">%</span>`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgFT - ${avgFT})/${stdFT} as `FT_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgFT排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvg3P13`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"3P13"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(3P13)` as perAvg3P13"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvg3P13"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avg3P13 <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`3P13`) as `avg3P13`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val std3P13<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`3P13`) as `std3P13`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvg3P13`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvg3P13 - ${avg3P13})/${std3P13} as `3P_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvg3P13排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">ans1_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>    val `perAvgTRB`<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"TRB"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span><span class="token string">"`avg(TRB)` as perAvgTRB"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"perAvgTRB"</span><span class="token punctuation">.</span>desc_nulls_last<span class="token punctuation">,</span>$<span class="token string">"Player"</span><span class="token punctuation">)</span>    val avgTRB <span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"avg(`TRB`) as `avgTRB`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val stdTRB<span class="token operator">=</span>nbas<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"std(`TRB`) as `stdTRB`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    `perAvgTRB`<span class="token punctuation">.</span><span class="token function">selectExpr</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">,</span>s<span class="token string">"(perAvgTRB - ${avgTRB})/${stdTRB} as `TRB_z-score`"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在perAvgTRB排序过了</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">ans1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为FG%的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为FT%的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为3P的z-score前10排名"</span><span class="token punctuation">)</span>    <span class="token function">ans1_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为TRB的z-score前10排名"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="2-分析自1980年以来每个年龄段参赛的数目"><a href="#2-分析自1980年以来每个年龄段参赛的数目" class="headerlink" title="(2) 分析自1980年以来每个年龄段参赛的数目"></a>(2) 分析自1980年以来每个年龄段参赛的数目</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> zh<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token punctuation">{</span>FileSystem<span class="token punctuation">,</span> Path<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token punctuation">{</span>DataFrame<span class="token punctuation">,</span> SparkSession<span class="token punctuation">}</span><span class="token keyword">import</span> zh<span class="token punctuation">.</span>homework1<span class="token punctuation">.</span><span class="token punctuation">{</span>root<span class="token punctuation">,</span> spark<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * * @author SmallHeroic * @Date 2019-12-16 10:44 * */</span>object homework2 <span class="token punctuation">{</span>  val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"homework2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext  val root<span class="token operator">=</span><span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>  val TMP_PATH <span class="token operator">=</span> <span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\tmp\\basketball\\"</span>  val fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>TMP_PATH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">1980</span> to <span class="token number">2016</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    val yearStats <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span>s<span class="token string">"${root}leagues_NBA_$i*"</span><span class="token punctuation">)</span>    yearStats<span class="token punctuation">.</span><span class="token function">saveAsTextFile</span><span class="token punctuation">(</span>s<span class="token string">"${TMP_PATH}/BasketballStatsWithYear/$i/"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val ageCount <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>s<span class="token string">"${TMP_PATH}/BasketballStatsWithYear/*"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>读取符合条件的所有文件      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>$<span class="token string">"Age"</span><span class="token punctuation">.</span>asc_nulls_last<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>获取Age，<span class="token function">count</span><span class="token punctuation">(</span>Age<span class="token punctuation">)</span>    ageCount<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上为自1980年以来每个年龄段参赛的数目"</span><span class="token punctuation">)</span>    <span class="token operator">/</span><span class="token operator">/</span>另一种实现 <span class="token operator">/</span><span class="token operator">*</span>  val DATA_PATH <span class="token operator">=</span> <span class="token string">"E:\\FTP\\spark\\4-sparkSQL\\basketball\\"</span>    var df<span class="token operator">:</span>DataFrame <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>第一行数据为列名      <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>这是自动推断属性列的数据类型。      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>DATA_PATH <span class="token operator">+</span> <span class="token string">"leagues_NBA_1980_per_game_per_game.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>na<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">1981</span> to <span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      var tmp<span class="token operator">=</span>spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"com.databricks.spark.csv"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>第一行数据为列名        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>这是自动推断属性列的数据类型。        <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>DATA_PATH <span class="token operator">+</span> <span class="token string">"leagues_NBA_"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"_per_game_per_game.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>na<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      df<span class="token operator">=</span>df<span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    val result<span class="token operator">=</span>df<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea编写spark时过滤掉运行时的INFO信息</title>
      <link href="/2019/12/18/idea-bian-xie-spark-shi-guo-lu-diao-yun-xing-shi-de-info-xin-xi/"/>
      <url>/2019/12/18/idea-bian-xie-spark-shi-guo-lu-diao-yun-xing-shi-de-info-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>编写spark程序时，INFO信息导致过多 导致输出非常不好找，因此给他过滤掉</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>在代码中加入</p><pre class=" language-java"><code class="language-java">val spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>val sc <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContextsc<span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//log中只会出现error级别的信息</span><span class="token comment" spellcheck="true">//sc.setLogLevel("WARN") //log中会出现warn和error级别的信息</span></code></pre><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><p>此方法需要把resources加入source Folder，如果没有在src/main/下新建folder：resources然后：<br><img alt data-src="https://img-blog.csdnimg.cn/20191217150420544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"><br>在spark安装目录下的conf文件夹下找到log4j.properties.template复制到项目目录下的src/main/resources下并改名为log4j.properties，并修改将</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">INFO, console</span></code></pre><p>改成(改成WARN则log中会出现warn和error级别的信息）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">ERROR, console</span></code></pre><p><img alt data-src="https://img-blog.csdnimg.cn/20191217150030868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAwMjY3,size_16,color_FFFFFF,t_70" class="lozad"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决idea中创建scala项目中插件无法加载的问题</title>
      <link href="/2019/12/05/jie-jue-idea-zhong-chuang-jian-scala-xiang-mu-zhong-cha-jian-wu-fa-jia-zai-de-wen-ti/"/>
      <url>/2019/12/05/jie-jue-idea-zhong-chuang-jian-scala-xiang-mu-zhong-cha-jian-wu-fa-jia-zai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>先创建<br><img alt data-src="https://pic.superbed.cn/item/5de8b48cf1f6f81c50c35a28.jpg" class="lozad"><br>在用idea时由于自己使用的是老师给的pom，出现了<br><img alt data-src="https://pic3.superbed.cn/item/5de8b337f1f6f81c50c320dd.jpg" class="lozad"><br>始终飘红，无法下载</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在依赖下载中加上</p><pre class=" language-{Xml}"><code class="language-{Xml}"><!-- https://mvnrepository.com/artifact/org.scala-tools/maven-scala-plugin -->    <dependency>      <groupid>org.scala-tools</groupid>      <artifactid>maven-scala-plugin</artifactid>      <version>2.11</version>    </dependency>    <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-eclipse-plugin -->    <dependency>      <groupid>org.apache.maven.plugins</groupid>      <artifactid>maven-eclipse-plugin</artifactid>      <version>2.5.1</version>    </dependency></code></pre><p>即先将这两个依赖下载，然后就不报错了（一定要对应scala Sdk版本）<br>也可以在<a href="https://mvnrepository.com/中找到这俩下载到本地maven仓库中。" target="_blank" rel="noopener">https://mvnrepository.com/中找到这俩下载到本地maven仓库中。</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-keysPoints</title>
      <link href="/2019/11/24/java-keyspoints/"/>
      <url>/2019/11/24/java-keyspoints/</url>
      
        <content type="html"><![CDATA[<h1 id="list、set、map："><a href="#list、set、map：" class="headerlink" title="list、set、map："></a>list、set、map：</h1><p>Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。<br>Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。Map不能包含重复的key，但是可以包含相同的value。</p><h1 id="数组排序："><a href="#数组排序：" class="headerlink" title="数组排序："></a>数组排序：</h1><p>法一：Arrays.sort()<br>Arrays.sort()排序方法在java中是最简单且最常用的排序方法</p><pre class=" language-Java"><code class="language-Java">int []arr1= {45,34,59,55};  Arrays.sort(arr1);//调用方法排序即可</code></pre><p>法二：冒泡排序<br>简单来说，冒泡排序就是重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p><pre class=" language-Java"><code class="language-Java">//array[]为待排序数组，n为数组长度void BubbleSort(int array[], int n){        int i, j, k;        for(i=0; i<n-1; i++)            for(j=0; j<n-1-i; j++)            {                            if(array[j]>array[j+1])                            {                                    k=array[j];                                    array[j]=array[j+1];                                    array[j+1]=k;                            }                    }}</code></pre><p>法三：选择排序<br>先找到最小元素所在位置的索引，然后将该元素与第一位上的元素进行交换。</p><pre class=" language-Java"><code class="language-Java">int arr3[]= {23,12,48,56,45};    for(int i=0;i<arr3.length;i++) {           int tem=i;//将数组中从i开始的最小的元素所在位置的索引赋值给tem         for(int j=i;j<arr3.length;j++) {                    if(arr3[j]<arr3[tem]) {                         tem=j;                      }               }           //上面获取了数组中从i开始的最小值的位置索引为tem，利用该索引将第i位上的元素与其进行交换         int temp1=arr3[i];          arr3[i]=arr3[tem];          arr3[tem]=temp1;    }</code></pre><p>法四：反转排序<br>将原数组按逆序排列</p><pre class=" language-Java"><code class="language-Java">//将数组第i位上的元素与第arr.length-i-1位上的元素进行交换int []arr4={23,12,48,56,45};   for(int i=0;i<arr4.length/2;i++) {          int tp=arr4[i];         arr4[i]=arr4[arr4.length-i-1];          arr4[arr4.length-i-1]=tp;   }</code></pre><p>法五：直接插入排序</p><pre class=" language-Java"><code class="language-Java">int []arr5={23,12,48,56,45};    for (int i = 1; i < arr5.length; i++) {         for (int j = i; j > 0; j--) {                   if (arr5[j - 1] > arr5[j]) {            //大的放后面                         int tmp = arr5[j - 1];                          arr5[j - 1] = arr5[j];                          arr5[j] = tmp;                      }               }   }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快学Scala</title>
      <link href="/2019/11/17/quick-study-scala/"/>
      <url>/2019/11/17/quick-study-scala/</url>
      
        <content type="html"><![CDATA[<h1 id="一二章"><a href="#一二章" class="headerlink" title="一二章"></a>一二章</h1><p>a+b是a.+(b)的简写<br>通常来说，可以使用 <strong>a 方法 b</strong> 来简写 <strong>a.方法(b)</strong><br>scala不提供++，– 使用+=，-=。<br>不同于java，可自定义操作符<br>如果方法没有参数，不需要使用括号，如 “Bannan”.sorted 。<br>scala通配符为”_”,java”*”。<br>val s=”hello” s(4) 。此处是()而不是[]。（映射map）<br>res变量是val<br>用BigInt计算2的1024次方： BigInt(2).pow(1024)<br>不能x=y=1，x会为（）。<br>scala函数没有break和continue语句来结束循环。如需使用可以</p><ul><li>使用布尔型变量</li><li>使用嵌套函数，在其中return</li><li>使用breaks对象中的break方法，import scala.util.control.Breaks.__</li></ul><p>1 to 5 返回整数区间，不是参数seq序列，（1 to 5:<em>*)则返回参数序列,用(:</em><em>)转化为参数序列，(args:Int</em>)可变长度参数列表<br>没有返回值即返回值为unit的函数称为过程<br>throw表达式返回值类型为Nothing，在if/else表达式中，如果一个表达式的分支是Nothing，则它的类型就是另一分支的类型。<br>Scala赋值语句的值是unit类型，因此x=y=1结果为x=（）。</p><h2 id="1-probablePrime-6-Random"><a href="#1-probablePrime-6-Random" class="headerlink" title="1.probablePrime(6,Random)"></a>1.probablePrime(6,Random)</h2><p>Random是scala.util._中的包<br>probablePrime是scala.math.BigInt._伴生对象中的方法：<br>probablePrime(a,Random)<br>官方文档这么说的：Returns a positive BigInt that is probably prime, with the specified bitLength.但是翻译过来却让人不好理解，<br>实际上参数的意义是随机地从2^a和2^(a-1)之间的选取一个素数。</p><h2 id="2-BigInt-Random-nextInt-toString-36"><a href="#2-BigInt-Random-nextInt-toString-36" class="headerlink" title="2. BigInt(Random.nextInt).toString(36)"></a>2. BigInt(Random.nextInt).toString(36)</h2><p>随机获取一个值，并将它转成“36进制”的字符串。<br>36进制就是10个数字0-9加上a-z 26个字母组成的。就是在36个字符中随机选取几个组成串（正负也是随机的）。不信的话可以试试toString(11)，只会出现字母a别的不会出现。<br>测试时候打印出来的串多是6位也有5位的。</p><h2 id="3-Scala的”-”符号"><a href="#3-Scala的”-”符号" class="headerlink" title="3.Scala的”_”符号"></a>3.Scala的”_”符号</h2><ul><li>1、作为“通配符”，类似Java中的*。如import scala.math._</li><li>2、(:<em>*)作为一个整体，告诉编译器你希望将某个参数当作参数序列处理！例如val s = sum(1 to 5:</em>*)就是将1 to 5当作参数序列处理。</li><li><strong>3、指代一个集合中的每个元素</strong>。例如我们要在一个Array a中筛出偶数，并乘以2，可以用以下办法：a.foreach(2<em><em>),a.filter(</em>%2==0).map(2</em><em>)。又如要对缓冲数组ArrayBuffer b排序，可以这样：val bSorted = b.sorted(</em>)</li><li>4、在元组中，可以用方法_1, _2, _3访问组员。如a._2。其中句点可以用空格替代。</li><li>5、使用模式匹配可以用来获取元组的组员，例如val (first, second, third) = t但如果不是所有的部件都需要，那么可以在不需要的部件位置上使用_。比如上一例中val (first, second, _) = t</li><li>6、还有一点，下划线_代表的是某一类型的默认值。对于Int来说，它是0。对于Double来说，它是0.0。对于引用类型，它是null。</li><li>更多：<a href="https://blog.csdn.net/wyz0516071128/article/details/81042667" target="_blank" rel="noopener">https://blog.csdn.net/wyz0516071128/article/details/81042667</a></li></ul><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><pre class=" language-Scala"><code class="language-Scala">var a:Array = Array[Int](4)var b:ArrayBuffer = ArrayBuffer[Int]() //长度可变,可以对数组排序，不可以对数组缓冲排序a.toBufferb.toArraya.indices//获取下标//遍历数组，两个元素一跳0 until a.length by 2//遍历数组，从尾端开始0 until a.length by -1 //也可以用转置reserve//数组转换for...yield..或filter...map...var c = for(i <- a) yield 2*ivar d = a.filter(_%2==0).map(2*_)</code></pre><p>创建一个由Java.util.TimeZone.getAvailableIDs返回的时区集合，判断条件是它们在美洲。去掉”America/“前缀并排序</p><pre class=" language-Scala"><code class="language-Scala">def main (args: Array[String])= {　　val a=TimeZone()　　a.foreach(println)}def TimeZone()={　　val arr=java.util.TimeZone.getAvailableIDs()　　val tmp=for(ele <-arr if ele.startsWith("America/")) yield {　　　　ele.drop("America/".length)　　}　　scala.util.Sorting.quickSort(tmp)　　tmp}</code></pre><p>比较数组是否相等：</p><pre class=" language-Scala"><code class="language-Scala">val a = Array(1,2,3)val b = Array(1,2,3)a==b //返回false，没法接受我也没法解释a sameElements b //返回true。也可写成 a.sameElements(b)</code></pre><h1 id="四-Map"><a href="#四-Map" class="headerlink" title="四 Map"></a>四 Map</h1><p>如果想要按照插入顺序访问所有键，则使用scala.collection.mutable.LinkedHashMap<a href=""></a><br>若只是使用scala.collection.mutable.Map<a href=""></a>,访问则会根据键的哈希码来划定位置,访问顺序无法确定。<br>若想要按顺序依次访问映射中的键，可以用scala.collection.mutable.SortedMap<a href=""></a><br>元组: 用_1,_2,_3…访问元组<br>元组的下标是从1开始的,而list是从0开始的</p><pre class=" language-Scala"><code class="language-Scala">val t = (1,"e",4.6) //t的类型为Tuple3[Int,String,Double]val second=t._2 //将second设置为"e",也可以写成t _2。用空格不是句号,空格不可省略</code></pre><p>while和do…while..没有返回值，如需使用返回值则应加入变量，如果在其中需要递归则应加入return使其有返回值。<br>只有被private或者fianl修饰的方法 才能使用注解检验是否尾递归 @scala.annotation.tailrec<br>隐式转换函数是以implicit关键字作用于带有单个参数的函数上。这种函数将会自动应用，将值从一种类型转换为另外一种类型。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop实验</title>
      <link href="/2019/11/07/hadoop-1-homework/"/>
      <url>/2019/11/07/hadoop-1-homework/</url>
      
        <content type="html"><![CDATA[<h1 id="hadoop实验"><a href="#hadoop实验" class="headerlink" title="hadoop实验"></a>hadoop实验</h1><h1 id="hive实验"><a href="#hive实验" class="headerlink" title="hive实验"></a>hive实验</h1><h1 id="hbase实验"><a href="#hbase实验" class="headerlink" title="hbase实验"></a>hbase实验</h1><p><a href="https://gitee.com/smallheroic/blog/tree/master/hadoop%E5%AE%9E%E9%AA%8C" target="_blank">下载链接</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/09/11/hello-world/"/>
      <url>/2019/09/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Hello-hexo！！"><a href="#Hello-hexo！！" class="headerlink" title="Hello hexo！！"></a>Hello hexo！！</h3><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
